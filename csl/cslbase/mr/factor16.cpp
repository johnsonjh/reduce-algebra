// factor16.cpp                              Copyright (C) A C Norman, 2017

// This is a jiffy-program to make a catalogue of prime factors of
// integers up to 2^16.

/**************************************************************************
 * Copyright (C) 2017, Codemist.                         A C Norman       *
 *                                                                        *
 * Redistribution and use in source and binary forms, with or without     *
 * modification, are permitted provided that the following conditions are *
 * met:                                                                   *
 *                                                                        *
 *     * Redistributions of source code must retain the relevant          *
 *       copyright notice, this list of conditions and the following      *
 *       disclaimer.                                                      *
 *     * Redistributions in binary form must reproduce the above          *
 *       copyright notice, this list of conditions and the following      *
 *       disclaimer in the documentation and/or other materials provided  *
 *       with the distribution.                                           *
 *                                                                        *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS      *
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE         *
 * COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   *
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   *
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS  *
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND *
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR  *
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF     *
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
 * DAMAGE.                                                                *
 *************************************************************************/

// $Id$



#include <stdio.h>
#include <stdbool.h>


int main(int argc, char *argv[])
{   FILE *f = fopen("smallfac.cpp", "w");
    if (f == NULL)
    {   printf("Unable to write to smallfac.cpp\n");
        return 1;
    }
    fprintf(f, "// smallfac.cpp, generated by factor16.cpp. See that file\n");
    fprintf(f, "// for explanation, Copyright, a BSD license statement etc.\n\n");
    fprintf(f, "\nstatic uint16_t F0000[] = {0};\n");
    for (int i=121; i<65536; i++)
    {   fprintf(f, "static uint16_t F%.4x[] = {", i);
        int ii = i;
// I need not record factors that are less than 11 because the way I use
// M-R I will have avoided trying to test any number that is under 121, and
// in particular the primes 2, 3, 5 and 7 have already been noticed.
        for (int p = 2; p<255; p++)
        {   if (ii%p == 0)
            {   if (p > 7) fprintf(f, "%d, ", p);
                while (ii%p == 0) ii = ii/p;
            }
        }
        if (ii != 1) fprintf(f, "%d, ", ii);
        fprintf(f, "0};\n");
    }
    int n = 0;
    fprintf(f, "\nstatic uint16_t *small_factors[] = \n{   ");
    for (int i=0; i<65536; i++)
    {   int w;
        if (i < 121) w = fprintf(f, "F0000");
        else w = fprintf(f, "F%.4x", i);
        n++;
        if (i != 65535)
        {   if (n == 10)
            {   fprintf(f, ",\n    ");
                n = 0;
            }
            else fprintf(f, ", ");
        }
    }
    fprintf(f, "\n};\n\n");
    fclose(f);
    return 0;
}

