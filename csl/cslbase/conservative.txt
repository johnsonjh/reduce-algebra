                     Conservative Garbage Collection
                     ===============================


This note is to help me while I design and implement one, and comments on
changes from a previous world. This is a fresh version of these notes and
is being started in April 2016. I had done some redesign in October 2017, but
the latest changes are from May 2018.

The work discussed here is to arrange that CSL uses a mostly-copying
conservative collector. The details are substantially tuned to the expected
patterns of memory usage. Although the initial implementation will be
single threaded the intent is to allow for a threaded system in the future.
Following CST project work by Jamie Davenport I now intend to try for a
design that is conservative, generational and somewhat threaded.

Well the generational version will rely on having some form on write barrier,
and I propose to implement that my temporarily marking heap pages as read-only.
I can then trap write accesses and in the trap handler record the write (in a
hash table) and reset memory permissions to read-write. On Linux this is
use of mprotect and sigaction. On some platforms or configurations this
may not be possible (for instance by reference to the Boehm conservative
collector I am concerned that this strategy may not be compatible with
a threaded version of BSD-family systems), and in such cases I will not be
able provide a generational collector. 

I will comment on the generational and threaded aspects first. Each thread
will have three dedicated pages of memory, which will be used for nursery
(a page) and school (two pages) generations. Beyond that all pages will be
shared across all threads and so allocation in them will require the use of
mutexes.
Consing is first done in the nursery page. When that becomes full the whole
world will be stopped (sorry about that) and every nursery page that is at
least 75% full will be evacuated to its corresponding school page. I do that
for all reasonably full pages to try to avoid triggering collections from
different threads in close succession. The school region will eventually
become full part way through doing the evacuation of a nursery page. When
that happens I will evacuate the older of the two school pages into the
general shared heap. The motivation there is that to be a candidate for
migration to the general heap some data must have survived all the time it
took to fill up the other school page, so maybe it is not VERY new.

A big issue for a generational collector is references from old pages into
new ones. I propose a scheme that will mark from more places that would
really be ideal, but at least not from everywhere. At the end of each garbage
collection all heap memory will be marked as read-only, but a signal handler
will catch write accesses and tag a segment of memory that is written to in a
map and reset it is read-write. Garbage collection of nursery and school pages
will treat all static roots as roots (obviously), all the stack as (ambiguous)
roots, and the contents of any part of the heap that has been written to as
containing roots. Because the only bits of memory that I handle as "updated"
live within the heap I can rely on all data within them being properly
formatted so that I can identify references in a precise manner. What I do
need to do is to be able to tell when one of those pointers refers into
a nursery or school page. However I think I can not afford to reset "dirty"
bits on pages until I do a global garbage collection - if I copied the
nuresery page for just one or just some of the threads and then reset all
the bits to make memory as updated I would lost information about updates
relevant to other threads. 

When I am given a value that might be a pointer I need to be able to
tell if it is a pointer to an item that could be alive. This issue is
rendered just a little more delicate because compiler-generated temporary
values might have had Lisp tag-bits stripped or may point into the
middle of objects, but must neverthless be treated as referring to the
object.

A good situation is that I will assume (or require!) that all global
state is precise (ie holds properly tagged Lisp items), and so the only
place where ambiguity can arise will be when I scan the stack (the one that
C++ uses) as a collection of roots. Compared to everything else and
except in the unusual case of extremely deep recursion this will represent
a fairly small number of "ambiguous roots". So let me consider first how
to check if an ambgiguous value seems to refer to a Lisp object.

I will arrange my storage allocation strategy to use fixed size pages.
I will have two sorts of page. One holds fixed size objects. At one end
it will hold CONS cells and any other items that are the same size. On
a 64-bit system this will include double precision floats, Lisp vectors
with only a single element, bignums that are only JUST bigger than a fixnum
and strings with up to 8 characters. At the other end the items will be
exactly twice that size, so there can be Lisp vectors with up to 3 elements,
strings with up to 24 characters and bignums whose values can be up to around
5*10^55 (ie 186 bits signed values). Rather simple mask operations make it
possible to identify the location of the start of any object in such a page
given a reference within it.

The other case is the general one for objects that are larger. Every item
in the page will have a header. It would be possible to identify the starts
of objects by scanning the page from its start (since object size information
in the headers would make it possible to skip over binary data). However that
seems unduly expensive. A faster scheme could maintain a binary search tree
for all the headers in the page. The space consumption of that seems
unpaletable. At present my plan is to hold a bitmap such that every object
header is identified it in. The space needed for that map is 1 bit for every
16 bytes of data (ie 128 bits because I keep every item aligned on
16 byte boundaries). Operations like "find first set bit" can be used on
most computers so that scanning backwards from an ambiguous value could
find the corresponding header in a time that involved a cost linear in the
size of the object, but with very good scaling because of the opportunity to
handle many bits as a time.

Each of the above cases means that if one can identify the page that an
ambiguous value refers to and which of the three page types is involved it
will be easy to find the start of any object that the value should be
treated as identifying.

Let each page have size PAGE_SIZE (which will be a power of 2 - at present
I am thinking of using 8 Mbytes). Then if heap space is allocated within a
modest number of chunks (with each chunk split into pages) I can do a rather
small number of comparisons to test which (if any) chunk an address lies
within, and then easily discover which page within the chunk is involved.

I now introduce the concept of "pinned" data. When an ambiguous pointer
identifies an item within a page that item becomes pinned - a state which
means it must not be moved. Each page will have a bitmap that is used to
mark pinned items. This bitmap will consume one bit for every 128 bits of
useful data, so it is not a severe worry. At various stages this bitmap will
have to be scanned or cleared, but again its size is only around 1% of the
size of the real data. I am going to allow pages to contain just a sprinkling
of pinned data - this is in contrast to policies that are perhaps more common
where when a page is the target of any ambiguous pointer the entire page
is kept "promoted" or pinned.

My main collector will be based on a straightforward copying one, so some
pages will represent the "old space" containing existing live data and
others will be "new space" to which data is evacuated. The introduction of
conservatism leads to having pinned items in both old and new spaces. Dealing
with them is a major part of this design. Perhaps the starting point is that
storage allocation within a page can be done almost as it was before, except
that special action will need to be taken when allocation reaches any pinned
object. The practicality there is that pages will need to contain chains
that identify each pinned object. In effect instead of being treated (for
future allocation purposes) as a single block the page will be treated as
a sequence of regions (each separated by pinned data).

The collector can then work as follows:
(1) ... ... ... <to be completed>
[Note that I had a working conservative collector in "vslplus.cpp",
a spin-off from vsl.c, some while ago. I need to review what I did there
and migrate an explanation to here!]


