This is a prototype and demonstration ".snapshots" file. The machine
names and addreses used here are relevant to me, but not to anybody else,
so you will need to adapt it to your own needs before using it.
The machine names shown are in general the ones reported by "uname -n".

This looks dauntingly long, but is in fact rather simple. It is a table
indicating that if you are at present on a macgine called X and you want to
build a snapshot for a playform Y how you should go about it. Its structure
is then

case `uname -n`
X1)
  hosts_Y1() {
    *OPTIONS*
  }
  hosts_Y2() {
    *OPTIONS*
  }
  ...
  ;;
X2)
  hosts_Y1() {
    ...
  ;;
*)
  <case of unknown current machine, so fail here>
  ;;
esac

The OPTIONS will be one of the following very short recipes

(1)   MODE=LOCAL
The target is the same architecture as the current machine, so just use
it in a simple direct manner.

(2)   MODE=ssh; HOST=remote.machine.name
Use ssh (which must have been set up with passwordless public key
authentication) so that the build is done on the specified remote machine,
which is liable to be one that has as its architecture the one toi be built
for.

(3)  MODE=ssh+ssh; HOST1=gateway.machine.name; HOST2=remote.machine.name
Much like just "ssh" but uses the first machine as a gatway through which
the one you will use can be reached.

(4)   MODE=virtual; VM=machine-name
Oracle VirtualBox must be installed on the current machine, and it must have
a development-ready VM called machine-name installed. This machine must
support passwordless ssh access from the current world.

(5)   MODE=ssh+virtual; HOST=remote.machine; VM=virtual.on.remote
Access a remote machine using SSH and then run virtualbox on it!

(6)   MODE=ds64
This is a "trick" scheme for use with a Raspberry Pi 4. The machine runs
32-bit Raspbian but on a 64-bit kernel, and then using systemd and nspawn
it hosts a 64-bit instance of Debian. A command on it "ds64-run" allows
one to cause command issues to be relayed to the containerized 64-bit world.
Setting the Raspberry Pi up to support this involves a certain amount of
trickery at present. Eg a couple of the commends used to launch 64-bit
processed are tagged using "chmod +s" and a script /usr/local/bin/uname
adjusts the reported machine character in 32-bit mode so that having a 64-bit
kernel does not lead to confusion!
THIS IS NO LONGER A SENSIBLE OPTION TO TRY.

(7)   MODE=ssh+ds64; HOST=remote.raspberry.pi
As one might by now expect.

The sample here is the one that I am using as of June 2020 and
shows something of the range of computers I have tried to support and the
ways in which they link together - in the process including instances of
each of the above. A minimal script that just ran on a single host and
that only supported a few targets would of course be a lot shorter.

--------------------------------------------------------------------------
# $HOME/.snapshots

# A C Norman, 2020

# This file customises the Reduce snapshot builder by indicating private
# or local machines that can be used for building snapshots. For each
# system for which a snapshot may be generated there is a function here
# called "hosts_<architecture>". This can test the identify of the machine
# it is running on (so that a user can put exactly the same .snapshots files
# on multiple computers - I expect that this will generally simplify
# maintenance). It then sets a variable MODE together with some further
# variables.

# It can use this to override the snapshot building regime for macintosh,
# windows, linux64 (ie x86_64) and rpi (ie a Raspberry Pi
# running 32-bit Raspbian) and rpi64.
# It does not need to override all of these.
# So a very simple file content would be if a Windows machine was available
# as a server, but otherwise default behaviour was wanted. In that case this
# file might contain just
#     hosts_windows() {
#       MODE=ssh
#       HOST=windows.machine.some.network
#     }
# where the HOST setting gives the network identity of the Windows server -
# which will be accessed using ssh.
#
# It is possible to set PORT here to indicate a port to be used in redirection
# when accessing a virtual machine. However doing so is not especially
# recommended because the main script takes steps to choose a port that
# it has just detected as not being in use.
#
# When remote systems are accessed using ssh it is required that public key
# authentication without the need for further manual intervention is set up so
# that commends such as
#     ssh remote.host.machine some-command
# are executed without any need to quote further passwords. This may be
# achieved using the .ssh/authorized_keys scheme and possibly using the
# ssh-agent. 
#
# More elaborate options are illustrated in what follows:

case `uname -n` in

#######################################################################
panamint)

# panamint is my home machine, running Windows 10.

  hosts_macintosh() {
    MODE=ssh
# At home when my macbook is in range of the wifi it gets the address
# 192.168.1.8
    HOST=192.168.1.8
  }

  hosts_windows() {
# panamint is a Windows computer.
# A windows host must have (64-bit versions) of cygwin installed,
# and the necessary set of cygwin build tools can be sorted out using
# scripts/cygwin-sanity-check.sh. In addition to that the inno setup
# tool must be installed.
    MODE=local
  }

  hosts_altwindows() {
# panamint is a Windows computer, but here I force use of a VM... This
# capability can be useful for testing because the VM can be a Windows
# image set up without any of the customisation I have for my main computer.
    MODE=virtual
    VM="REDUCE-pkg-factory-Windows"
  }

  hosts_linux64() {
# The virtual machine here needs a new enough g++ and the things that
# scripts/ubuntu-sanity-check.sh arranges to install.
    MODE=virtual
    VM="REDUCE-pkg-factory-Ubuntu"
  }

  hosts_rpi() {
# As before, use a remote machine. If I had DNS set up in a more
# elaborate way it would become more obvious that this host is "acn1-rpi4".
# For JUST NOW this is just a 32-bit Raspberry Pi world.
    MODE=ssh
    HOST=192.168.1.20
  }

  hosts_rpi64() {
# A Raspberry pi 4 running the 64-bit of Raspberry Pi OS
    MODE=ssh
    HOST=192.168.1.26
  }
  ;;

#######################################################################
gauguin)

# gauguin is a Linux box (Ubuntu)

  hosts_macintosh() {
# gauguin does not have a macintosh directly available, but by tunneling
# via codemist.dynu.com it can gain access to the private macintosh on the
# local network used above.
    MODE=ssh+ssh
    HOST1=codemist.dynu.com
    HOST2=192.168.1.8
  }

  hosts_windows() {
# On this machine I have virtualbox set up so that a VM called
# REDUCE-pkg-factory-windows runs Windows 10 and has the cygwin environment
# set up so that I can build on it. The VM runs an ssh server and this script
# sets up port forwarding in virtualbox so that it can be accessed.
    MODE=virtual
    VM="REDUCE-pkg-factory-Windows"
  }

  hosts_win64() {
# On this machine I have virtualbox set up so that a VM called
# REDUCE-pkg-factory-windows runs Windows 10 and has the cygwin environment
# set up so that I can build on it. The VM runs an ssh server and this script
# sets up port forwarding in virtualbox so that it can be accessed.
    MODE=virtual
    VM="REDUCE-pkg-factory-Windows"
  }

  hosts_linux64() {
# gauguin is a computer running 64-bit Linux, so you might imagine that
# I would use MODE=local here. However that would use whichever Linux release
# the system is running, and for a snapshot that has the best chance of
# working on older sytems I want to build on a somewjat old release of
# Linux. So I install that in a VM and use it here.
    MODE=virtual
    VM="REDUCE-pkg-factory-Ubuntu"
  }

  hosts_rpi() {
# Another new option - access using ssh via a gateway system. HOST1 is
# the gateway and HOST2 the system used for the build.
    MODE=ssh+ssh
    HOST1=codemist.dynu.com
    HOST2=192.168.1.20
# OR MODE=ssh
#    HOST=acn1a.trin.private.cam.ac.uk
# if I had that machine set up for Reduce building...
  }

  hosts_rpi64() {
    MODE=ssh+ssh
    HOST1=codemist.dynu.com
    HOST2=192.168.1.26
  }
  ;;

#######################################################################
math-smreduce.mat.brocku.ca)

# A remote Macintosh which is the "official" build host for Reduce snapshots.


# math-smreduce is a Macintosh, but it needs the file-space used during
# snapshot builds to be put on a separate volume rather than within the
# main Reduce tree.
  REDUCE_DISTRIBUTION="/Volumes/DATA/reduce-distribution"
  REDUCE_BUILD="/Volumes/DATA/reduce-build"
  SNAPSHOTS="/Volumes/DATA/snapshots"


  hosts_macintosh() {
    MODE=local
  }

  hosts_windows() {
    MODE=virtual
    VM="REDUCE-pkg-factory-Windows"
  }

  hosts_win64() {
    MODE=virtual
    VM="REDUCE-pkg-factory-Windows"
  }

hosts_linux64() {
    MODE=virtual
    VM="REDUCE-pkg-factory-Ubuntu"
  }

  hosts_rpi() {
# Not supported here. It seems tidy to put in a function definition that
# does nothing just to document that fact. Note that an empty function body
# is not acceptable to bash, so I put in a return statement.
    return 0
  }

  hosts_rpi64() {
    return 0
  }
  ;;

#######################################################################
# Various of the Raspberry pi systems at home!

acn1-rpi4 | rpi3-32)
  hosts_macintosh() {
    MODE=ssh
    HOST=192.168.1.8
  }

  hosts_windows() {
# From the private network I can access panamint using its private address.
    MODE=ssh
    HOST=192.168.1.10
  }

  hosts_win64() {
# From the private network I can access panamint using its private address.
    MODE=ssh
    HOST=192.168.1.10
  }

hosts_linux64() {
# As before, a virtual machine running on a remote system.
    MODE=ssh+virtual
    HOST=192.168.1.10
    VM="REDUCE-pkg-factory-Ubuntu"
  }

hosts_rpi() {
# Use the machine directly.
    MODE=local
  }

hosts_rpi64() {
    MODE=ssh
    HOST=192.168.1.26
  }
  ;;

#######################################################################
OlderMacBook | acn1macbook)

  hosts_macintosh() {
# All these hosts are macintoshes and so the build of a macintosh snapshot
# can be performed on them directly.
    MODE=local
  }

  hosts_windows() {
# From the private network I can access panamint using its private address.
    MODE=ssh
    HOST=192.168.1.10
  }

  hosts_win64() {
# From the private network I can access panamint using its private address.
    MODE=ssh
    HOST=192.168.1.10
  }

  hosts_linux64() {
# As before, a virtual machine running on a remote system.
    MODE=ssh+virtual
    HOST=192.168.1.10
    VM="REDUCE-pkg-factory-Ubuntu"
  }

  hosts_rpi() {
# As before, use a remote machine. If I had DNS set up in a more
# elaborate way it would become more obvious that this host is "rpi3-32".
    MODE=ssh
    HOST=192.168.1.20
  }

  hosts_rpi64() {
    MODE=ssh
    HOST=192.168.1.26
  }
  ;;

#######################################################################
*)
  printf "Current host (`uname -n`) not recognized here\n"
  ;;

esac


# end of .snapshots
