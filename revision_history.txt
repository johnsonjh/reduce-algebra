
n.n.n / 2021-03-01
==================

  * Update .gitattributes: Additional exclusions
  * Update .gitattributes: Additional exclusions
  * Update .gitattributes: Additional exlcusions
  * Add .gitattributes: Disable GitHub Linguist
  * Remove mistaken-pull-closer.yml, using mergeable.
  * Rename: .mergeable.yml -> mergeable.yml
  * .github/.mergeable.yml: Automatically close PR's.
  * Update mistaken-pull-closer.yml
  * Add .github/issue-close-app.yml: Redirect issues.
  * Merge branch 'svn/trunk'
  * Necessary file for building and using aarch64 version of PSL.
  * PSL Makefile: remove sparsify and explicit call to gcc.
  * Merge branch 'svn/trunk'
  * Correct chmod statement, remove ">" output redirection
  * PSLfor aarch64: steps towards a complete system
  * Update mistaken-pull-closer.yml
  * Add SECURITY.md: Link to Sourceforge ticket system
  * LICENSE: Add Reduce license.
  * Add .github/mistaken-pull-closer.yml: Disable PRs.
  * Add .gitignore autoconverted from SVN ignore data
  * PSL for aarch64: a couple of corrections. First successful compile of a function aarch64 itself!
  * Correction to PSL kernel for aarch64:  - fix relocation of heap when loading an image  - improve variable declarations  - minor cleanup
  * PSL for aarch64: updates for code generation:  - force alignment of compiled lisp code to 8 byte boundary  - correct a double use of temp register t2 (x10) in *putfield  - do not unnecessarily save all processor registers when calling a C function
  * Provide for architecture aarch64 in PSL-related scripts.
  * Manual: further minor tidying of User Contributed Packages
  * Manual formatting: User Contributed Packages R-Z
  * Create directories for aarch64
  * Correct *putfield Cmacro and explicit wortsize in sys-extras.sl
  * PSL for aarch64: fix returnaddressp, needed for verbose stack backtrace
  * This (I hope) makes VSL work. The main change is that at some stage over the last decade Reduce started to like using hash tables from the underlying Lisp. VSL had some which got detected and hence used, but in fact it only provided ones that hashed based on EQ not EQUAL, and the latter was required in for instance the function FKERN. So I have retrofitted EQUAL-keyed hash tables into vsl1.c and for me it now builds Reduce witout complaint and can do what feels like a reasonable range of calculations. Phew!!!!!
  * While fixning other things I accidentally checked in a copy of FXShowMath.cpp. In that I have taken the first steps towards support for TeX words like "\biggl(" that explicitly indicate the size of potentially big bracket-like things. I had not put in a load of commas where I had been putting in markers to indicate bracket size, so things did not compile - thanks for the alert and helpful patch...
  * The VSL version of Reduce now builds without visible errors: to get to this I needed to add a number of functions to vsl like gcdn, date!-and!-time and get!-lisp!-directory, and I also had to improve input stream selection so that characters in the process of being read before the select got properly saved and restored for when the original stream was re-selected. So VSL-Reduce now all BUILDS and it can do some calculations, but others fail - the collapses I have seen have been in factorization and GCD code and could be a symptom of its crude bignum arithmetic not being good! But what is now needed is a minimal example of a fail.
  * Web interface experiment: Use equation environment for multiline output.
  * Ha ha ha re the previous checkin where I had failed to add this file!
  * This updates the package.map for vsl. When I look at the log from building Reduce there many of the redlog modules give diagnostics. My initial WONDER is that if some of them rely on COMPILETIME and LOADTIME decorations where vsl (which of course does not have a compiler!) has not thought about such issues.
  * VSL: This now builds an attempt at Reduce, so after "make reduce" you can try "./vsl1 -i reduce.img". Right now this still misbehaves in a number of ways that I have not tracked down, but this may do enough that people can try to catalogue and hunt down the problems. I may do a bit more of that too. The work on it pointed out a place in factor/ezgcdf where a RETURN statement was not in "program context" but was hiddent within an unwind-protect, and I have fixed that.
  * Fix HTML manual
  * MathLive web-interface: Fix for some issues with cut and paste of the multiplication operator. Make df, solve, ws and lists available in the interface.
  * PSL for aarch64: deal with most of the C compiler warnings
  * PSL for aarch64: updates
  * Manual formatting: User Contributed Packages F-Q
  * PSL for aarch64 signal handling: make sure that symval and symfnc addresses are loaded into registers x24 and x23, irregardless of where the trap occurs.
  * PSL for aarch64: corrected trap handling, fixed error in garbage collector. Trying a garbage collection causes a stack overflow.
  * PSL for aarch64: corrections. Garbage collector continues to crash, but interpreter seems to work
  * More work on a MathLive based web interface. It is very crude and mainly meant as a playground to get ideas from. It can be tried on www.ca-musings.de . The rendering is done by mathlive and not by mathjax. On the left of the input field is a button for a virtual keyboard. It is populated only by a few items with no proper keycaps. It serves only as an example and not for real use. Positioning of the cursor is at the moment sometimes tricky. Comments and volunteers are, as always, very welcome. A simple example to try is: type int into the input area (above submit), click on the field for the integrand and type into it 1/ then click the denominator field and type x^4 - 1 and finally click the integration variable field and type x. Then press the submit button.
  * HTML manual
  * Fix a typo.
  * PSL for aarch64: interpreter starts, error and break handling works. But nil is an unbound id, and printing of floating point numbers doesn't work at all. Integers do work. Haven't tried bignums yet. The garbage collector crashes immediately.
  * PSL for aarch64: furhter progress in b ootstrapping the interpreter: It prints the startup banner and prompt! Any input causes an immediate crash, though.
  * Some of the issues I was seeing with mathjax was because when I set up code to fetch it I had landed on a web page about an old version, so I was trying a 2.7 not 3.1 version. I have fixed that and now serve a local copy of a much more recent version. Reduce:tmprint now puts in "\left." and "\right." at the start and end of some lines where parens are not matched (actually I think there are some cases such as a line "a))))((((" where the fact that my current code only does an overall count of "(" vs ")" will be inadequent, so I will fix that soon. I have also found how to left-justify output to see if that pleases everybody. Meanwhile at the other end of the forest I am part way through making vsl able to build Reduce again. Since I had done that before I had imrpoved the bootstrap parser that is coded in Lisp to support "eq" and "=" as infix operators and to understand both "<<...>>" ane "while". That meant that the main Reduce code body could be written in a much more natural style for a fairly small increase in the bulk of raw Lisp. The versions of file with vsl predated that (and various other incidental updates to the CSL-side build scripts) so it takes me a moment or two to fix that. This checkin does not complete the job - a later one should.
  * Manual formatting: User Contributed Packages A-E
  * PSL for aarch64: PSL kernel loads all nonkernel files and prints a lot of digits but not the greeting message :-( Looks a bit like it prints the lisp objects as integers
  * PSL for aarch64: corrections
  * PSL for aarch64: fix code generation for branches to internal functions
  * PSL for aarch64 corrections
  * PSL for aarch64: corrections
  * PSL for aarch64: corrections
  * code-number-of-arguments: protect against invalid code pointer, e.g. while compiling, by accepting only addresses for which codeaddressp returns t.
  * This should change csl.cpp so that the issues mentioned in a recent checkin regarding math-input via the web are no longer an issue and so people do not need to make a customised binary. And the web stuff via toplevel.html is tidied up yet further.
  * PSL for aarch64
  * Proof of concept for a MathView based web-interface. It shows that the input equation editor is functional. Cut and paste of 2-dimensional expressions work. Currently, only polynomials and sqrt's are supported as no other serializers are written yet. Unfortunately, to try this out a reduce web image has to be build with the following modification to csl.cpp
  * Web interface: based on a bit more reading about MathJax and Javascript this MAY now start to look interesting! It may still need hooking on to a better input arrangement and made to look a lot prettier.
  * Corrections for aarch64 compiler
  * PSL for aarch64: corrections to code generation
  * While trying to work towards building unversal binaries in the Mac I had left in some typos which causes configuring to fail. What was wose was that in what I thought was a trace print statement I had something that ended up expanded as an m4 macro into several lines with a range of quote marks, leading do errors that I foudn really weird and that took me a while to home in on. I hope this resolves things as well as having some more incremental tidying up.
  * PSL for aarch64: flush processor caches after loading or depositing compiled code, more data alignment fixes.
  * Oops! This corrects my last commit which had the wrong message file attached.
  * This commit corrects a bug in poly!-divide whereby a negative second argument to mod caused the domainmode to be left in an inconsistent state by a call to setmod from within evalmod resulting in the following behaviour:
  * PSL for aaarch64: Updates and corrections. Loads now several fasl files, but signals illegal instruction faults when the first instruction from the fasl file is to be executed. Maybe something is loaded into the instruction cache but not invalidated.
  * A playground for a Web interface using MathLive. The script launch_MathLiveTests.sh starts the interface. It is very primitive. In the aera above the submit button a Reduce command can be given, e.g. b-a; . After pressing the submit button Reduce's answer, which should be -a + b, will be displayed in the area below. For more complicated expressions an outputhandler and a latex parser on the Reduce site is needed, unless we decide that the conversion better lives in the interface code.
  * PSL for aarch64: corrections
  * Work towards the web interface. If you get to new-embedded/for-emscripten and run launch.sh that loads toplevel.html into a browser. Maybe! The initial bits of output from Reduce are then rendered in maths mode - you see them centred and in italic. If you hit "reload" on the browser then what I see is that each time the amount that is displayed in maths mode changes - occasionally it gets as far as displaying the integral nicely but mostly not. This is very clearly a race-condition issue and I imagine that anybody even slighly better clued up about javascript would be able to identify just what was needed! So if any such person reads this could they perhaps help out! What there is at present shows that quite a lot can be made to work!
  * Manual formatting
  * Upgrade for-emscripten/toplevel.html with comments and more illustrations of technology that we MIGHT linke through to.
  * macports-setup is adjusted to provide an option to try to install things in univeral mode (ie x86_65+arm64). This will work in due course but awaits som emore macports work. And configure.ac will attempt a Mac universal build if --enable-universal is specified.
  * PSL for aarch64: updates and corrections
  * Manual: re-implement syntax environment etc.
  * PSL compiler for aarch64: trying to get data items aligned to 8 bytes
  * This commit corrects a bug in poly!-divide whereby a negative second argument to mod caused the domainmode to be left in an inconsistent state by a call to setmod from within evalmod resulting in the following behaviour:
  * Emscripten: in this world std::fflush does not seem to manage to get output shipped across to the web interface, but printing an extra "\n" does, and this makes the interaction shown in the output window look much more natural.
  * Emscripten: this arranges to load mathjax in the toplevel.html file using runes from the mathjax web-site. And it switches Reduce to generated TeX-like output in its output window - which is distinct from the one MathJax is making use of. In the state it is in the output comes out in what feels like a really messed up ordering with the echo of the input typically after the TeX output and some promt material mixed in. But this is to help anybody who wants to plumb Reduce into driving MathJax get started so that they just have to fuss (well mostly) with the Javascript bits.
  * PSL compiler for aarch64: align quadword boundaries properly, add nop instruction for alignment.
  * CSL: improve compatibility with older C++ compilers.
  * PSL compiler for aarch64: corrections
  * Correction to PSL compiler for aarch64
  * A file I had failed to include in the previous checkin.
  * YAY! The web-interface now puts some of its output in a separate panel as part of the main interface, not just in the Javescript console log. It is very ugly at present, but perhaps this is the stage to see first if this behaves for others and then if there is somebody with more Javascript and web skills than me (that would not be hard!) would would like to do some work to make this pretty and useful... To get started fetch from subversion and navigate to the directory csl/new-embedded/for-emscripten. Ensure you have emscripten installed and working then a ROUGH approximation is "make reduce-web" followed by "./launch.sh". It should be viewed as a "technology preview" or a "pre-alpha quality" experience at the moment, but it MAY be in a state where the next major steps are mostly on the web and javascript side and developments in them will lead to a better understanding of what the interface and the Reduce code needs to do to make it nicer. If you report and want to join in please try to ensure that your username at sourceforge has been set up such that YourUserName@users.sourceforge/net gets forwarded to your active email address so that personal replies to you are possible.
  * PSL for aarch64: loading the first fasl file: not quite there
  * Mainly upgrades (I hope!) to the Makefile for use with emscripten and to the launch.sh script there. Well make-image.cpp has been enhanced to put what I hope are useful comments by the first few lines of the binary data it packs, and since the new reduce.web.js uses a built-in image js/init.js gets simplified a bit.
  * This fixes come preprocessor tests that were objected to be older versions of g++ - I hope things are now a bit safer. It also adjusts some uses of printf() where the emscripten build moaned about the format string not matching the value to be printed when the former was PRIxPTR and the latter was a pointer type!
  * new-embedded/for-emscripten. Make reduce-web use an embedded image so it does not need to access a file-system to grab that stuff. I could have a mixed model where the intial image was embedded and all optional modules needed fetching later if I was keen to set that up! Provide a script launch.sh to [try to] launch the web version - this just does what the README file suggests.
  * The main "for-emscripten" build in new-embedded now avoids use of catch & throw and hence the js/wasm runs faster. Small changes so that scripts work on machines where /bin/sh is dash not bash (and so "source" is not a valid command) and to remove some whitespace that hurt a build in the odd Windows setup that I work with.
  * turtle.tex
  * CSL: This should complete the transition away from having operators called push() and pop() in favout of Save and restore. It also adds a load more instances of errexit() to help the no-throw version. After a week or so in some state of turmoil the CSL sources will (I hope) show signs of stability for a bit (apart from any issues that I find with this change where I need to pile in and put in corrections!).
  * PSL for aarch64: first fasl file generated by cross compiler
  * PSL for aarch64
  * Nonkernel files specific to aarch64 architecture
  * PSL compiler for aarch64: instruction codes for floating point arithmetic.
  * PSL compiler for aarch64: finish addressing modes for floating point load and store instructions, add conversion instructions between signed integer and floating point.
  * Assist section of HTML manual
  * Fix to the scheme that causes Mac builds to use clang explicitly.
  * HTML manual navigation
  * PSL compiler for aarch64: first fp load opcodes
  * PSL for aarch64: more opcodes for LAP
  * I now try to ensure that on a Macintosh the C compiler used defaults to clang. This will be especially helpful if you have installed a version of clang using macports because otherwise you SAY "gcc" but that usually managed to redirect to the system-provided clang (unless you have explictly installed a genuine gcc - and when we last tried that it was not a great success). I think I have also completed updating setup tables in CSL to the newer and more compact form (for non-veriadic functions). There are still a bunch of uses of push/pop for me to work through!
  * PSL for aarch64: more opcodes, corrections
  * This is a second attempt to correct traced function calls that have to go via APPLY. It also cleans up the cod ein cslread.cpp, adjusts the compilation from Reduce into C++ to get rid of some warning messages when the C++ gets compiled and fixes an issue in scripts/testall.sh, while also arranging the the --without-throw version of CSL compiles again!
  * Minor manual updates
  * Correcxt a typo.
  * I hope this fixes a fairly recently introduced but that resulted in attemnpts to trace functions in the CSL version tending to fail. It also continues my activity replacing push/pop with save/restore, and it starts to use a much nicer looking way of presenting almost all of the entries in the tables that link names at the Lisp level to functions coded in C++.
  * PSL for aarch64: corrections
  * aPSL for aarch64: corrections and additions
  * PSL for aarch64: corrections
  * PSL comüpiler for aarch64: Vrious variants of LDR and STR instruction(s)
  * Debian installer update
  * The important (ha ha) change here in in scripts/testall.sh. It has new options. The first are --installed-csl and --installed-psl which run the tests using whetever "redcsl" and "redpsl" command it finds on your PATH. So if you have installed binaries from a snapshot it may well pick those up, but if you have taken other steps to make some particular versions your baseline accessinble especially easily then that is what you wil get. The second is --just-time which after you have run testall.sh can repeat just the reporting stage that notes where there are ".diff" files and adds up time reports for the indicated platforms and shows totals.
  * CSL: this is another round of replacing use of notionally paired push/pop with use of the class Save that has a destructor that restores the stack, and a member function restore for putting variable values back. There are some places in the code where I feel that this is really cleaning it up and in general it makes if slightly safer wrt the Lisp stack staying in lockstep with where it should be. I have stuck on more "errexit()" for support of the throw-free variant. I also fixed some typos in scripts/test1.sh. So there is a bit more of this to come but I think that it is now getting close to mere "finishing off".
  * Updates to PSL compiler for aarch64: fluid binding, *jumpon cmacro (case statement) and peephole optimization
  * Updated authorship, messages, CHANGELOG and README from cde_weaklynl.red
  * Update snapshot build details for the HTML REDUCE manual
  * PSL for aarch64: cleanup of lisp forms for addressing modes
  * Correct Bus error caused by stack misalignment at program exit
  * PSL for aarch64: Success! The kernel reaches the point where it wants to load its first fasl file - which doesn't exist yet. Afterwards the stack pointer is somehow unaligned, causing a bus error. This should be easy to fix.
  * Progress on PSL for aarch64: initialization of heap memory seems to work which implies that calling from C to Lisp and Lisp to C are working as well.
  * HTML version of REDUCE manual
  * Web site
  * Testing CSL using clang and a "sanitization" option to detect cases of C++ undefined behaviour uncovered and overflowing left shift in restart.cpp and an access to element -1 of an array representing a bignum. Those are now addressed. Also in arith03.cpp I have moved more case to use my newer and cleaner Save class rather then the previous push() function. When built with sanitization and debugging options using clang a few of the tests (osfs, sparse and sstools) fail to complete, with sparse reporting a stack overflow. I hope that is down to resource issues and the extra work done in sanitizing!
  * An update that failed to get committed...
  * Tidy up some junk characters that had crept in!
  * This is intended to claw back from a 20% drop in performance for CSL that I introduced a week or so back while trying to leave the code in a cleaner state. It seems to achieve that on Windows... This involves the protocol I use for a class called Save (and one called RealSave) that stashes values on the Lisp stack and then has a destructor that puts the stack pointer back where it should be. I have a bunch more places where I can now replace the idiom              push(x); ... stack[0] ... pop(x); with    { RealSave save(x); LispObject &x1 = save.val(1);               ... x1 ... save.restore(x); } which you can see may be bulkier!
  * The two recent issues with the defint package are now resolved.
  * Fix what was basically a typo that caused traditional macintosh systems to try to compile CSL in arm64 mode.
  * PSL for aarch64
  * PSL for aarch64: progress building the kernel
  * PSL for aarch64 This is the first time that the GNU assembler accepts the generated assembler code for the PSL kernel!
  * PSL for aarch64
  * PSL for aarch64
  * This version (with a following wind and good luck) builds CSL on an Apple m1 (ie arm64-based) machine. Arranging this has let to including a special version of libffi. At present this only builds native arm64 versions but at some time in the future I hope to coax it into building "universal" binaries that will run on either arm64 or x86_64 versions of the Mac. Also defint and fps logs are updates because the test files now use Shi and Si with capital letters - the new logs are there so that when one runs testall.sh there are ne complaints. And scripts/testall.sh now reports aggregate PSL times in the manner that it now does for CSL, so eg files with names like psl-times/sstools.showtime and psl-times/showtimes get set up.
  * PSL for aarch64: assembler generation
  * Correct rule in defint package for incomplete gamma function
  * PSL for aarch64
  * sfother.red: correct a typo in the last subversion. The number!-of!-args property of StruveL was set to 1 rather than 2.
  * Updated one example of calculation of Schouten bracket for a Hamiltonian operator for the mKdV equation
  * PSL compiler for aarch64
  * Time-stamp of the README.txt file updated
  * Fixed a bug in cde_weaklynl.red and added example programs for this library in the folder examples_wnlop.
  * oper.tex: Correct a typo. specfn.tex:  Minor corrections and updates to the Quick Reference tables.
  * PSL for aarch64
  * This makes a stab at adjusting the wat that scripts/test1.ah and testall.sh record and process the times taken by test scripts. It makes test1.sh arrange that at the end of a test a record like (eg) '("alg" ccc ggg)' is written (where ccc is the CPU time used and ggg the GC time). This gets put in Xsl-times/alg.showtime ans is also appended to Xsl-times/showtimes. A consequence is that at the end of testall a file Xsl-times/showtimes contains a reasonably neat tabulation of the time taken by each test. Then rather than used shell scripting and "dc", I read that data into Reduce where I can add up the numbers and report them - and at least on Windows this is way faster than using bash and dc. At present I have removed the version A vs version B timing comprisons shown by test1.sh. I may want to put them back! However especially for shorter tests the speed ratios on individual test case are a bit unreliable and perhaps not amazingly helpful? There are probably more oddities about all of this so I HOPE it will seem a good step.
  * PSL for aarch64 compiler
  * Fixing more silly errors!
  * Fix a type on cslbase/Makefile.am. Adjust a few things so that the emscripen builds that henerate stuff to run using "node" build and appear to work... both the regular and the "no-throw" versions.
  * Get "parbuild.sh" working on the Mac and ensure that the latest changes elsewhere still lead to clean compilation there.
  * CSL: At least on Linux it looks as if now all the steps of building and testing Reduce run without memory leakage as checked by the g++ -fsanitize option that I now enable for debug builds. Having that option enabled means that runing testall.sh is somewhat slow!
  * CSL: on Linux the address sanitisation does not find any memory leaks wjken I build csl.img, but still finds 5 when I build bootstrapreduce.img, so those give me something to chase in 2021!
  * CSL: This continues a tidy-up and checking job following the introduction of the --without-throw configure option. But it also has moved to a view that any sort of recovery after a SIGSEGV or other low-level signal is not liable to be reliable. The C++ rules about async-signal safe functions put really onerous constraints on what you are "allowed" to do when you receive a signal, and things like SIGSEGV should *NEVER* arise except when CSL has bugs (ha ha ha). So now I make the signal handler just try resetting the console from "raw" to "cooked mode" and stopping. Doing that lets me get rid of all uses of setjmp/longjmp in exception-recover contexts, and I THINK that the setjmps I had put in reasonably recently as I re-worked catch and throw handling were having a bad impact on timings. So I HOPE that this checkin repairs things on that front. I have added "parbuild.sh" in the top level directory as a convenience script for trying to recompile (csl) all the CSL variants that have been configured with parallel activity limited to the number of CPU cores that your machine has. I now need to test this version on Linux, Mac and Wasm!
  * packages/tmprint update
  * PSL for aarch64: LDR/STR variants
  * CSL: as part of the continuing purge of C style in favour of C++ I hope I have now changed use of MALLOC/FREE into use of NEW/DELETE. *almost* everywhere anyway. This was prompted by a tool that detected a place where I had used MALLOC/DELETE or NEW/FREE in ain invalid manner! I hope I have put in more care over memory leaks, but they are not all gone yet. While working through the code in this manner I made a bunch of other tidying up changes! I have also made changes in rlisp/superv.red that mean (I hope) that the sstools.tst script reports a time more neatly than it used to. I do not fully understand how or why it ended up resetting the base against which time was measured so often, but I believe I have cleaned that up. Having checked this in I can continue testing it on platforms other than Windows!
  * PSL for aarch64: updates
  * This update to scripts/testall.sh and test1.sh alter the way to get testing of CSL varients other than the default one. They provide target options not just --csl but --csl-debug, --csl-nothrow, --csl-arithlib-debug and so on, basically all the suffixes that can appear in the cslbuild directory. So one can now for instance go   scripts/testall.sh --csl --csl-nothrow --psl --cslboot-debug to test all four versions - I might do that so that I could check correctness of the -nothrow results and observe the performance penalty that the cslboot-debug version suffers from. The total cululative time for all tests is stored in a "total.time" file in csl-times (etc).
  * HTML version of the manual
  * clang++ on the Mac was fussier than g++ on Cygwin re overloadin the function ASL.
  * CSL: Many changes as I consolidate the "no-throw" version into the main branch. I will delete the branch directory where I had been doing initial work on it soon and that should not be used now.
  * Manual: change index from twocolumn to onecolumn, to better print long entries.
  * Move new bibliography entries from bibl.bib to manual.bib where they belong.
  * Correct multiply defined label.
  * Add documentation of EDS package to manual, update bibliography accordingly.
  * Manual tidying
  * PSL for aarch64: LDR/STR instruction variants
  * Manual revision
  * htdocs/tutorials.php
  * packages/lessons/less3.red
  * fixing buffer overflow in PROC_insert_buffer, move code to proc.h, and other minor renaming
  * tmprint.red: Additions to support fancy printing of a number of special functions previously omitted:
  * PSL: updates for aarch64
  * Manual -- a general tidy up and correction of typos, duplicate index entries etc.
  * CSL: Fix a bad call to strcmp if programDir is some very short string such as "/".
  * CSL: A bit more work on the "without-throw" variant, which in the process of moving it forward manages to leave it overnight in a state where it can no longer build bootstrapreduce.img! I will look into that tomorrow. But the code notionally now deals with unwind-protect and resource-limit and makes a stab at generating u01.cpp - u60.cpp (or it might when I can build it!) to cover the exception handling that it needs.
  * CSL: this has some configuration files providing an option --without-throw to activate the new catch/throw avoiding variant on CSL (which I remind everybody is an experiment and known not to be stable at this stage, and known not to be able to make proper u01.cpp etc). Also I have now noticed that the utility scripts/commit.sh does not deal gracefully with file-names that have embedded whitespace, so some time I will want to fix that up!
  * An experimental variant on CSL that avoids use of C++ catch and throw as much as it can. This starts to work but is fragile at present - specifically it error arise when running Lisp (ie Reduce) code the system is liable to crash rather than behave nicely.
  * adding instructions to README, testing toplevel.html
  * PSL for aarch64
  * debianbuild: set correct permissions for scripts in packages directory, suppress generation of .ddeb dbgsym packages in the Makefile
  * Correct the correction submitted earlier today!
  * Correct two typos in hypertargets for Fresnel integrals.
  * PSL: more aarch64 opcodes.
  * PSL for aarch64
  * minimum working example of main loop and pausing/resume for web reduce
  * PSL compiler for aarch64
  * Make driver.cpp generate its output in TeX-style format! That is maybe more likely to be useful to anybody trying to use it?
  * Rather small changes to the "procedural" scheme with adjusted code in rlisp/superv.red so that individual whole Reduce statements can be submitted one ata  time as strings for processing. The code in cslbase/driver.cpp now contains a small section that illustrates this.
  * csl/fox/src/FXShowMath.cpp:   Correct spelling of bigcup
  * More work on PSL for aarch64
  * CSL: change the exception that I throw from my_exit() and think harder about the issues that using that approach lead to. When things have not utterly failed the code should now only thow sub-classes of LispException. There are other cases but they are associated with internal failure so if they have ugly consequences I am less worried since thet ought never to arise! Small step on the path towards Mac universal binaries. Until I have access to hardware that can now go quiet. Small enhancement to ./autogen.sh --fast.
  * PSL for aarch64
  * Make the  Jacobi elliptic functions, elliptic integrals and theta functions autoloading, by additions to packages:     .../support/entry.red    .../specfn/specfn.red   .../specfn/specbess.red
  * (1) Some rework in autogen.sh so that it is less verbose - and to provide an option "--fast" (which must be its first option) that uses (eg) "autoreconf" rather than "autoreconf -f", and that autoreconfs in each directory in parallel rather than sequentially. I can not at this stage be certain about the reliability of that mode, so it is not the default, and an autoconf.sh run without the --fast flag would always put things back in a safe state. Also try to put in a dependency in the CSL Makefile so that if parts of FOX where the source code is shared with CSL change that FOX gets re-build automatically. scripts/make.sh has been downgraded so that recompilation is always sequential even on multi-core platforms. This may slow building down but it makes log files a lot easier to read and avoids some risk of glitching! I may revisit this in the future if I can do so in ways I feel are fully safe.
  * PSL: Working on aarch64
  * Some more work on aarch64
  * Fix setting of macos deployment-target.
  * A patch to cslbase/fwin.cpp where g++ compiled it by clang++ (at the very least the emscripten variant) objected.
  * PSL: First go at the PSL compiler for Aarch64
  * I now really want C++17 to be available for building CSL. With that I can, for instance, do filesystem operations using standrad library calls rather than my own platfrom specific code. I have adjusted the code in that area and a few other places so as to avoid throwing exceptions of type std:xxx from library calls (and then being ready to catch them) in favour of using versions of calls that return an error code that I can check. That may be good if I compile via emscripten into webassembly, although at present there are a few dozen (not more!) uses of catch & throw on my own LispException style things.
  * Improved simplification for logb.
  * Correction to float function for bignums, continued. Plus a few minor corrections.
  * Update forgotten redlog test log files.
  * Excalc: this extends vardf such that the Lagrangian can also contain Hodege-terms of exterior degree 0.
  * Correct conversion of bignum to float in IEEE mode: if the bignum is too large return +/-inf instead of error
  * integrating reduce web version into build process
  * PSL for macintel64: correct error in printing non finite floats
  * Options for emscripten compilation that lead to rather better performance. Not yet perfect, but much better than before!
  * (1) Make CSL turn 1.0/0.0 into an IEEE infinity by default rather than generate an error. (2) Some tidying up that removes a number of potentially dodgy casts of function pointers and which make the code a little closer to standrads- conforming and a bit more in the spirity of C++ rather than C (3) Draft changes of compilation flags for emscripten that at present lead to failure but which are steps towards finding a set to emphasis performance rather than debugability.
  * PSL Reduce: Define trap!-floating!-overflow, for CSL compatibility. Make IEEE behaviour the default for floating point operations.
  * CSL: the CSL division code had not caught up and it alwaya raised Lisp error on division by zero even with trap!-floating!-overflow nil. Now it should hand back infinity or NaN in a more proper IEEE manner. Note that trying to convert an infinity or a NaN to an integer is still an error condition: there is no obvious alternative.
  * Rely on Lisp float operations delivering -inf, inf, NaN instead of throwing exceptions.
  * (1) Update scripts/run.red to simplify it and remove a confusion I had in there over "--nogui". This change withdraw support for launcging from a 32-bit cygwin shell. (2) A type in support/csl.red (3) Introduce a function "shift" in arith/arith.red that is much like lshift but that deals with the case where both arguments are negative in a portable way (4) some "cygwin-hacks" scripts related to emscripten that are how I launch the Windows version of emscripten from my Cygwin world. The paths etc in those are liable to need adjustment before they can be used by others.
  * Back out latest change to limits package, causes one of the test cases to not terminate - needs investigation.
  * Set svn:ignore property for a number of directories
  * PSL: Move call to read!-init!-file into  begin. Cleanup of startup code: define a function reduce!-init!-forms ffor all startup tasks.
  * This makes the CSL date() function deliver a 4-digit year not a 2-digit one, so that its behaviour matches PSL and initial Reduce banners are close in step. The changes in new*.cpp are just tinkering towards the new GC and are still incomplete.
  * PSL: Define no!_init!_file variable and set it to t if --no-rcfile command line argument is present. First step to get PSL and CSL Reduce to behave in the same way.
  * Update svn:ignore property for toplevel dir
  * Common Lisp Port: incomplete support for ABCL (Armed Bear Common Lisp). ABCL is written in Java and might be used to run Reduce on Android devices. Status: The bootstrap process runs, but cannot generate an image file. This needs further work.
  * Common Lisp port for Reduce: Function %prin-float-to-string caused a floating point overflow when printing very small numbers (exponent < -300) Corrected by scaling in two steps
  * Minor corrections: variable tempovar appears twice in local variable list of function cde_superfun_odd Correct comparison in limits
  * Reduce plugin for TeXMacs:
  * Set svn:ignore property on scripts subdir.
  * Set svn:ignore property for generated files on psl subdir
  * Test suite: add --skip-missing-rlg option to skip test files without a corresponding log file.
  * tmprint.red: Fix definition of texmacsp which currently always returns nil 	     as texmacs no longer sets the environment variable 	     TEXMACS_REDUCE_PATH.
  * Experimental code for UTF8 printing in PL
  * Update polynomial division in the manual
  * Minor update to polydiv.rlg file
  * List arguments to polydiv operators
  * Overload mod to apply to both polynomials and integers
  * Change name from hexify.cpp to make-image.cpp and put in a "const"
  * Log file update.
  * For new-embedded/for-emscripten. I think I can only characterise these changes as ugly hacks, and they are not really related to Reduce as such but more to the emsk and emscripten tools. They help me build under Windows and Linux where issues that I do not full understand were intervening, and so I have invented work-arounds.
  * limits package: 1. add rudimentary tracing: switch trlimit 2. different handling of complex infinity (still called infinity) 3. add an additional l'Hopital step when limit00 fails - very crude for the moment 2. different handling of complex infinity (still called infinity) 3. add an additional l'Hopital step when limit00 fails - very crude for the moment
  * Typo in cslbase/regressions.list generated by a type in make-regressions-list.sh
  * PSL build: make psl-names.bash run from any working dir.
  * PSL compiler: when writing a fasl file the function Lap returned  (Mkcode nil) instead of nil whch is nonsense Discovered a while ago by ACN.
  * PSL: Correction to x86/x86_64 lisp disassembler:  signed one byte offsets were printed as unsigned
  * PSL kernel: correcting a minor C error
  * Compile printer update (see r5467) for 32bit Windows.
  * PSL: Minor improvement when printing a code pointer: show number of function arguments.
  * More updates to system_list!* / lispsystem!*
  * Undo r5460, as it is not clear how the mod operator should be defined
  * PSL: Add symbol sixty!-four to variable lispsystem!* on 64bit MacOS Darwin.
  * Remove old regression test file.
  * PSL: Add symbol sixty!-four to variable lispsystem!* on 64bit Linux and Windows (others to follow).
  * Core package poly: load module polydiv AFTER modular, otherwise the latter overwrites the psopfn definition for mod.
  * Get rid of the revision_history.txt file because it is not needed = svn info -q gives you all you need - and it clutters the place up.
  * Make sure that the trigd package can be loaded in rounded mode, by carefully setting and resetting the domain mode.
  * Optimizations and error corrections for special functions.
  * When there is a Reduce init file, display() shows some input from this file together with the very first input line. Reset crbuf!* at the end of read!-init!-file.
  * Fix in new-embedded/for-emscripten so that crlibm gets build and used, thereby bringing more of the test files into agreement.
  * Add a couple of integrals for special functions Si, Shi,Chi and Fresnel integrals to integrator tables.
  * Move definitions and rules for Ei,Li,Si,etc. into alg/spcfnint.red
  * Update the list of regression files in csl/cslbase. That means that the emscripten build now tests the 2020 safe-fp test - and that seems to run OK. Provide a script make-regressions-list.sh that can be run in cslbase to refresh the list.
  * There had been a glitch in CSL whereby (expt 2.0 -1030) failed as if with an overflow. Also I use C++ standrad facilities to detect NaNs, infinities etc in CSL rather than my own hacked-up code. Then I have re-worked safe!-fp!-plus etc in arith/rounded.red because the previous version had errors in it. The 2011 test case in regressions associated with same has been removed and a new 2020 regression test that can compare the PSL and CSL behaviour introduced.
  * PSL Reduce: add symbol texmacs to list lispsystem!* if --texmacs command line argument is present - same behaviour as CSL Reduce.
  * Minor corrections and tidying up of the indexing in the elliptic function section of specfn.tex.
  * Document new reimpart operator.
  * Protect more complicated rules for cos and cosh against interfering with simple rules for cos(0) and cosh(0) by adding "not(x=0)" as extra condition.
  * Make a diagnostin in avector just a bit more informative. Look at 2011*safe!-fp*.tst where the treatment we have of "safe" FP operations has changed enough that the old test case was out of date and so not that helpful. The new one now shows some failure messages, but I believe they are maybe now ones it could make sense to investigate! I will do that in a while.
  * Trying to use de as an operator caused a car/cddr of nil. Modify the formfn for de to do different things in symbolic and algebraic mode.
  * Improvements to the behaviour of REPART and IMPART in the presence of rules of the form:    let conj(z) => w; Addition of a utility procedure REIMPART which returns a two-element list of the real and imaginary parts of its argument. This is more efficient than calling  REPART and IMPART separately particularly if its argument is complicated.
  * Correct stupid copy-and-paste error in trap handler for 64 bit Windows
  * Update of rlg files.
  * Small changes to alg/elem.red: 1. Avoid warnings when bulding Reduce image. 2. Capitalize Si and Ci for consistency.
  * Attempt to improve numerical evaluation of integral exponential Ei, integral cosine Ci, and Chi. Correct values of Ei fir negative real argument, add checks for undefined cases, like Ei(0), Ci(0), and Chi(x) for nonpositive argument. Add test cases; the vslues should be checked independently.
  * CSL Ha Ha Ha. A long-standing type that hits when the code is built with crlibm (for consistent floating point elementary functions) not used - ie only with the embedded system. This led to grossly and absurdly wrong answers in floating point evaluation of a**b with a and b both floating point. It was evaluated as a**a!!!!!!
  * A file (regressions.list) was omitted from the previous checkin by accident
  * This is a small development of the "new-embedded" variant - this uses the main Reduce sources but instead of using autoconf and supporting input line editing and/or a GUI it has a cut-down terminal mode of use and is built using a rather spartan Makefile and a manually maintained "config.h". It it thus can require hacking to move to different platforms! The version here can build a bootstrapreduce, can use that to re-make the C++ files u01.cpp to u60.cpp and can then build an almost fully functional Reduce... and do all that using the "em++" compiler that is part of emscripten and which turns the CSL C++ sources into a mix of Javascript and webassembly. Have fun experimenting! And if you get anywhere consider contributing your work back to the project. I note that porting to use em++ led to the detection of several curiosities (ie bugs!) in CSL that cause trouble there but not when using g++ or clang++ directly, so getting this working has helped to improve code cleanliness.
  * Update regression test and log file supress irrelevant lines at end of run.
  * Forgotten update of regresstion test log.
  * CSL: more elaborate tests as to when std::filesystem can be used.
  * Thanks to Francis Wright for two very useful hints used in this revision.
  * CSL: I think this completes bringing date-stamps on the CSL source files up to date (ie to read as 2020). The last time I did a sweep to ensure that all were current seems to have been in 2017. This is hardly vital work, but I count it as "tidy".
  * CSL: C++17 provides a header <filesystem> and a class std::filesystem that include built in portable schemes for traversing file directories and the like. So now if that seems to be available I can use it rather than the rather larger bulk of platform-specific code I had before (in fwin.cpp). But until I am confident that everybody has access to C++17 I have to leave the existing version there too! I have also put in some fixes prompted by using the emscripten compiler em++ (which maps from C++ into javascript and webassembly stuff, and which seems to be rather well behaved). And as a sort of routine act I am updating the date in various copyright statements - something that does not change the code but feels sort of proper. The std::filesystem stuff is intended to be set up so that it detects if it can be used, but I have distinct expectations that in some cases it will not quite work effortlessly! When I have checked this in I will want to do trial builds on further platforms to test. I have done some testing on Windows, Ubuntu_x86_64 and a Mac, but even on those there could be residual glitches if I do not get this checkin correct! So here goes.
  * Catastrophic error in num_int when factor is on:
  * Update redlog test files after redlog update (extra banner)
  * sfellip.red:  Improvements to printing and fancy-printing of elliptic functions
  * Two things here - one the promting one and the second work done in consequence. IN cslbase/fwin.cpp I have code that lists all the files ina  directory. It is swamped in "#ifdef" and the like abnd basically a bit horrid. I ovserve that C++17 has a std::filesystem library that provides a standards conforming portable way to achieve the same. Well for another few years I do not feel I can demand C++17, so I will keep the existing code but with a simple top-level #ifdef such that if C++17 is being used a nicer shorter cleaner veison gets used. Eventually the old stuff can be discarded (when everybody is using C++17!). I have not yet implemented all the nice new version - just put in a framwork where it can sit. But that will change soon, When looking at where the filesystem-specific functions were used I observe that some ages ago I imagined that I might get a form of native compilation for CSL by generating C++ code from List at run-time, then launching the C++ compiler as a sub-task, generating a synamically loadable library and then storing that in my image file. To load it I would need to unpack from the image to a temporary file and do everything that loading a dynamic library involves. Well I had got that (mostly) working, but it was slow, clumsy and a bit delicate and my expectation is that nobody other than me has tried it! So I have removed the code that supports that. As well as cleaning up the CSL source code it simplifies the build procedure, because the way I had for supporting it involved having two (yes 2) little standalone programs called objtype and makeheaders, aned the build process involved using them to create a file "machineid.cpp" that was compile din as part of the system. Tnose are all now gone! So soon I will adjust fwin.cpp to use std::fikesystem. For now wxfwin.cpp will just use the old version...
  * Minimal correction for prod operator in sum package (bug #127) Add regression test files for bugs 127 and 128.
  * Streamline some tmprint code
  * Correct display of Ai' and Bi' in CSL REDUCE
  * Sync revision number for snapshot.
  * print_indexed and control of typeset maths
  * More fixed re [[noreturn]]. Sorry about last time.
  * I have a bunch of functions within csl that are tagged with the [[noreturn]] marker because they never return (!). I hade declared and defined most of them as "[[noreturn]] void ..." but then used them in contexts that expected "LispObject ...". Of course since they never returned the fact that they did not return a LispObject could not be a problem. However "em++" led to more dynamic and complete checking of function signatures and reported this usage as a disaster.So I have put everything in a state that it possibly should have been from the start.
  * Fix hexify.cpp so that it could cope with (hypothetical!) big-endian machines wither when using gcc/clang that define macros that say what byte order is in use or if the user predefines those manually. This code is no good on the various historical machines that are not pure big or little endian!
  * More thoughts about the evacuation aspect of garbage collection, and in particular the prospect of using several threads to conduct it. This is NOT workable code but is the next stage of a sketch and a bunch more commentary.
  * Support the dfprint switch in tmprint
  * Support for more standard functions in tmprint
  * em++, a C++ processor turning stuff into javascript etc, was seeming to crash on part of the argument decoding table in csl.cpp. I have re-worked the code in a small way that (I hope) avoids that.
  * Further fixes to the new-embedded/one-file stuff.
  * configure --without-ffi should now remove the foreign function interface and by so doing remove dependence on libffi.
  * This revives an option that was alread (more or less) in new-embadded. First go into reduce-image and run "make", which creates the reduce.img file. Then go into one-file and run make. That should turn reduce.img into a ridiculous file image.cpp that is just static date. That is linked into the main executable and serves as a read-only image file for it, so that the resulting Reduce executable is the only file you need. There is a file hexify.cpp that will be a nicer replacement for make-image.cpp and will create the data as an array of 64-bit hex literals rather than as a long string. I may merge the use of that in at some stage. This is a capability I had used before, but some ages ago so to get it going again I had to put in a few updates, ed a reinterpret_cast in image.cpp and the word "extern" in externs.h....
  * Code to convert a Reduce image file into an absurdly large static array.
  * Try to make "sqrt();" lead to a complaint of the form ***** Wrong number of arguments to sqrt rather than an attempt to take car or cdr of nil.
  * iGuard some testing code with #ifdef CONSERVATIVE
  * CSL: work on a "mostly-lock-free queue" for use within the gc now in the file gcq2.cpp.
  * Reform sq's in tmprint and fmprint so that an order command has an effect, e.g. order x,t; f(x-t) is printing now as expected.
  * A few more steps on the new CSL garbage collector (in the strictly sequential state). This has not got the tidy up code that relabels the space that is copied into as the new definitive version and abandons old pages, but it gets as far as attempting the copying. Well that crashes promptly and thoroughly, but that is at least something for me to try to fix. By checking this in now I keep a safe copy to fall back on, record something of the state of progress and make it much easier for me to move copies of the most recent version from machine to machine to get it to where I can best debug. And it may be that one or other of the targets will cause the aborts to show up in a way that make sit easier for me to spot what is happening!
  * Missing commits ...
  * Put new-style revision and copyright information for several domains to avoid (non-critical) warnings with rlabout().
  * Improved printing in the CSL Reduce GUI for redlog, ofsf, pasf.
  * Many changes around interfacing and generation of documentation. The internal help system is working now, and the new website with the corresponding information via json is online. There is still a lot to be consolidated and improved.
  * We start collecting development documentation here. Nothing substatial yet.
  * Really just a few more comments in newcslgc.cpp checked in for security while I continue to plan how to make it actually happen.
  * CSL: In the conservative experiment I (hope) I now have some code that scans the stack and notes when items on it seem to point into the active parts of the heap. I am rather certain that this is not working properly yet, but as I debug it it shoould allow me to get some idea about the number of "pinned" sections of memory I am liable to end up with. As I work on this I find and deal with bugs from earlier in my work on the code - or at the minimum things I had not got round to sorting out.
  * CSL: Mainly this has a rewrite of a block of comments in newcslgc.cpp to explain my current thoughts on what I am doing there. While writing that I decided that rather than filling any waste space at the end of a Chunk with a padder object I should have a field in the Chubk header to record where useful information ends, so I have had a go at retrofitting that. It is a bit untested at present!
  * CSL: (a) I am moving the MacOS deployment target up from 10.11 to 10.12 in part because I am now starting some testing on 11.0 (Big Sur) which is currently in beta and where at present some of the packages I would like to install fail to build (eg bits of the TeX implementation wanted for building documentation). And because some C++ capabilities (std::uncaught_exceptions) that I wish to use are not supported before 10.12 (Sierra). Then (b) I have now started to plumb code from the files newallocate.h and .cpp through to newcslgc.cpp. That still does not actually do anything interesting, but it should now be the focuse of where I work for the next bit. I have arranged that when a Lisp user calls (reclaim) it now triggers garbage collection and that will help with testing. At present you just get an abort in a slightly different place from before when you do things like that!
  * Correction to my shell scripting in configure.ac regarding detection of support for C++14 and C++17.
  * CSL: more work on the conservative experiment. If I go "export CSLFLAGS=14G" so that things are always run in planty of memory then CSL does not need to trigger garbage collection anywhere in the build or test process. The most memory hungry step is the test of sstools which requires at least a serious fraction of that allocation. But for me this still runs well on a Linux system with 8G of real memory - perhaps because the 14G is half for use and half for a garbage collector to copy into, and so the actual demand is not quite so bad. The bugs detected and fixed here related to linear allocation for CONS etc that left a fringe pointer just beyond the most recently allocated object. If a "page" of memory was filled to the brim by the last cons then fringe was left pointing just one beyond the end of the page, and so the code I had (p & -pageSize) led to a pointer to the NEXT page not the one I had expected. But maybe now allocation is behaving (and it is amazing how much time and pain it has cost to get to that state!) so now I can perhaps have a go at global garbage collection. That will exercise and turn up the bugs in my code that "pins" Lisp stuff that ambiguous values (eg on the stack) seem to point to and which must therefore not be copied by the mostly-coping collector, and then it will stress where allocation has to allocate around the items pinned by a previous GC. Ah well - onwards and Excelcior!
  * CSL: Under "rr" the code I had to generate true random seeds seemed to cause a hang in rr until the user types something non-trivial on the keyboard. I have now taked the view that if I compile --without-threads that is to get the cleanest simplest possible build for low-level debugging, and it skips one component of the random number generation seeding process and then experimentally rr starts up a bit better. For those not clued up on this, "rr" is a Linux utility that records an instruction trace for a running program such that gdb can than traverse that trace either forwards or backwards. This lets you run code under rr such that it crashes hideously than under gdb you can interrogate the recorded version tracking backwards from the disaster to try to discern its cause.
  * iCSL: correction to a previous checkin where a missing "!" caused trouble
  * CSL: having sorted out int128_t.h a bit I go back to looking at the code for conservative GC. ARM32 suggested (I think) that some aborts were down to misaligned use of atomics. But debugging there was possibly being confused by my keyboard handler and its threads - certainly that was making use of gcb harder. So I now have an option to disable this and also for completeness to avoid use of karatsuba-related threads. That makes the code I am now debugging strictly single threaded.
  * Make scripts/findos.sh detect at least the beta of Big Sur. Note that the SystemVersion.plist file now calls it "macOS" rather than MacOS X" so I needed to use a different pattern match from all previous releases.
  * Hah - as I feared, the Mac moaned about my newer int128_t code. I believe this is to do with whether uint64_t and unsigned long long are just two names for the same type or whether they are different but happen to behave the same. This can lead to ambiguous overloads for a function that can accept either int64_t or uint64_t as an argument but is provided with 0xffffffffffffffffU which clang on the Mac thinks might map almost equally well onto either. But putting an explicit static_cast<uint64_t> in there I can make that overload clearly the best. This is all RIGHT on the edge of my understanding of C++ and how to be certain code is unambiguous in all cases however a particular compiler has implemented the standards!
  * CSL: I was testing that stuff I was working on and got to try on a Raspberry Pi running 32-bit Linux - and found that the code had picked up glitches so that it did not compile. These related to the emulation of 128-bit integers (aka uint128_t and int128_t) on (typically 32-bit) platforms where the C++ system does not provide an integer type that wide. Rather than just making the minimal hack patch to get things to build I have tried to re-work my support for 128-bit arithmetic. Now "int128_t.h" should be a header-only library such that if it is included and HAVE_UINT128_T_H or HAVE_INT128_T_H is defined (as easily set up by autoconf) then the native versions will be used, but if one or both are missing it provides its own version. This uses a fair amount of C++ mechanism to make the [u]int128_t class behave as much like a genuine integer as I can arrange. I believe it now works well enough for CSL, and it could be useful in othger projects (maybe). I am checking this in at a stage where I have done a respectable amount of testing on Windows - and once I have the code in the subversion repository I can fetch and check on Linux-x86_64, the Mac and the Raspberry Pi that prompted all this. I may find further issues when I do that! If there are any C++ experts who would like to pick that header up and review it to ensure that it REALLY works and to enhance performance that would be very very nice.... and then it could spin off as a separate "product" for the benefit of the rest of the world.
  * As per a posting, this uses system libraries rather than macports in the case that CSL-Reduce is configured --without-gui on a Mac, a change that should make building that version less fuss for people and may unlock a Homebrew access scheme for it.
  * safe!-fp!-quotient -> safe!-fp!-quot to correct use of the wrong name in one place.
  * CSL: With a few cheches and tidying up as per here (and I have taken this opportunity to bring some date-stamps up to say 2020) I can now build --with-conservative and with a little bit of fudging run scripts/testall.sh and MOST of the tests run OK. However a number of them still fail so I have a bit more debugging to do! But it feels like not too much.
  * The serious change in CSL here is that some uses of push() and pop() in the C++ code have been changed to be real_push() and real_pop(). The ones left alone are ones that exist only to ensure that there is support for a precise garbage collector - the ones with prefix "real_" have more serious uses, for instance associated with the way that the interpreter or bytestream interpreter work. I note that in the original source files there were around 2700 uses of push() or pop() and of these only around 10% have had to be upgraded to real_push() or real_pop(). With a conservative collector the 90% can be just discarded, making the code shorter and cleaner and perhaps easier to maintain. Dynamically the impact is not (at present) the factor of 10 that static measurement would suggest, since some "real" use of the stack is in the bytestream interpreter and is in effect in hotspots. But supposing at some future time I migrate to just having a conservative GC some of those can be tidied away... I believe that this change should be low risk for the main stream builds of Reduce. For the "conservative" experiment I can now (just about) build C code and Reduce by using enough memory that GC is never triggered, and around half of the tests run happily. It will probably not take me that log to get the rest sorted, but this check-in is an end-of-day one because I believe enough is stable for it to be worthwhile. Note that the new garbage collector is still not present at all - but the re-worked implementation of CONS (etc) to allocate memory in a way that will suit it is in half-decent shape.
  * Another small fix to allocation in the conservative experiment.
  * Refector a rather long function in newallocate.h so it is now written as several somewhat smaller chunks of code, because I was finding it really hard to work through it in its monolithic form. This has not corrected the bug(s) I have in there but may make it easier for me to address them.
  * Keep contest.cpp safe by checking in a collection of small updates. It now sets up the heap and can do a few cons operations in it. But it does not get as far as testing the transition from one page of memory to the next or of garbage collection. By having this a fairly small self-contained program with no user-interface stuff it recompiles much faster than the larger test harnesses I had been looking at before, and that includes the link step of a rebuild. Previously when I altered any header file a "make" recompiled the whole of CSL which was a bit tedious.
  * contest.cpp is my latest start as a test harness for the conservative garbage collector I am working on. It is NOT relevant to anybody who does not want to join in and contribute to that work! I am also now retiring the file cxx_shims.h that was used during the transition from C to C++ but that has been basically an empty filr for some while now.
  * Some time ago we had been considering altering the Lisps such that floating point followed the IEEE standard, and hence over-large results turned into an IEEE infinity rather than raising an error. Associated with that change the CSL version of safe-fp-times did the multiplication and then some checks which should have detected the infinity. However some part of Reduce turned out to rely on getting exceptions raised from floating point overflow, so the behaviour of arithmetic is now (by default) to raise an error in that case. a function trap!-floating!-overflow can maybe adjust that! But the CSL safe!-fp code failed to track that particular standardisation of behaviour. A result has been that on rounded mode overflows led to a complaint when the code was trying to make the system transition into bigfloat mode. Adjustments to safe!-fp!-times (etc) and places where it is used have (I hope) resolved this.
  * put an m4 directory in psl
  * Define swithc algint in entry.red so that "on algint;" loads the algint package.
  * This tried to put in some fairly minor titying up changes into the snapshot builder. Now scripts/dot-snapshots is identical to the file ~/.snapshots on MY machine. All traces of win32 and linux32 should now have gone and windows/win64 and linux/linux64 are aliases.
  * Update configure.ac to add AC_CONFIG_AUX_FILES
  * This removes the scheme that does autogen operations in parallel. This seems to be necessary to avoid race conditions as between invocations of libtoolize - so I am sorry but it slows down configuration but it should avoid some sporadic failures!
  * Make autogen run libtoolize on each sub-directory one at a time rather than all together. This will slow things down but I want to check if it makes things safer.
  * Yet another attempt at autogen.sh
  * Another attempt to make autogen.sh install ltmain.sh in all places it needs to.
  * Forgot to add "(load hashtable)" to the psl/saveimage.sh script.
  * In autogen.sh I now delete existing libtool-related files before re- installing version susing libtoolize & autoreconf. This should be safer if the computer being used runs a different version.
  * Remove a stray "/" at the end of the path in $here
  * When the winbuild file is removed I must look in winbuild64 for things to icnlude in the distribution
  * Corrections (a first round!) to the previous set of changes...
  * Macintosh does not come with a "realpath" command and so I need to keep the clumsier loop of code that I used to have. Ugh!
  * This checkin reflects the fact that Cygwin now have strong advice against use of thgeir 32-bit version when you look at their web-site. So I have removed what was in fact quite a lot of messy delicacy involved in supporting it. I have also withdrawn (a significant proportion of) scripting that used to build windows versions using i686-w64-mingw32, ie for use with 32-bit copies of Windows. The snapshot-building system has been simplified to get rid if 32-bit windows and the 32-bit Intel Linux options, but I am now a bit keener to look after the 64-bit Raspberry pi. There will be some more cleaning up to follow this, but big step is this one and when t is checked in I can test it on a range of machines. Anybody still needing the 32-bit windows version will need to stick with a snapshot up to about this date or adjust build sequences for themselves.
  * Add casefolding to winbuild scripts (32+64 bit)
  * Fix for a regression with printing matrices while the redfront output handler is active.
  * A change to a script in winbuild64 that forces the path-name for that directory to be refered to in lower case. If there are in fact mixed case components it will fail!. This is because we seemed to be having trouble witj paths that ended up looking like "/cygdrive/C/..." with a capital C, where in particular although for many purposes those behaved when symbolic links involving then were set up there was trouble. I hope that mapping the whole path name to lower case is good enough at least in this script for making snapshots (that only "experts" use). I am not yet clear hiw much the effect applies in the ordinary world.
  * Set env. variable GS_OPTIONS=-DNOSAFER when building HTML documentation. Needed on MacOS with a newer ghostscript, but not up-to-date gsftopk.
  * PSL: recompile qualcount module for macintel64.
  * PSL: add hashtable.b for mactintel64.  Automatically load hashtable.b when it is present during build.
  * Recompile PSL debug module for macintel64.
  * Reduce manual: replace \atop command by amsmath commands.
  * Get rid of a diagnostic when building snapshots and there is no existing snapshot to move into the snapshots/old directory.
  * A typo in the wbootwin64 now fixed.
  * More changes to make the manual build with current TeXLive.
  * Workaround for problems with LaTeX \kill command and tex4ht.
  * Temporarily replace \( ... \) by $ ... $ to work around a bug in tex4ht.
  * Another update to do with snapshot building
  * Fixes intended to make snapshot building work again on the CSL front.
  * CSL/Mac: the macports version of freetype has recently been upgraded such that it depends on bits of something called brotli and I now need to link in some brotli libs alongside freetype to survive. If my changes hurt any Mac users they shoudl first run port selfupdate; port upgrade freetype and ensure that "port brotli" is installed so that they keep up with today's nont quite backwards compatible updates to freetype!
  * CSL: now both the write barrier and the pinning mechanism start to do what they are suppose dto at least when given rather simple tests.
  * PSL: Undo change from revision 2810. (linelength 0) should raise an error according to the Standard Lisp Report, but in PSL in means unlimited linelength.
  * CSL: fix a mistake that was in the previous checkin.
  * CSL: I have made what are in some respects small changes to the write_barrier mechanism base on today's thoughts about what will be cheapest there, and this inches towards being ready for me to test my pinning machanisms as required for a conservative GC. So still not a working new system, but I want to check stuff in reasonably frequently so that I have safe copies stored off-site.
  * CSL: Another day of updates in newallocate.h, .cpp. This puts in some test code for the p[inning mechanism which at present causes a CSL built with --enable-conservative to perform a segmentation fault on startup - that is understood and pretty close to expected, and is something I can work on tomorrow. This is all to do with re-working my allocation code so that it will be able to allocate around pinnings.
  * CSL: following a chunk of debugging time I now think (well hope!) that my write barrier (based on multi-level bitmaps) is now working about as intended. The next thing to do will be to check the code that is supposed to pin chunks when an ambiguous pointer means that is needed and then allow me to enumerate those chunks when I need to.
  * CSL: A Raspberry pi running in 32-bit mode showed overload ambiguities on code to combine and int and an atomic<int>, so I needed to put in some explicit ".load()" calls. Also choice of initial memory allocation was a mess in the 32-bit case, so I fixed that. The state now is that csl.img can be created but if I try to build bootstrapreduce.img I get to s state where the code tries to garbage collect (while rebuilding specfn2) and hence fails. I view that as fair anough and further incentive to get to where it can work.
  * CSL: more fixes so that Â¥(at least for me) the csl --enable-conservative code compiles on a Macintosh. This is still a basis for me starting to give it a garbage collector!
  * CSL: fixes to the config files so that sigaction gets detected properly on the latext Xcode on a Mac. Well I am not exactly certain when things broke but when I tested today "struct sigaction" was not properly detected]. Also more dependencies to show that u01.cpp etc depend on CSL header files.
  * PSL for Linux x86: Add hashtable and qualcount.
  * CSL: at least the "conservative" code now compiles - that really does not mean that any of it works, but it does mean I can use it as a framework into which I can inject testing and debuggin code for some of the low-level components.
  * CSL: this is to try to arrange that at least my parts of the CSL code all compile without warnings on both gcc and clang. There are a few future parts to the continuing story of making the code more like tidy modern C++. An easy one will be to migrate from use of malloc() to new[]. One that I an rather uncertain about the merits of would be to move from <cstdio> to <iostream>. The biggie would be if I could make LispObject a C++ class so that it was more properly abstract rather than concrete and get types of all the various structures that CSL uses cleaner so that the current large numbers of casts could strink and possibly so that use of union could cause some of them not to happen at all. That last is something where I suspect that a transition would be rather painful - possibly painful beyond feasibility! Anyway clearing away some warning messages is a good thing to do for just now.
  * coeff and rlcoeffs
  * CSL: 32-bit Unix fixes to the recent checkin that moved things from C style to C++ style.
  * Correct a symbolic link.
  * Tetsing on the Mac shows that clang is fussier than g++ about casts, and when I want to store a string literal in a structure field that has a function pointer as its real type (!) the cast needed seems to have to be done in two stages via intptr_t. Well I can sort of understand why this is not easily guaranteed portable (eg on Harvard architecture machines).
  * Fixes to last checkin so it works (for me!) on 64-bit Ubuntu.
  * Catching up on changes in the CSL directory.
  * Hah - this may be a sort of displacement activity - but I think I have now changes all the *.cpp files in CSL to use C++ style casts not C ones, so eg static_cast<T>(E) rather than the more concise (T)E. This is part of the long term migration from a style inherited from the original C code to something "more up to date". This is not intended to change behaviour at all! But it is hoped that it will make it easier for others to maintain the code, it may encourage me to make further cleanups and it should tend to add to the amount that is checked at compile time. The checkin here has been tested (only) on Cygwin - once this is all commited I can test it on Linux and Macintosh, and previous experience suggests that doing so will flush out at least a few glitches. Also the "conservative" option that I am developing (but which remains a long way from being ready for other sto even try) is substantially in need of repair - partly because of the current round of changes but partly because I was changing strategy for various aspects of it and am in the middle of making the consequent alterations.
  * rlisp88: Hyphens need to be escaped in the test file.
  * Shortened the list of arguments in a procedure in order to comply with a restriction of PSL on the number of arguments.
  * A little while back I changed the source code of CSL to make it more C++ proper by putting a the prefix "std::" in front of pretty well every symbol defined in its standard libraries. That was a wholesale change because doing it to everything was simplest. I have now added lines like "using std::uint64_t;" to one of my header files (specifically machine.h) so that some of the more fundamantal names do not need that ugly prefix. And I have then gone through the files tidying up. So where I had recently had say "std::atomic<std::uintptr_t>" I now have just "atomic<intptr_t>" which is a deal shorter and cleaner. My view is that the modest number of names I have selected for this treatment are ones sufficiently well known and standardly used that name-conflicts involving them just ought not to happen. And the reduction in code clumsiness is significant.
  * Added service rlin.
  * added procedure ioto_in
  * At least a start at supporting "fancy" mode printing for the CSL GUI with the camal package. This may still not do all it should but at least for me it no longer crashes on the example recently reported as a bug!
  * Bug fixing: now the example h_nb1.red in examples_book works properly, and a consistency check in schouten_bracket_wnl behaves in the right way.
  * Another glitch in the static_cast<> conversion - this time in newallocate.h - a file only inspected if the incomplete and experimental option "--enable-conservative" is activated.
  * This is a major update of the package CDE to version 3.0. The main features that have been added are: - Calculus with super-differential operators: linearization of of super-vector functions, adjoint of super-differential operators. - Extraction of coefficients from a (super)-differential operator and definition of a (super)-differential operator by a list of coefficients. - New software cde_weaklynl.red for calculations of the Schouten bracket of pseudo-differential operators. See the CHANGELOG.txt file for further details. The documentation and examples for the above software is in development and will be published soon. Interested users are warmly invited to contact the author of CDE for any question/comment related with the CDE package and its prospective applications.
  * The CDE section of the manual has been updated with comments and new references
  * More places where the conversion to use C++ casts was not quite sorted. Here it is on platforms such as the 32-bit Raspberry pi where 128-bit integers are not avaialble. The file that simulated them needed attention.
  * The Macintosh using clang is more fussy about when you use static_cast and when reinterprt_cast will be accepted, and flagged up a case in arith.h that I had missed yesterday.
  * CSL was originally a C coded system - but for some tine now it has been built using C++ and it gradually makes use of C++ facilities. When in C it used casts written in the form (T)E. C++ enthusiasts are (if one reads items in the web) vert scathing about that and declare that the much clumsier notation yyy_cast<T>(E) is much to be preferred. They offer various reasons such as it being good that it is so much clumsier since that will make you feel bad about having casts at all, and that it makes finding casts using grep a lot simpler. Hmmmph. However here I have changed at least almost all the C style casts in my header files to be C++-style. That puts me in a position where I can make the same sort of conversion on the C++ source files gradually over time. I defend the (large number of) casts present by observing that in a Lisp implementation I need to implement a sort of dynamic typing with objects able to represent integers, vectors and lists. If I used C++ classes and sub-classes I would still need down-casts to intepret (eg) a general lisp item as a cons cell or whatever. And I need object tags but want them packed in the same machine word as the object itself (for compactness). So I have a load of casts converting between the generic LispObject and the various sub-cases. Also when I perform arithmetic I want to get close to overflow (the alternative being to waste bits keeping away from it) but in C++ the behaviour of signed arithmetic is undefined as you reach that stage. I end up in a situation where to retain defined (or at least implementation defined!) behaviour I often cast between signed and unsigned integer types and to and from particular widths to keep myself safe. This all feels terribly ugly and perhaps if I was starting afresh I could do better! Anyway this move to use of C++ casts highlights many of the casts and may eventually motivate or trigger some clean-up work! When all the header files are changed the changes propagate into u01.cpp .. u60.cpp when the generated C++ code is next re-created. The behaviour ought to be exactly as before with the only change there being the textual way in which casts are written.
  * Arrange that the count field in a symbol header always holds a value that would appear to the garbage collector as immediate data. This is trivial in the 64-bit case because it is then just a fixnum. But on a 32-bit platform I sail a lot closer to the wind to make it look rather like two adjacent fixnums - and in the case an atomic increment involves some fun!
  * A fix to arithlib.hpp and its recent change that showed up as necessary when it was tested on a Mac but had not been flagged as a problem on Windows/Cygwin.
  * I have re-worked arithlib so that where it used to use (T)xxx for casts it now uses yyy_cast<T>(xxx). This is a change driven by strong statements made by C++ enthusiasts who note that the C++ style of casts are deliberately clumsy and ugly to try to discourage their use, and that the old-style C casts weaken type-checking.  So my changes are to placate that group and to emphasise that the code is in C++ rather than just C. I may start doing the same to all of CSL at some stage. The other significant change is because if one defined an overloaded function or operator so as to work on int32_t and int64_t there is not guarantee that it will work on int and long. And if it is defined on double too the C++ compiler can find an ambiguity as to whether an int should be widened to a double or an int64_t. Well I think that explanation may not quite convey all the mess, but there certainly is a mess. I have responded by arranging that things i might have overloaded on int32_t and int64_t are now set up using a template scheme the constrains its type parameter T to be an integral type. Sometimes I discriminate between signed and unsigned cases. Doing this means that a reader coming across the code for the first time will have some more revision of their C++ notes to do before they can understand just what is happening - sorry - but I believe it should cover all cases better. A current limitation in how I have implemented it all is that I do not cope with a case where intmax_t is bigger than int64_t, and my overloading would not cover a 128-bit integer type that had not been fully integrated into the rest of the C++ arithmetic. These changes end up quite extensive even if they are notionally shallow.
  * Test scripts: add --uncached to run the tests without alglist caching, correct testall to pass --install, --keep flags to test1.sh script.
  * Correct error in package cantens: Non-unique kernsl were generated, caused different results when caching was switched off
  * Correct a bug in the qsum package that shows up with !*uncached:=t : Comparison of standard quotients was done with eq.
  * Towards the use of the TeXmacs interface under Windows.
  * Correct a bug in PSL kernel fpr 64bit Windows: When loading an initial heap, it overwrote the argument list with the saved arglist from the heap. Arguments to the running program were lost.
  * Correct a bug in the Taylor package that occured with !*uncached := t This led to an infinite recursion when combining Taylor kernels automatically.
  * redfront.h has needed the work "extern" in front of declarations so that they were declarations not definitions. It had got away with this error on many earlier platforms (it seems) but Fedore 32 beta calls it out.
  * You can now configure the CSL version "--enable-trace-equal" to activate the profiling of EQUAL. And when that generates output it now sorts it so that the heaviest use of EQUAL comes at the top.
  * Let PEQ believe that kernels will always be stored in an unique manner. Add a function "equalstats()" for CSL to print and reset statistics about EQUAL when TRACED_EQUAL is defined.
  * This ought to reinstate the TRACED_EQUAL option in CSL, where if that symbol is defiuned at compile time then all calls to EQUAL are notes and a log of them written to equal.log at the end of the run. This shows where in the CSL source code (ie the C++ code) the call to equal was from and counts the number of calls and the number of those that returned "true". I can not tell from this (at least at present!) which bit of Reduce code led to use of equal(). But for instance when I try this on the case (x+y)^10000 I think I see 40 million calls to EQUAL with very very nearly all of them saying "yes".
  * Adding a CHANGELOG.txt file to the package CDE
  * Adding two folders of examples.
  * Forgot to commit two source files for 64 bit Windows.
  * Add PSL qualcount module for Windows 64 bit.
  * PSL hashtables: optimize the code.
  * PSL: Add qualcount module for AMD64_ext to Makefile and recompile.
  * PSL hashtables: correct sxhash for float objects.
  * Further work on PSL hashtables: optimize sxhash for pairs/lists to descend only a finite number of steps. A couple of changes to reduce collisions: for example, in the first version two lists differing only in the order of their elements would hash to the same value.
  * Hashtables for PSL: Allow hash computations for circular structures. This reduces performance considerably by adding all pairs in an association list. Maybe use a preallocated list instead?
  * Experimental hashtables for PSL: implement three-argument version of mkhash, add missing code for hashing of bignums.
  * A couple of minor updates for PSL on armv6.
  * Update to hashtable implementation for PSL: use the upper n bits instead of the lower n bits after mulltiplying with the golden ratio.
  * Add contributed package COEFF2.
  * Correct example in section 3.3 of EDS manual. Reported as bug: https://sourceforge.net/p/reduce-algebra/bugs/121/
  * A couple of updates for PSL, e.g. build scripts for PSL.
  * Excalc: correct a problem when printing indexed quantities while using the gui (here a fancy-terpri* instead of terpri* has to be used).
  * Reasonably recent changes in the way thet Cygwin handles its console had resulted in all output from things executed under the "alternative" Cygwin that this could use ending up discarded. I believe this should make this output visible again.
  * Recompile fix for debug package for FreeBSD (x86), Linux (x86), and Windows (see r5276). Still Missing: MacOS.
  * rlfi: add support for printing binomial. rprint: adapt code for printing assignments.
  * Recompile fix for debug package for FreeBSD and Windows on x86_64 (see r5276).
  * Excalc: Issue a terpri* before printing indexed quantities for better readability.
  * Now an attempt to bring winbuild64 up to date
  * Add support/revision to package.map for PSL so that it is always recompiled, even when a bootstrap image already exists.
  * This ought to fix the build of rfboot on Linux etc.
  * Excalc: Fixup printing of indexed quantities for various frontends.
  * Excalc: Make sure that all substitutions are made while setting up a coframe.
  * Start to patch up winbuild again...
  * Fix a bug in the PSL debug module: trying to use tracentryhook, tracexithook, and traceinstallhook triggered an error.
  * I am working on my new directory layout for building with CSL. I hope I now have things such that if you configure --with-csl (and the new option anabled) it makes a directory cslbuild/intel-pc-windows that has commands redcsl, bootstrapreduce, csl, redpsl, rfcsl and rfpsl. Where relevant all of these should auto-detect as between windows and Cygwin and 32 and 64-bit worlds. There are also windows-only (ie no cygwin) versions that are intended for launching by double-clicking and those should not pop up extra consoles when run that way. I also hope that bin/redcsl etc tie in with this! I have tried to do this such that people who do not enable this get the same behaviour that they have up to now. You may imagine that this has hacked quite a lot and testing it properly involved deleteing all built files and rebuilding the whole of this Reduce world from the start - which takes a while. So it is NOT tested at all properly yet, and there are quite a lot of things to check. Had I mentioned running console versions of Reduce under 32-bit cygwin, 64-bit cygwin and also the CMD prompt. I chunk of work I hope to do but that needs the basic version stable first will be to make it all behave nicely in cases where the system-builder has or has not chosed to build the 32-bit variants. I have some hooks ready for that but it is an extra chunk or so of work. So I am mostly checking it in so I have a safe copy that I can revert to if I wreck it later tonight or tomorrow, and that can be the version that my testing is based upon.
  * This is now ge4tting some way towards the --with_windows_layout=new creating an intel-pc-windows directory with executables in it that are much like those that have been being set up in winbuild. But there are still several more steps to go: (1) It is not really tested at all properly yet! (2) It needs to allow for case where 32-bit variants are or are not to     be included. I have the start of a framework to arrange that but it is     not pushed through properly yet. (3) I must deal with redfront to provide rfcsl and rfpsl binaries. (4) I must arrange that bin/redcsl etc link to it all gracefully. (5) Once all the above are tidy I wish to back-port it into winbuild so that     it gets used to create snapshots and hence that there is just one set     of rules and technology that is common betweek local and snapshot     building.
  * A bit more towards my windows_layout=new scheme, and fised for CSL when built --without-gui following through from cygwin changes.
  * On needing to rework a number of things when Cygwin changes its terminal handling behaviour I needed to rework the "fat binary" sceme that I has set up some while ago. The amount of pain that that caused with sequences of attempted versions not fully working was most unsatisfactory. So here I have adjusted the layout of files.iss in winbuild (I will need to do the same in winbuild64, and I have also adjusted the main top-level configure script. At present the adjustment to the configure script is intended only to apply to *ME*, so I make the default of --with-windows-layout=? be new rather than old only when the name of the machine on which building is happening matches mine, ie either panamint or gauguin. So anybody who happens to use a computer with one of those names may need to go --with-windows-layout=old explicitly for a while please! The old layout put variants on windows builds in i686-pc-windows, i686-pc-cygwin, x86_64-pc-windows and x86_64-pc-cygwin subdirectories of cslbuild, so putting together a generic multi-platform version of Reduce involved picking files from each of those. In winbuild and winbuild64 I had a sifferent scheme where cslcyg32, cslcyg64, cslwin32 and cslwin64 directories lived within winbuild, each holding a variant build. With my "new layout" I am adopting that style for the main builds and that will consolidate major and snapshot building in a way that gives me one set of build scripts to maintain rather than two! So the new scheme creates intel-pc-windows and puts sub- directories cyg32, cyg64, win32 and win64 within it. Right now about the only thing I have done is to fix up the configure.ac to achieve this. I will now need to propagate ideas from winbuild into the intel-pc-windows directory and thence into "bin" where top-level executables live.
  * This does not change behaviour (I hope!) so will not fix any bugs, but it alters the Inno Setup use in ways that I hope will make it easier for me to make adjustments. Firstly rather than having reduce.iss.in and a sed script it customised on directory and version by passing information via the Inno Setup command line. Then it splits the reduce.iss file into three using their #include mechanism. The bits separated out are the [Files] section because that is the bit that changes as one adds, renames or removes Reduce components. The other is the internationalization strings - the only part of the file using 8-bit characters (and hence delicate when archaic editors and tools get too near it). And I have then spread the information in the [Files] section out across multiple lines per entry so that it shows up more tidily on an 80-column display. With all that done I will want to do the same in winbuild64, but I can also consider trying to get the winbuild case fully working!
  * Correction re the symbolic link to rfcsl that is put in /usr/local/bin by the installer.
  * A further attempt to get file names and paths and syntax correct for the Windows installer.
  * Another attempt to put in a secicolon.
  * Put a semicolon in reduce.iss.in where I think I had missed one out.
  * I hope these are more improvements moving toward sgetting redfront working again!
  * Refresh wineditline to a new version
  * A first step towards getting redfront back in workable order! I hope. This is utterly minor but I want it done to make the next steps easier for me to develop and check.
  * A couple of times while trying to sort out the winbuild stuff I edited reduce.iss rather than reduce.iss.in and then when I test locally all can look improved, but if I do a proper clean rebuild the changes I though I had made fail to happen. So here I am trying again with changes applied to reduce.iss.in.
  * Correction to snapshot builder so that wincsl should n longer pop up an unwanted console.
  * More steps towards the newer CSL fat binary scheme. (1) Correction in reduce.iss so that the redcsl file launches reduce not CSL. (2) Make winred etc windows mode binarie snot console one so that when launched they do not cause an unwanted terminal to get created. I believe that redfront is still not working - but since I have basically never used it I am not used to knowing what it should do!
  * I have made changes both in hoiw the CSL/Reduce binaries are created in winbuild and winbuild64 and in how they make their choice as to whether to run Cygwin or Native Windows versions of the underlying code. This was prompted by changes somewhere that rendered previous tests based on seeing if a Windows Console could be accessed ceased to behave the way it used to under Cygwin, and that change may mean that most previous binary snapshots have problems in console mode under Windows! The checkin here is because in order to test this properly I need to run a version of the snapshot build process and that will access the latest subversion copy of all code - so this checkin is not because I am certain that this is ready for prime time and not even because it will be certainly OK if it just manages to build a Windows snapshot binary - it is so I can build that binary and then try to test it.
  * Final correction for bug #116: bind !*combinelogs to nil in simp0.
  * Bug 116 can be triggered without loading defint, switching combinelogs to on and defining certain rules. Extend regression test file to test for this as well.
  * Rebind !*combinelogs ond !*expandlogs to nil when ruleset in defintb.red is loaded (correction for bug #116).
  * A checkin so that FOX gets rebuilt.
  * Fix for native windows keyboard handling on Windows in the CSL version.
  * Prevent simplog from extracting a spurious factor of -1 from its argument when switch expandlogs is on. Example: log(-eps) --> log(eps) + (log(-1)
  * Added missing file winbuild/newstub.c.
  * Restart work on the conservative garbage collector for CSL. Please note that this is still not in a state where it can be tested, but feel free to review the code and submit comments! Small tidy-up work on the winbuild stuff.
  * Bind !*combineexpt to nil in simpdint.
  * Correction for bug report #110: https://sourceforge.net/p/reduce-algebra/bugs/115/ Integrator fails when combineexpt is on. Solved by binding !*combineexpt to nil inside simpint.
  * Change scripts/run.sh in line with the changes I had made to csl/cslbase/reduce to try to get the system to launch the correct choice of cygwin vs windows executables.
  * The technology I had used to decide whether to run a Windows native or a cygwin variant of CSL-Reduce had failed with some recent cygwin and/or windows update (at least I believe I had not changed anything!). But also looking back some of the motivations behind it had changed. The new version of the "reduce" shell script is thus simpler both to understand and to execute. I have put comments in it to explain some of the background.
  * Package tri: Change type of variable metricu to fluid in accordance to its origin in the package excalc. This prevented the simultaneous use of both packages under CSL.
  * (1) Removed PRINT, CUT & PASTE menu items from the Windows CSL GUI because they do not work and have not for some while. I want this to be interpreted as a request for a volunteer who is reasonably used to C++ to sort that all out - and note that the work is JUST in C++ and does not involved the algebraic side of Reduce, Lisp or anything terribly esoteric. If anybody is about to put serious efforty into this I will try to help from the sidelines. (2) Fixed to configuration scripts that may make the subversion copy of Reduce build better on Windows. (3) A little extra output for the logs when a windopws snapshot is created.
  * Correction for incomplete factorization in simplog when expandlogs and factor is on.
  * The testall.sh script ignored the --psl/--csl options for the regressions test - corrected.
  * Correction re some symbolic links to fwin.h and fwin.cpp.
  * Now an attempt to arrange that "redcsl --help" generates a windos¥w that is scrollable so that you can inspect all the output, but that then shuts everything down when you close that window.
  * A type in the file csl.cpp meant that options "-i" and "-o" were not being picked up for processing correctly... the code always pretended that (in addition to any image files specified) there had been no image files specified at all so it appended the default one. Apologies.
  * CSL: a little while back I had found that Reduce tended to hang as it tried to terminate, even though I was not aware that I had made any changes that were obviously relevant. Investigation seemed to suggest that it had become vital to cause all threads to terminate at end of run. Eg on Windows I have used a TerminateProcess call that I believed would exit, destroying threads etc etc with serious prejudice. I seemed to find that I could call that but it then never itself returned and everything was left in a sort of zombie state. The threads I needed to kill were concerned with Karatsuba multiplication and with kayboard handling. Furthermore I can to have nasty suspicions regarding std::atexit() in a threaded program in terms of the ordering of its operations. So I replaced use of atexit() with RAII schemes to cancel threads via object destructors. This then repaired behaviour when exiting was provoked from within Reduce (or CSL), eg by the user typing "quit;". However it turned out that if a GUI window was calcelled within the GUI either by using its close button or via a File/Quit menu the close down did not appear to get the core computational part of the system to exit, so the destructors were not called and threads remained active and the system would hang rather than exit nicely. To deal with this I now intercept the GUI messages and activity that is to do with termination and set flags to advise the main code to quit. I unlock mutexes and generally try to arrange that Reduce itself will notice this. There are of course two cases - one where Reduce is busy computing, and for that it has to poll to detect the quit request. I deal with that by making it suspect it has had a stack or memory overflow! The other possibility is that it could be paused waiting for keyboard input. For that I have to make it think it has some. If there are other situations where the code might be blocked or inactive they will still give trouble. As coded in this checkin the flag I set is a single C++ bool variable, so ideally I need to think harder to see if I need to make it std::atomic so that the inter-thread communication is better guaranteed. It may be that I have enough muxex operations that will activate memory fences so that I am in fact safe - and I *think* I probably am!!!! Only lightly tested at this stage. M    csl/cslbase/fwin.cpp M    csl/cslbase/fwin.h M    csl/cslbase/version.h M    csl/fox/CHANGED M    csl/fox/include/FXTerminal.h M    csl/fox/src/FXApp.cpp M    csl/fox/src/FXTerminal.cpp M    csl/fox/src/FXWorker.cpp M    csl/foxtests/configure.ac M    csl/foxtests/hello2.cpp M    revision_history.txt
  * CSL: Fix (just) one of what seems to have been a bad bunch of issues that got left in the most recent checkin where clearly an excess of turkey and mince pies had led to over-optimism!
  * Web site
  * Correct source directory for insidereduce.*
  * Add insidereduce to documentation directory for debianbuild and winbuild. Omit superfluous .png files for HTML version of the manual.
  * In CSL I took a C++ std::string and did c_str() on it and kept the pointer. This led to a defunct pointer, and although I think I then only read from it the consequnces for *.dep were bad...
  * First attempt at an implementation of simple hash tables in PSL, on top of Lisp vectors. Compiled versions for 64bit Linux and Windows can be loaded with (load hashtable)
  * Make some paths used in winbuild absolute rather than relative.
  * Web site
  * Add an option '-rev=NNNN' to scripts/mk-snapshots.sh to allow selection of the revision to build a snapshot for.
  * Changing from use of std::atexit to use of destructors in an RAII style for various bits of CSL tidying up. And along with this altering std::exit to my_exit in most places...  Still in need of testing.
  * Fix a glitch in the previous checkin.
  * An attempt to make the CSL keyboard thread exit more gracefully under Windows. It had previously seemed to behave for me on a real Windows machine but failed on a Windows guest in Virtualbox. I *hope* this corrects things by being rather more conservative about how I request that the thread terminates (where before I used a Windows call that was suppoed to stop it in a rather forcible manner).
  * A typo and a correction for a regression test file. With precise off, and expandlogs and factor on, the expression   log (eps*(1-eps^2)); contains a log(-1) term after simplification. Since we don't have a correction for the problem, the corresponding .rlg file is not yet checked in.
  * Correct error introduced in previous checkin.
  * Redesign interface between procstat and formproc. Previously, procstat1 returned for the definition of an algebraic procedure something like
  * The latest change conflicts with assit which expects certain return values from gettype. Make minimal code changes so that assist continues to work.
  * Protect against defining an algebraic procedure and an operator of the same name.
  * Regression test files for recent changes.
  * Short-term patch regarding rlfi vs defint.
  * Laplace package: Ensure that only unique kernels are made. subla on a s.f. may produce non unique kernels and can therefore not be used.
  * Assist package: correct a few places where non unique kernels were injected.
  * One can now go something like    CSLFLAGS=-k12G scripts/testall.sh (or similarly for test1.sh) and the text from CSLFLAGS is passed to each invocation of CSL. The example used as illustration would cause each test run to be with -k12G to occupy (about) 12 Gigabytes of memory, but any CSL options can be passed. Eg if I have a CSL variant that can not yet garbage collect then running with CSLFLAGS=-k2g lets me see how many of the tests need more than 2 gigabytes to complete, and it is not that many: qsum, defint, fps, ofsf, ibalp, pasf, susy2, conlaw, smt, sstools. I think I am slightly amazed at all the interesting computations that can be completed without garbage collection these days, and that is with just 2Gb...
  * The main change here enabled use of an EQUAL-hash table in fkern to keep kernels unique. A new flag !*trap!-non!-unique!-kernels might help track down remaining case where kernels are NOT unique and so when !*kk2f and !*kk2q rather than !*k2f and !*k2q might have been better. That is not enabled by default because if it is then some test cases fail! The variety of files changed point to where the 'klist property might have been worked on directly.
  * Remove a left over debug print statement (echo version=$version) from scripts/run.sh
  * iI had used bash not sh syntax for a loop...
  * Fitch a scripts/testall.sh in the previous checkin.
  * A new target in scripts/test1.sh and hence testall.sh. If you go something like    scripts/testall.sh --csl --basecsl --debug then --basecsl runs the default simple version of redcsl, while --csl picks up the --debug option (and it could deal with others - see the code) and so runs a version built for debugging. The result is that you get to be able to check that those two versions yield the same output and you get to see comparative timings so that you can observe the overhead factor of switching off some optimization and switching on debug support.
  * The script bin/redcsl (and its friends) has a new behaviour. Now you can go thinks like "bin/redcsl --debug <other args>" or "bin/redcsl --nogui ..." or various other words (including --conservative) where the extra args must come at the very start of the argument list. It will then run a non-default variant on the CSL build, be it one with debugging options compiled in, the one for the "conservative" experiment, one that was part of the project to use wxWidgets in a GUI etc. Of course it can only use the requested version if you have previously used ./configure and then make to set up and build the version as requested. Previously it had an ugly and in the end somewhat irrational and potentially unreliable scheme to pick what it thought was the "best" version you had compiled and built. Testing with scripts/test1.sh and scripts/testall.sh can now take the same optional qualifiers. The common case of just "scripts/testall.sh" should test a version that just "./configure --with-csl" (with no more options) leads to, but part of my motivation is that now I can go "scripts/testall.sh --conservative" as well as the default full test to exercise my development code.
  * For --with-conservative and CSL I now check the amount of physical memory in the computer being used. If it is at most 6G I try using 3G. From there up I try using physmem-3G up until I am using 16G in all. The intention here is to use about as much as the computer will be able to stand, and hence avoid garbage collection (whihc is still not implemented in that experiment) as much as possible. The "-k" and "--maxmem" options can override this behaviour eg in case somebody wants to use more memory than their computer actually has and trust to virtual memory to cope. Not heavily tested yet!
  * This changes the way that qsum overrides the default behaviour of simpexpt. It tried to have exactly the same behaviour, but implemented in a way I view as cleaner. All the tests for scripts/testall.sh seem to survive! This changes the code for simplexpt and that may be important enough for everybody that I have put in a fresh profile.dat - something that needs doing every so often.
  * Try to make the CSL options "-Knnn" and "--maxmem nnn" behave properly where both had been left in a messed up state at some stage in the past. The -K option specifies how much memory CSL should allocate when started. If then grabs more from time to time to try to keep heap-occupancy under 25%, but if the user has specified --maxmem that is a limit. All limits are both approximate and very granular, and the hope is that neither option is needed for any ordinary use. They can of course be invaluable when debugging the garbage collector! The memory amount specified in each case can be given as a floating point value, as in -K1.0e9 or can have a suffix K, M or G, so --maxmem 7.5G would be a limit at (about) 7.5 gigabytes.
  * Note that you will need to regenerate the code in generated-c following this check-in. The effect here is that the --with-conservative experiment should now run all the tests, however for reasons not yet understood qsum.tst runs dramatically slowly even though most of the rest are not too bad.
  * Make the CSL "-k" option (to specify store size) work again!
  * Just where I have got to - there has not been time to make genuine progress, but the conservative EXPERIMENT (it is not for use by anybody who actually wants to do anything!) now allocated itself 16G by default and that lets me test cases like sstools. Also bin/redcsl can find it if there is no standard version built.
  * This now arranges that the "--enable-conservative" version of CSL allocates itself about 8G of memory by default. That allows it to build Reduce and run some tests without need for garbage collection! The file newcslgc.cpp now has a little more code but a mmore important block of comments showing what has to go in there next. And the makeheaders utility and its use have been updated so that the generated files u01.cpp to u60.cpp have more of the header files transcribed into them to make all this possible, and so that it ought now to be possible to build a copt of Reduce that way without having debug options set - previously such an attempt led to an unsatisfied reference at link time.
  * Web site
  * Add a file called BUILDING to help people get started.
  * This now starts to lay done code for the first version of the new CSL garbage collector, and I am pleased with the way the bits I have put in so far build on foundations I had been builing over the last while none of which had visible use up to now. So what it is SUPPOSED to be able to do now is enter the garbage collector and tag all items apparently referenced by ambiguous values (ie from the C++ stack) so that later on I can leave such items in place rather than copy them into the new semi-space. The next bit of work will be the central chunk of data copying, but in principle that is only going to be a lightly modified version of what I already have in the existing GC. Of course when it gets to debugging time things will become truly horrid again for a while! But the new code now feels very satisfying.
  * The fairly recent rework of command-line argument decoding for CSL has the bad conseqence that a sequence "-w file.red" tried interpreting file.red as an argument for -w. The effect was that it tended not to get read in! This should fix things!
  * Forgotten update of regression test log file for sign.
  * Change the message at the end of output from "make" for Reduce so it does not suggest that reduce has been "remade" in cases when in fact there was an error and it has not been. I do not know if the new message will cause grief in other cases, but it is Only a Message and doe snot change what has actually happened!
  * Small change th the compiler that generates C++ from Lisp for CSL such that it copes with the conservative GC case. I can now build and run all of Reduce with that allocation code for --with-conservative provided tgar I force thesystem to allocate 10Gbytes of memory and hence never need to garbage collect. So now I need to sit down and concentrate on the core of the new GC code!
  * Web site
  * CSL: changes in newallocate.* (plus some consequential ones) such that now if I run in enough store the new allocation code behaves well enough thhat I can build bootstrapreduce.img (and presumably reduce.img). This has involved a morte extended and frustrating set of debugging sessions that you might believe to be reasonable given that in some sense it is all rather simple! But this is still a landmark where next I can work towards implenting first a global garbage collector that is conservative (and because I had done that in vsl before I have useful experience to build on) and then confront the terrors of a generational version!
  * Web site
  * Small improvements to sign operator: sign(x/y) was simplified to sign(y) when sign(x) was known. This is now 1/sign(y), in order to correctly raise an error when y is later set to 0.
  * Another case of integration when modular mode is on that is changed by revision 5144: The result is pi/4, but 1/4 is simplified to 1 after setmod 3.
  * Update regression test which fails since revision 5144. The latter added resimplification after definite integration when the domain was reset during integration. The error that is raised when the commented out input is tried is correct!
  * This has a go at addressing a Macintosh-only bug that was reported some while back but where it first took me a long while to get to where I had a setup that let me reproduce it and even following that some while until I could think of a way to address it. The problem was that a copy of Reduce installed from a binary snapshot failed to start up on a reasonably fresh copy of the Macintosh operating system. When I tracked down what was happending it was that fontconfig could not then find a configuration file, and that led to things that merelly showed up as font-related disasters. On a system where macports has installed all that you need to build Reduce you will naturally have a file /opt/local/fonts/fonts.conf and everything works. So what I do now is that at startup I check if there is a file there or of FONTCONFIG_PATH is already set (which would instruct fontconfig to look somewhere else for fonts.conf). If not then I set FONTCONFIG_PATH to point within that application bundle where I have places a copy of the macports default version of that config file. I hope that makes things start up nicely everywhere while not wrecking more richly configured platforms. My tests using a freshly installed Catalina on virtualbox are encouraging.
  * I hope that this causes 2*2^(-1/2) to display with a \times rather than a %*. This is done at the place where the TeX is rendered rather than where it is generated because anybody who captures generated TeX can hand-edit anything they want to to enhance layout to their taste!
  * The next step with newallocate.cpp. I can now do a cold start of csl and read in compat, extras and compiler. I can start compile!-all and that runs until it has used 8 Mbytes of memory and then fails in a way that I knew would happen (but I did not know how far I would have got ahead of that). I have also done yet another re-work on the support for thread-local values, and HOPE what I have now will prove stable and of adequate performance. So the next step has to be to arrange that when one 8Mbyte hunk of memory is full I just move on to the next, which is what a non-generational GC scheme will do up to the moment that it has half filled-up all memory. Where I can get to now is the point where eventually the first minor GC will happen, well actually to be a bit more precise I am half way towards that!
  * Changed the package rlfi to use an outputhandler. This allows now to also turn on Latex output from within a procedure. It was necessary to make an adjustment to the outputhandler mechanism itself. For the assgnpri slot now all three arguments to assgnpri are passed on (as a list).
  * Replaced the obsolete command varpri with assignpri
  * Updates to the CDE manual and references
  * I think this gets the CSL "--with-conservative" option to where at least on Linux I can start some testing of the allocation part of it - the actual garbage collection part is not yet coded. And right now on Windows it seems to crash abruptly, while even on Linux even though much of the setup code behave when I try to run a read-eval-print loop something gums up. But this still feels like a milestone in terms of what I can now do to debug!
  * PSL : a new file for dumping information from a FASL file: symbols & relocation.
  * scripts/update_revision_history.sh can now be run from any directory, allows to write to another file if given as parameter.
  * Basically CSL incremental changes working towards getting me in a state where I can start to test the new allocation code. I think I am almost there so want this checkin as a safe copy of the current state so I can keep going tomorrow!
  * A recent commit changed eg printf to std::printf everywhere, and adjusted the main header files used while building Reduce to include <cstdio> rather than <stdio.h>. This one follows through by updating the #include statements in a pile of files that are for test, maintenance and demonstration rather than being themselves central for CSL/Reduce. I bet there will still be a few places where all these changes have introduced inconsistency, but this batch of updates will go quite a way to getting things tidy.
  * Some way towards making bits of everything beyond just core CSL/Reduce build with the new more C++ style. There is a bit more to do yet, but this should get somewhere!
  * Lots of changes here. IN case of problems please delete your cslbuild directory, run ./configure again and build everything afresh. SO what does this do? Well nothing that is intended to change behavior, but changes that should modernize the code and make it more robust for the future. Whereas the C++ code for CSL used to include eg <stdio.h> I now make it use <cstdio> which is the more proper C++ variant. To be secure in the use of that uses of library facilities then need either to use namespace-qualified spelling such as std::printf and std::intptr_t or for there to be "using" statements to bring those names into the global namespace. For a few days I had been using the latter, but a diffenrent perspective is that to do so is to pollute the global namespace, and the explicit "std::" prefixes (while ugly!) represent a more secure route. So I have gone through all the C++ source ciode sticking in "std::" prefixes. While doing that there were rather a few cases where I had used names that clashed with library function-names as local variables, and I have tidies those up to remove that small potential for confusion or conflict. These changes have to propagate into the generated C++ files u01.cpp to u60.cpp, so if you just update the code in csl/cslbase you either need to run "make standard-c-code" in some build directory or you could discard all CSL built versions and everything ough to recreate itself neatly. YOu can perhaps see that this is a further step in the incremental adjustment of what started of as C code to be more whole-heartedly C++.
  * Patches to cxx_shims.h to survive on a Macintosh
  * The changes within CSL here were motivated by tidying things up as part of the move towards a conservative GC, but the big re-work here has been in command-line option decoding. This is now much more table driven which I hope will ensure internal consistency. It tends to use C++ std::vector and std::string in a few places such that it doed not need rigid limits on eg the number of symbols that can be predefined on the command line. Also I am moving to use eg <cstdio> rather than <stdio.h>. At present I try to deal with the transition by having a load of mess in cxx_shims.h - mainly that explicitly imports names of library things into the global namespace so that code that uses say printf rather than writing std::printf will work. Whether I have the list of names such that it will survive on all platforms needs checking. I am not aware of a good way to verify that my code does not use names without the std:: prefix... One new capabilty is provided. In the existing versions "-DNAME=VAL" has defined the symbol NAME to have the *string* "VAL" as its value, and this provides a way to pass information from the command line into a running system. Alongside that I now also have "-DD NAME=VAL" which also sets NAME but this time can parse VAL as a symbol or a number (etc) rather than forcing it to string form. This may be useful for passing numeric parameters to code.
  * Document planned improvements for PSL
  * more PSL source code cleanup
  * PSL source code cleanup.
  * reduce-run.el package-name completion, etc.
  * I think my progress on a conservative/concurrent/generational GC has been a bit painfully slow - but I will argue that there are many interactions to think through to get things as I want them to be. This checkin (maybe) gets the allocation code sorted out as far as until it actually has to do a real bit of garbage collection. That includes coping with a scheme that splits up ,memory between threads and that arranges synchronization when GC is called for while trying as best I can to avoid overhead when it is not! I may end up with more lines of commentary than of actual code.
  * reduce-mode.el syntax highlighting
  * Web site: Google custom search details
  * Recognize Mac OS X Catalina. Arrange that if under cygwin there is a case of eg "ln -s /cygdrive/q /q" then absolute paths will be returned as /q/... rather than /cygdrive/q/...
  * reduce-mode.el syntax highlighting
  * Update xcolor package: simplification function previously assumed that its argument is a s.f. with only one term.  No provision for factored forms. Added code for these cases.
  * Reduce manual: minor improvement to xcolor doc.
  * Mostly just dull admin bringing date-stamps on many of the files (but not yet all) more up to date.
  * Correct error in xcolor package: repalce old function call to varpri by assgnpri. Problem discovered by Andrey G. Grozin
  * reduce-mode.el assertion highlighting
  * reduce-mode.el comment statement highlighting
  * This checkin deletes some files that were never used. It fixes a few issues such that new-embedded reduce builds under termux on an Android phone, apart from a need to investigate the "glob()" function. And the code in newallocate.h that is for allocating memory in a multi-threaded world with a potentially conservative and generational garbage collector has the next round of changes: the code sequence is not that long but the number of days of thought and tinkering that have led to its current state is cause for astonishment. So now I need to code up the stuff in allocate.cpp that it delegates to in the harder cases!
  * Web site: switch summary
  * Fix typo in manual for solve
  * misc/dfpart.red
  * REDUCE web site: various minor updates
  * Automatic generation of bibliography at end of manual by bibtex. I updated the Reduce bibliography in the doc/util directory, mainly by looking over URLs and replacing them by a newer version. This is not yet complete, though. A new file manual.bib contains all references from the manual that are not part of the bibl.bib file. Maybe they should be merged int oone file, but manual.bib contains a number of entries that are not specific to Reduce.
  * Two unrelated changes in this revision:
  * Bug fix for problem reported by René Grognard on the reduce-developers list:
  * REDUCE web site: various minor improvements
  * REDUCE web site for small displays
  * The header thread_local.h now uses C++ templates to provied what is in effect    inline thread_local T var; declarations. It allows for older C++ compilers where inline variable declarations are not supported and for cygwin/mingw where naive use of thread_local can have bad performance consequences. It is however a bit clunky - especially as compared against the idealized definition as shown above! I have now also just started merging a summer's worth of thought about storage allocation into newallocate.cpp. That remains a long way from being usable but if I manage to keep going now it will have the benefit of a number of experiments regarding where costs could be unexpectedly (well at least to me!) high, with attempts to work round same.
  * REDUCE web site: add convenience links
  * Add title to top HTML page.
  * REDUCE web site: add a search page.
  * Update a couple of URLs in list of references.
  * Reduce manual: put all references into one bib list at the end instead of one per contributed package. The list of references is still sorted by package (except for duplicate entries which I removed), and the typography is not yet consistent.
  * Set logdir for build process
  * Correct an error in definite integration when rounded is on that resulted in incomplete simplification.
  * Fix a race condition in the startup of threads to perform parallel Karatsuba in arithlib.hpp. This showed up leading to failured on a Macbook while the same tests had run happily on Linux-x86_64, Cygwin64, armv7l and aarch64. An illustration that races in threaded code can be slippery and onlyt show up either occasionally or in a seriously platform-specific way!
  * Package defint: internal operators f1 and f2 conflict with user defined operators of the same name.  Replace occurences of internal operators f1,f2,f31, and f32 by unique names defint!:opf1, etc.
  * Add a regression test file for bug reported in
  * REDUCE web site
  * Remove explicit line break in manual heading.
  * Replace all instances of the sinful $$ by \[  ... \] in specfn.tex and rataprx.tex.
  * Change manual to use unicode (UTF-8 encoding) in HTML version.
  * REDUCE web site
  * sfellipi.red: modifications to the code for the numerical evaluation of the functions theta1 and theta2 so that even with complex values of the nome q and the application of the Jacobi transformation to reduce the magnitude of abs(q), these functions always return values on the principal branch.
  * sfellipi.red: modifications to the code for the numerical evaluation of the functions theta1 and theta2 so that even with complex values of the nome q and the application of the Jacobi transformation to reduce the magnitude of abs(q), these functions always return values on the principal branch.
  * More effort to get shell quoting levels correct for all the mk-snapshots.sh options. Not all have been sorted out yet!
  * REDUCE web site
  * Include documentation of special functions in the manual. Ultimately, these should be moved from the chapter on user contributed packages to the "operator" section.
  * I am trying to get mk-snapshots build either a rpi or an rpi64 package using my rpi4 and the systemd/nspawn stuff. This means I have needed to look at grouping and quoting in mk-snapshots.sh much more carefully. I will need to test/check the version here on all sorts of configurations before I am content, and there is a risk that this will temporarily break snapshot building! I hope not, but intil I have tested who can tell?
  * Hack libedit so that xterm-256color downgrades to xterm before falling back to dumb.
  * Go --enable-widec when configureing libedit just for redfront
  * Documentation for special function packages, to be added to the manual.
  * REDUCE web site
  * REDUCE web site
  * One more attempt to make a redfront binary that will be friendly as between ubunto and fedora!
  * Rename the update_revision_history script to update_revision_history.sh, as all other scripts' names end in .sh
  * Work to get building on Raspberry Pi happier. One messy issue is that on the RPI4 where I can use either 32-bit or 64-bit worlds I use a script /usr/local/bin/uname to shadow /usr/bin/uname. But debuild carefully resets PATH to a sane state.. so here I prepend /usr/local/bin again to restore the behavious I needed. This is also a refresh of the prototype .snapshots configuration file and a change in debianbuild/Makefile also relating to the Rpi4 special need.
  * Fix a stupid type/bungle in previous attempt at a fix.
  * Do the -l:libtinfo.a things for newfront in the hope that that will lead to portable binaries of redfront for the binary distribution.
  * A second attempt regartding Ubuntu vs Fedora and libtinfo. My previous checkin had a test garbled and hence the wrong way round.
  * Add script to update the revision_history.txt file.
  * Try to fix some portability issues. On Scientific Linux it is necessary to install "libatomic". When building on Ubunto libtinfo should be linked statically or else the resulting binary moans (but still works) when launched on Fedora. The changes in newallocate.* are a snapshot of work still very much in progress where each time I take a few days to think I come up with new ideas and variations! They are not expected even to compile!
  * Some corections to the generalised shift rules capturing the periodicity and quasi-periodicity of the theta functions.
  * Use EPS graphics instead of png files for gnerating the HTML version of the manual. This seems to work across different systems and different TeXLive versions.
  * Correct typo in manual.
  * Minor improvement for embedded pictures & math in HTML manual: double resolution and therefore size of pictures
  * Debian package build process: update debian/rules file to not try to run make in a non-existing build directory - this happend when targets clean or distclean were executed, but the build directories did not exist.
  * Minor correction to shell scripts for building documentation in PDF format.
  * Examples of turtle graphics did not show up in the html version of the manual.  Use png versions instead of pdf version when producing HTML manual.
  * Install private versions of tex4ht hyper font files to correct wrong translation of of typewriter font into bold, and of double quote into tilde, see
  * Update Homepage URL in installer package for windows.
  * Another small iteration in newallocate - mostly in the form of comments within newallocate.h. These are4 checked in to keep them safe - I now need to think through my plans some more before I write the code to make them happen.
  * Avoid use of thread_local variables for now.
  * This is an attempt to fix a mess regarding snapshot building. I can not test it untiul I have checked it in, so this is not yet guaranteed!
  * Suppress messages about domain mode being changed when using the mod operator when dmode complex-rounded is in effect.
  * REDUCE web site
  * constime.cpp now tests a bunch of potential schemes for thraed-friendly CONS operations, and I have tried it on cygwin, mingw32, Linux64, Mac and aarch64. The code in newallocate.cpp will now gradually incorporate decisions guided by this. I needed to tidy up a few other files so that a csl build with the conservative options at lest compiles (it is some way from being ready to run!)
  * I would like top hope that I am getting myself back in a state where I will be able to work on a conservative garbage collector and eventually a threaded CSL. This checkin has minor tidying up and tinkering mainly related to that.
  * REDUCE web site
  * REDUCE web site
  * Test code for measuring performance associated with various schemes that might be valuable in a multi-threaded Lisp.
  * Finer control of preprocessing in the new Bezout resultant code.
  * Further progress on --with-win32bit and on making the snapshot builder (by default) only build 64-bit packages.
  * Refresh version of libffi source files.
  * Refresh libffi sources to a newer snapshot, and fix a couple of windows issues regarding 32-bit platforms.
  * Name changes in the new Bezout resultant code for interoperability with PSL. Improved exterior multiplication by fusing addition into the multiplication and use of a finger into the result to reduce the depth of traversals.
  * PSL: a couple of pending changes
  * A general tidy up of the numerical code in sfellip.red and sfellipi.red in the specfn package.
  * PSL for FreeBSD on Intel processors: implement logcount,  add a couple of pending updates. ALL x86 architectures switched to using crlibm for better accuracy of elemental functions.
  * PSL for Linux on x86: implement logcount,  recompile a couple of pending changes
  * PSL for win32: implement logcount,  recompile a couple of pending changes
  * Forgot to checkin some source files in previous commit.
  * PSL: add logcount function to 64 bit intel systems.      correct small typo in LAP.
  * Correction of a rule for the Lerch_phi function.
  * Reworked implementation of the Bezout resultant. It uses the logcount function for parity calculation. This function is currently only available in CSL. The code is written being very light on stack use. It is completely untested, and not yet hooked into the general resultant code. The commit is mainly for giving it a safe place.
  * Further fix regarding missing out 32-bit Windows builds for snapshots.
  * PSL for macintel64: correct trap handling for terminal interrupt (forgot to pop item off the stack)
  * Trap handling in macintel64 PSL: correct subtypes for SIGFPE.
  * PSL for macintel64: Update glue code for trap handler, recompile debug.sl.
  * One more try re winbuild64
  * Still debugging winbuild64
  * Check-in winbuild64 updates so that I can check them. The script in here may fetch stuff from the subversion repository to ensure that it is up to date so if I test if when it is not fully checked in I may get odd effects!
  * logcount for CSL implemented - it counts the set bits in an integer if given a positive input, or the zero bits if given a negative value (working in terms of a 2s complement representation).
  * Fixes so that CSL compiles without C++ moans about ambiguity on the Raspberry pi. Cases such as "qcount(v) += 1;" and "stream_file(x)==NULL" complained about ambiguity brought about by the std::atomic<T> wrappers. Explicit casts that force the values concerned to be plain old data resolve matters. In a while I will need to check on the Macintosh to see if clang there has further complaints!
  * I hope this set of changes represents what I should have put in last time if I had understood how much overhead memory fences could introduce into code. It make CONS cells and symbol/vector header worsd in the heap atomic, but uses memory_order_relaxed when accessing them. While making this adjustment I have changes the names of the accessors used at the C++ level from qcar(.) to just car(.) [and similarly for cdr], and rather than those operations returning reference values (and so being usable in an lvalue context) I now have separate operations liks setcar, setcdr, setheader, setvalue. SOme may feel that this makes the code a little uglier, but the benefit is that now those access methods can all take an additional argument to override the memory_order style of access. And doing this also keeps me further from some C++ type ambiguities that seem to arise if I use versions that return references to std::atomic<T> values. My hope is that this claws back much of the performance I lost in a recent checkin. At present the changes have been tested on cygwin/windows but once checked in I can try on Linux and Macintosh and also a Raspberry pi - so those extra tests may turn up further fixes that I will need to install. The changes here mean that for CSL it will be essential to recreate u01.cpp to u60.cpp.
  * Correct an error in the limits package that caused calling car or cdr on an atom.  The error occured in an errorset and was therefore not visible at toplevel.
  * Minor corrections to PSL kernel for 64bit Macs, use crlibm for floating point computations.
  * Minor update to PSL printing code to make line breaks at whitespace behave like in CSL.  Update for 64bit Intel on Mac, Windows and Linux, other architectures to follow.
  * The previous checkin made data in the CSL heap atomic, but doing slow led to fairly severe slowdown. This does not fix it all by any means, but makes a start at a recovery, eg by arranging that in a CONS operation the memory writes that fill in CAR and CDR are not forces to be sequentially consistent wrt each other, just that after they have happened that the fact that they have will be visible to other threads. I really need to understand just what is necessary in memory_order_xxx specifications to make everything nice! I am NOT going to put dramatic effort into recovering the full speed that CSL used to have because I have other aspects of the code to work on but mainly because I need to read about and think about and understand what I am doing here somewhat carefully before I rush into misplaced ideas about fixes.
  * Forogt to include update to regression test file in last commit.
  * Update test files and test logs for int/algint.
  * If you configure and build Reduce on a 64-bit windows machine running from the 64-bit version of cygwin then unless you specify --with-win32bit you should now only get 64-bit binaries created. There will still be several:   (1) a native windows one suitable for double clicking on that does NOT       create or remain attached to a console;   (2) A native windows version that is linked as a console mode application;   (3) A version that runs under cygwin64, either as a console application       or using X11 for its GUI.
  * Add regression test file for problem with sub(...,df(...)) reported by Jarmo Hietarinta
  * A file omitted from the previous checkin.
  * sfellipi.red: minor additions to allow the calculaion the nome q associated with the modulus k of a Jacobi elliptic function.
  * Try to get Mac fonts a bit better under control.
  * Substantial revisions and corrections to elliptic function modules of the the Special Function package specfn.
  * A change that may fix the issue when gentran is invoked asking for a line- length over 80. It still imposes an upper limit at around 300. Also a small enhancement to the scheme that makes CSL Make messages a bit less cryptic.
  * This checkin should fix a CSL bug that was visible via roots.tst. The issue was that adding two integers where one was a negative bignum and the other a positive fixnum such that the sum should have been a fixnum could yield a result represented as a bignum (on 64-bit platforms). In a lot of cases perhaps amazingly this bad representation sorted itself out in later arithmetic, but the crashing case in the roots test was where a badly represeted value got combined with something else leaving a zero result that was still stored as a bignum, and the inorm function looked for bits in the apparent bignum but did not find any and got very upset. The fix was merely sticking in an extra cast at a critical point. To check against related issues I now enable some number-format-checking code in any debug build. I have also adjusted the Makefile.am for CSL so that the "CXX" messages get prefixed with the architecture in use there. This may be useful when parallel makes are in play. The code to turn Lisp into C++ has been adjusted such that the generated C++ leads to fewer warning messages from the C++ compiler. The code in arithlib.hpp has been worked on so that it now compiles on 32 bit platforms. Previously the fact that intptr_t is 32-bit in such cases led to case where widending that to int64_t was ambiguous. I also had some plain incorrect code in (mostly) the generic comparison code where function overloading was not set up properly.
  * Fix for bug report 103: "catastrophic error"  https://sourceforge.net/p/reduce-algebra/bugs/103/ Make sure that (abs ...) kernel is unique in procedure radf.
  * Fix a bug in safe!-fp!-times and safe!-fp!-quot for PSL.
  * Small correction to an old test of floating point computations.
  * Correct a couple of typos in comments
  * Merge (or try to merge) changes to winbuild into winbuild64
  * Fixes re niilsegmentbase, where my testing a few days ago had been on a platform which supported C++17 and had mosty been using newallocate.cpp not the code in csl.cpp. At least the version here seems to build on a Mac. Apologies for bugs left in the repository!
  * CSL: newallocate.cpp and friends now have some really rather messy and horrid code that is intended to arrange that when one thread wants to garbage collect all others will (soonish) also think they do, and every thread flushes register variables to the stack, then all but one suspend themselves. When all threads have synchronized like this one of them continues to where it will be able to perform genuins garbage collection and complete each of the interrupted allocation attempts. I have several aspects of this that are known to be incomplete still (and may lead to rece conditions etc). The ones to mention here are (a) starting up a new mutator thread while other threads are running, and in particular if it happens that the running threads are in the process of synchronizing with each other ready for garbage collection. (b) The mirror of (a), ie if a thread terminates while other threads are busy. (c) proper support for activities that can block, such as reading from the keyboard, claiming a mutex etc. In such situations such a thread might not be in a position to do any active synchronization with the others to enable garbage collection. As with most synchronization activities it can be hard to get everything right and sometimes a solution adopted (even if it works!) may be more complicated than needbe. So if any people are experts in concurrency and can show me how to have respectably portable code that is better that whaty I have sketched here I hope they will tell me. The inner GC activity has not been coded at all yet and so this stuff has not been tested at all. I will be able to put in code that will exercise it by setting up a scheme as for one to cope with pinned data and then faking pinned items in my nursery page every few kilobytes. That would lead to entry to the GC code rather frequently, and rather that having to do the hard task of collecting garbage all I woul need to do would be to advance fringe/limit registers beyond the pinned item.
  * REDUCE on Common Lisp now runs on Linux
  * CSL: Now so that I can investigate thread sync when GC is called for I have alloctest such that only a modest amount of space is left for the threads to work in. When that is full the system will abort, but that is at the point where I need to install the "stop the world" code. And also looking forward I have a draft fragment of code to encapsulate shared activity and get all relevant data on the stack, with thread-specific information about where each chunk of stack lives.
  * CSL: With alloctest I can now dor a first few conses using my lock-free allocator in newallocate.cpp. In some sense this is an amazing triumph, but in another it is not because several of the harder aspects of all of this have not been addressed at all. These are (a) arranging that all threads come together when a page of memory becomes full and synchronize ready for garbage collection, (b) Handling cases where one thread is blocked (eg by an IO operation or a semaphore) and so will not syncronize nicely (!), (c) arrangement for allocation around pinned items rather than just up to the end of big blocks of memory. And of course the whole of actual garbage collection! But again the idea here is to provide a test framework for moving forward on those issues.
  * This uses a fake version of CONS and then using two threads it builds trees and then uses a crude checksum scheme to see if they are - at the end - in the state they were expected to be. The idea is to turn the consistency checks into something quieter and more automatic and then to direct the consing operation at code from newallocate.cpp with the test eventually triggering garbage collections.Because the two threads will not be keepin in precise step with one another this may provide an opportunity to verify a bit of the synchronization that I will need when I have to stop the world.
  * CSL: alloctest new compoiles and links - it does not actually do anything but now I can start building code in it to activate newallocate.cpp.
  * CSL: just another check-in along the way. I now have a file alloctest.cpp and my new planned pathway is to link newallocate.cpp with a test framework that I can build in that so that I can start checking bits of its behaviour without the extra complexity of all of the rest of CSL. Still not in a state where things even compile!
  * CSL: just checking in newallocate.cpp to keep a bunch of minor edits that are just steps along the way safe. There may be a description of my plans for sequencing my work towards a conservative GC to try to encourage and steer me a bit, but this code will still not compile yet.
  * Excalc: Fix for a problem with defining a coframe where the coordinates are indexed variables.
  * Put back some double-quote marks in reduce.iss.in
  * CSL: in winbuild this MAY now put subsidiary executables in the reduce.resources directory and launch them from there, and in doing so cause less worry for some antivirus software. Not yet tested!!
  * Modification to heugcd.red
  * Minor correction to tex input file.
  * CSL: winbuild. This tries putting the various variants of Reduce in a sub-directory rather than packing them all in as part of a single executable. I have not changes the packing scipt that builds the installer to collect just what is needed (yet). This may need a little testing and checking before4 it can be let loose on the world (as well as the installer-building stuff being adapted to include the relevant sub-files!).
  * CSL: newallocate.cpp now compiles down as far as the line containing "//@@@@@" that marks how far I have got with it. Getting to this stage has involved me in several iterations of correcting glitches and typos etc!
  * CSL: Two things that are intended to be forward-looking. I have put in calls to a function "write_barrier()" in places where RPLACx style operations are used such that they might create up-pointers. The code will need surveying carefully to ensure that I have caught every such place! At present for normal CSL the function is make inline as an empty function and so should compile into no extra code, but in the future conservative/generational version it will do something! Then theer were some places in evalN.cpp where I needed to keep working values safe in list-bases, so I pushed them on the Lisp stack and then set up #define statements so i could use simple names for them. As part of a transitio nto being more C++ish I have replaced some of these cases with use of references. Some have been left as they are when the scope of the specially-handled values runs across two or more functions. I still want to tidy that up but it will be messier! A few incremental additions to what I am doing in newallocate.cpp. The main work here has to some extent been me distracting myself from the next messy step there.
  * CSL: general code added to newallocate.cpp to start support for processing ambiguous pointers and marging items as pinned. A bit of tidying up in arithlib to exploit C++17 inline variables if that capability is supported by the C++ compoiler in use, with a fallback to an alternative that is probably a little less efficient.
  * CSL: there is now a configuration option --enable-conservative and files newallocate.cpp and newcslgc.cpp that are there to make it easier for me to work towards a new storage allocation and management model. The current state is that the files for that new version will not even compile, and there is a serious amount of re-work needed before they could possibly be in a viable state! I have started looking at this development several times before and so far I have stalled part way through each time with indecision about details and pain in getting the coding in place, so I hope that the previous attempts have now put me in a place where I understand what I want to do and have a better plan! There are comments towards the top of newallocate.cpp that explain my current thoughts but there are so many intertwined aspects of the whole re-work that what I say there is not liable to be the final word. It will be some time before I have anything that can really be tested! So one of the challenges I face first is to plan the order in which I start to re-work things.
  * CSL: The current version of arithtest.lsp now runs to completion, which is of course very encouraging. But if you look in the files cslbase/arith-*.cpp you will find a LOT of places where there are "#pragma message" remarks to remind me of unfinished business, piles of little functions currently defined as something like 'abort("not coded yet");' and more that have place-holders but eg treatment of rounding or overflow will not be of the very highest quality. And there are parts of the arithmetic code that I have not even implemented yet (eg modular arithmetic) far less tested. Rational and complex numbers come into that category somewhat too, but they are less pressing in a Reduce context. So my next task is to support the modular arithmetic functions, and then despite the gaps in arithmetic support I should probably look at garbage collection so that this new arithmetic can be deployed and tested with the whole or Reduce and/or on much more extensive test scripts than the one that I use so far. At least being able to test by comparing and using the existing code as a reference base provides a good foundation for getting things at least basically correct!
  * Copy latest changes to winbuild over to winbuild64.
  * Minor update to windows build process: remove xmpl directory, put links to documentation into Startmenü
  * REDUCE on Common Lisp
  * CSL: I hope this improved the within-CSL history mechanism somewhat. Note that it arranges that if the system is compiled without optimization (eg for debugging) that a lof of activity related to history goes to a file called debug.log in the current directory (or failing that in /tmp).
  * Continuation of previous checkin.
  * CSL: THis tries making some files that are intended to be common as between cslcase and FOX into symbolic links so there will only be one version in the file system and so there will no longer be the possibility of the copies getting out of step.
  * CSL: The changes here to do not fix the issues I had with comparing floating point values against bignums, but it puts in some more infrastructure for both regular doubles and for float128_t that I will now be able to use to deal with that.
  * Minor edit: remove commented out code from simp.red
  * REDUCE on Common Lisp
  * CSL: Small (but still important!) fixes to mixed-mode arithmetic - eg an addition between a float and bignum could get an incorrect answer because of a simple typo. The latest issue raise by the comparison betwene old and new arithmetic is   (greaterp -2.6192330213011091e+48   -2619233021301109266795956710703203809530768838431) = t   (newgreaterp -2.6192330213011091e+48   -2619233021301109266795956710703203809530768838431) = nil and that looks much more interesting as an edge case! Specifically if you float the bignum you get exactly the FP value (so greaterp would be false) bit if you convert the float to a bignum (exactly) you get -2619233021301109144426466241840614288339763200000 [I believe!] which is not equal to the bignum so the comparison can be as shown. That means that cases like this call for jolly extra effort! Had I mentioned cases like (times (expt 10 400) 1.0e-200) in these checkin messages - my code wants to arrange that that computes 1.0e200 without there being an overflow trying to convert 10^400 to a float. I am doing that in the new arithmetic code. But I am at the very least at present not intending to go to the extreme of having a big-integer that is bigger than MAX_DOUBLE surviving subtraction of a floating value that cancels enough to bring the resylt into range. Though I probably should if I want to claim that I have a high quality of implementation! Issues like these mean that so many cases in arithmetic need special handling.
  * CSL: I had introduced a bug whereby (sub1 (expt 2 256)) was computed incorrectly with borrows not getting properly propagated. I hope that is now fixed though it took me an utterly ridiculous amount of time to find it. I have put in the new arithmetic stuff some stubs for 2-argument calls to floor, ceiling, truncate, ffloor, fceiling and ftruncate. At present these do not do what they are intended to - they are just there so I have places in the code to work on them. Looking at the effort that will involve re-kindles my concern that those who drew up the Common Lisp specification went way over the top supporting things that almost nobody will use but that soak up much time for implementers and support people, and which result in a Lisp that is bulkier and probably overall slower than it would otherwise be. The comparisons between old and new arithmatic now show a first divergence when adding a large-values negative float to an integer.
  * CSL: Newer releases of g++ had further enhanced their optimization capability, taking advantages of more places where signe dinteger arithmetic on initially positive values overflowed into the carry bit is officially undefined - and so they are allowed to rely on it never happening and save code. However in CSL there was at least one new place (in the code to print negative bignums) where this overflw could be triggered and where the new g++ optimizations meanst that the code printed bad results when compiled with optimization enabled - but not when build for debugging! I have made some attempt to look for other places where the same might arise and put in some ugly casts to uint32_t (because arithmetic operations on unsigned integers have to behave "the way and old fashioned C programmer would expect". At present I do not know a systematic way to make the code safe against such effects -- and even more certainly I do not know a neat and natural way. However it makes me glad that I am working on replacing the old CSL bignum code - because that code worked with 31-bit digits in 32-bit words precisely so that addition would overflow into the sign bit where it would be easy to notice!
  * CSL: Final commit for Sunday night. A large number of extra bits of arithmetic support filled in. Code now first detects an error when it gets to adding lartge-valued negative float to a more modest sized positive bignum. But WHEEEEE it may look as if the error is in the old existing code rather than my new stuff!!!!!!!!! That wiull give me something to chase, and if it is indeed a bif then it has been there unreported for very many years.
  * CSL: more work on arith-*.cpp. I have not put in "#pragma message" to mark where more work is needed - and there are a couple of hundred instances but many are easy. The testing is now (I think) looking pretty good on integer caculations and the first smask is because remainder involving floating point values is not coded - and so a lot of the rest of the floating point testing is not reached.
  * CSL: kust continuing to fill in cases in the new aritmetic code, and detect and fix the odd glitch.
  * CSL: arithtest.lsp shows basic good bahaviour for new vs old bignums on plus, minus, times and comparisons. It shows that I have not yet coded up the links into division and remainder. I also have trouble later in the test with the floor function applied to a negative bignum, and I think that is "just" another case where I have left basically unfinished code. I am not testing rationals, complexes or odd-precision floats at all yet and there will be plenty to do to get them fully supported!
  * REDUCE on Common Lisp
  * CSL: When built with --with-arithlib I can now try out arithtest.lsp to compare results from existing and new arithmetic across a range of test values. In this checking I still see a failure on subtraction, and on the way to this I saw FLOAT on a bignum yielding a result differently rounded from the existing CSL one. But I view it as representing real progress that I am now able to start some sort of fairly systematic testing so I can spot and fix the places where I had left in unfinished code or where I had just plain made mistakes.
  * CSL: more work on the arithlib experiment, with much of the modular arithmetic support now coded (but not yet modular-expt, -quotient or -reciprocal). But not tested - the fact that it compiles is a start. The tltime.cpp test/demonstration has also been tidied up a bit, and I am about to move to using that technology in arithlib.hpp in the rather small number of cases where it needs thread-local storage (eg for the current modulus used with modular arithmetic).
  * A further set of updates to the CSL work that goes towards new bignum arithmetic. I think this now provides some sort of place-holder for every function I think CSL will need.. but at present the modular arithmetic functions just raise an error and the "fast" arithmetic (eg IPLUS and friends) does just what the regular variety does. But hey it is good to keep this stuff safe as it develops. The top-level configure.ac has been updates to avoid mentioning Mac OS 10.9, and scripts/macports-setup.sh now does not fetch some packages that are really not needed by most people.
  * Code to look at the cost of thread_local access under Cygwin and Mingw. It looks as if MSVC leads to low overhead, Linux to almost none and the Mac to "not too bad", but Cygwin and Mingw use an "emutls" scheme from gcc that can be pretty costly if a short and otherwise inexpensive leaf procedure references thread_local values.
  * This is a significantly updated version of the script that sets up macports. It tries to arrange that libraries that will end up linked into Reduce get built from source with a macosx_deployment_targer of 10.11 so that Reduce binaries can be distributes, but then it fetches things that should not end up redistributed in binary mode where macports supports that, and by doing so it can save a LOT of time. As part of the way it deals with the deployment target issue it may create a directory $HOME/.macports with its own macports.conf inside, and that sets the 10.11 compatibility. If your system-wide macport.conf already sets a deployment_target it doe snot do that. If you already have a .macports/macports.conf that clashes it tells you and stops. If you have other ports beyond the Reduce ones that you use and that can only be built from source and that can not tolerate backwards comnpatibility you may need to delete $HOME/macports to install them. I hope that does not happen a lot! The macports install script also has an option "--minimal" that further reduces its cost by only installing things that are needed for a rather basic local build of Reduce. So after an upgrade to Xcode (say) the sequence   sudo port uninstall installed   sudo scripts/macport*.sh --minimal should get things back in step in less than 30 minutes (maybe!). You can run just sudo scripts/macport*.sh without the --minimal flag later to install everything else - perhaps in the background. This first checkin of this may of course have glitches, so please report any that you encounter (for choice with a proposed neat fix!)
  * change autoload to support lisp functions with up to 9 arguments.
  * Lower-case REDUCE on Common Lisp
  * Another step at putting in code for the new bignum stuff - which I will keep explaining that it is incomplete in many many ways so far, and even when of itself it is all in there it will not work properly until I have get a conservative garbage collector goin in CSL! But this checkin adds in a framework of support for greaterp, lessp etc and has made enough changes that I want it put somewhere safe!
  * Update svn:ignore property of toplevel directory to include TAGS and .gdb_history.
  * Correction regarding reporting CPU time via the time() function on CSL.
  * There is a now a ./configure option "--with-arithlib" to enable the development version along that path (please note it is a LONG way from being able to do anything workable - it is there so I can hack at it). Then if that is enabled there is a new number syntax in Reduce 0Znnn that created "new" numbers not regular ones in that case - again just for my private testing. New style big-numbers can now be printed (but not yet in hex or octal). I tried timing addition in new vs old style but to get times long enough to record reliably involved using up enough memory to trigger garbage collection which will fail with new bignums around! There is a new CSL function "walltime" which reports elapsed time in milliseconds since the system started.
  * Minor correction to pgauss test file
  * Bump MACOSX_DEPLOYMENT_TARGET to 10.11 because some macports that I wanted to install so I could compile Reduce failed to do so with 10.10 compatibility preserved.
  * Fixes relevant when building the CSL version on a 32-bit system - or to be more precise on a system that does not support a 128-bit integer data-type.
  * Correct a type reported by Alan Barnes (thank you!)
  * I had forgotten to check in arith-setup.cpp...
  * It may be that (newplus ..) [but no other new arithmetic functions] now works, except that because the type NEW_BIGNUM is not recognized by the printing code it is maybe hard to tell. But I can now put in the printing support and then multiplication and then I can do some proper performance comparisons!
  * Another step towards use of arithlib.hpp, in that if CSL is configured with --with-arithlib the code now builds something that starts to have functions like (newplus 2 2) in there (see arith-setup.cpp for a list!). At the moment these all fail for MULTIPLE reasons - eg because the low level packing of fixnums and bignums has not been brought into line as between csl and arithlib. But the result is that I have had a first opportunity to try the new dispatch code and observe some of the mistakes currently burried in it! And yay the Reduce revision numbers are reaching another milestone.
  * Further job wrt arithlib.hpp to try to ensure that it can be included from multiple compilation units without that causing clashing repeat defintions, and so that it should be usable from several separate threads without those leading to conflict. Also it has now adjusted its namespace scheme so that the namespace "arithlib" is only lightyly populated with the things that I maybe expect a C++ user who wants to use the type Bignum will need, while "arithlib_lowlevel" exports classes each of which contain an "op" method that can be of use to somebody wanting to work at the level of the data structures. I am liable to need to add more exported method names to both those namespaces as I work with the code, but they represent a good start to separating public from internal code. The code in cslbase arith-plus.cpp and friends compiles and links, but while the code for addition is reasonably worked through the rest is basically copies of that and so does not do what it will eventually need to. However because (eg) adding two rational numbers does multiplication, division and GCD operations and all sorts of things use conversions to floating point I need at least dummy versions of those operations before I can link and hence start testing anything at all. My plan is now to do enough so that I can activate and test some of the new stuff from within CSL as a parallel arithmetic package to the current one. The process of filling in all the polymorphic variants of all the operations that I have will take an AGE.
  * If you are on a 64-bit platform and intptr_t is not the same as either int64_t or uint64_t it seems it may have difficulty deciding which one of those to widen to, and that can lead to a C++ moan about ambiguity. So here I put in a couple of explicit casts to force the issue.
  * I hope at least that this is again a stable versio nof arithlib.hpp. The Makefile in csl/cslbase now has recipies to run arithtest which tries to test it (and also compares multiplication times against gmp, which sets a tough challenge for anybody concerned about performance) and time-arith which has a go at seeing how the speed of arithlib might stand up against the existing CSL big-number code. And arithlib has been tidied up somewhat by labelling a few more things "const" and worrying about its thread-safety. Well I still need to adjust the thread safety of the Karatsuba code when used on huge numbers!
  * Beware that this checkin of arithlib.hpp will NOT WORK when asked to multiply large numbers, because the parallel Karatsuba code is not finished off. But the framework for it is there and I have looked through the code as a whole to try to verify that it will be thread-safe. And MOST of the parallel Karatsuba is now present - I think it just needs finishing off.
  * One bug and 2 'features' associated with the heuristic GCD algorithm corrected: (heugcd.red) replace the global ee by !!ee
  * A version of arithlib.hpp that is in transition towards using parallel decomposition to use three threads to do the top level part of Karatsuba with concurrency. Three things here - some code that shows how I will create threads and organize synchronization, and adaptation of the bigmultiply() function to separate out the top level of Karatsuba when operands are large enough, and a chance to the implementation of bigsquare (and hence bigpower) so that for large enough inputs that too uses Karatsuba.
  * REDUCE on Common Lisp
  * Yet more work in the CSL move towards arithlib.hpp, together with timefloat.sh which is a crude investigation as to whether it is liable to be worthwhile.
  * Substantial changes to the rataprx package.
  * CSL: arith-plus.cpp (using dispatch.h) compiles and has code for every mix of arithmetic types that might need to be added together. Of course none have been tested yet!
  * Check in the newer arithmetic dispatch code for CSL that uses C++ templates rather than C #define macros. STill a lot of work to do before this will be usable!
  * A further step towards when I hope to be able to try out use of arithlib.hpp as part of CSL. The arithmetic dispatch code is getting better.
  * A few steps in arith-plus.cpp and arithlib.hpp towards a potential eventual transition to a new arithmetic library.
  * A correction related to software 128-bit integer support.
  * Speed up the crack/v3tools test
  * redcsl.bat
  * IF you had a 64-bit machine where the C compiler did not support any sort of 128-bit arithmetic (as it is entitles to, since 128-bit integers go beyond the standards) what I might describe as oddities in the uint64_t software support led eg (int64_t)(-1) to end up as the value 0xffffffffffffffff rather than 0xffffffffffffffffffffffffffffffff. This naturally had bad consequences. THis checkin here is intended to fix those.
  * Fix a typo.
  * Updates to new-embedded so that things build on cygwin64 and macintosh and thet should on 64-bit Linux too.  See the README files which has been updated somewhat.
  * This continues the process of moving to more idiomatic C++ with full adoption of [[noreturn]] rather than making that wrapped up in a #define. Also gets new-embedded workable again.
  * iI had a memcpy with the args in the wrong odre when setting up terminal characteristics. That messed up '\n' -> CRLF mapping for output on Linux (and related) platforms. Ugh.
  * In the case where cfmakeraw was available I had put the terminal into raw output mode where I did not want to. With that fixed (and with a load more calls to fflush) I hope that character placement in output will be greatly improved in console-mode CSL.
  * Another try at SoftFloat-3a
  * First fixes following yesterday's big checkin. In an over-optimistic manner I had removed SoftFloat-3a from subversion even though I was in fact still using it! And when CSL generated C++ code in generated-c/u*.cpp it was including information from an incorrect copy of a header file, also leading to trouble.
  * This is a big - and hence somewhat risk - set of updates. It beings in what I have been doing to CSL over some while. I will try to list some of the things done: (1) Treatment of ^C and ^G and general handling of the terminal/console has been worked over some more. I had checked in some changes in that area a while back - what I have here is (I hope) better considered. It may even work a bit better. (2) The code has had more updates to make it use C++ styles and idioms. Well it is not really wholeheartedly there yet, but a bunch of the changes are in that direction, including addressing language and library features that are now deprecated or at least have been superceded by clearly nicer versions. (3) I used to aghonize about potential overflow if the timer data-type clock_t was only 32-bits wide. Timer support has been reviewed to avoid that misery. (4) There is a newer version of the SoftFloat library. I include it here but do not yet use it. But over the coming while I should migrate to use it. (5) I have put in a file arithlib.hpp which is my more recent big integer library using 64-bit digits rather than the 31-bit digits that existing CSL uses. I intend to try migrating to it in the hope of a performance boost. (6) There are a bunch of smaller adjustments, spelling corrections, fixes and oddments.
  * Reduce manual: added documentation of contributed package CALI.
  * Reduce manual: add description of qhull package, minor improvement for bibliography.
  * Reduce manual: add documentation of trigd.
  * Reduce package sstools: clean up line endings, correct a couple of typos.
  * Minor update, use lispeval instead of eval.
  * REDUCE on Common Lisp
  * Expanding inline functions with `on defn'
  * Change global variables in SPDE to fluid, as this causes compiler warnings/error if these variable names are used elsewhere as prog or lambda variables.
  * Correct error in nested sub with df, discovered by Andrey G. Grozin.
  * Forgot to include one file in previous commit.
  * Correct typo in compiler for AMD64 architecture.
  * PSL for armv6: add compiled fasl files which where not included in last commit.
  * PSL for armv6: Rewrote function to determine whether an address is a return address from a subroutine call. Add compiled fasl files. Minor source code change.
  * REDUCE on Common Lisp (continued)
  * REDUCE on Common Lisp
  * Add switch CF_TAYLOR to list of reserved identifiers in appendix of the manual.
  * Updates to the manual pages to document the new switch CF_TAYLOR in package RATAPRX. Removed a longstanding, but misleading use of "truncated" in manual pages relating to the TPS package replacing it with "extendible".
  * contfrac.red: General clean-up and restructuring of the algebraic mode code. Also added the option of using the TPS package for generatingthe power series necessary. This is controlled by a new switch CF_TAYLOR which is off by default. Improved the handling of functions with poles at the origin and fixed a bug which caused the CFRAC code to fail in some cases where the power series expansion was sparse, for example CFRAC(1-cos(x^12), x, 10).
  * Forgot to include csl/fox/CHANGED in previous commit.
  * Another small bug in printing of CSL output; after the following input
  * Treat jlisp similar to vsl: set lose flag only for a few functions
  * Put back m4 directory accidentally removed in previous checkin.
  * Fix for the printing issue of a recent bug report - thanks to Rainer for this.
  * This include <cstdlib> as well as <stdlib.h>. Why? Well C++ has tended to have an ambiguity about whether parts of the standard library will be available as unqualified names or only in the std:: namespace, with behaviour not being guaranteed consistent across implementations. One response is to put a "using namespace std" somewhere at the top of ones code, but I see plenty of comments that that should be viewed as bad style. So the three options available seem to be (1) using namespace std; [bad style, and I will not expand on that here] (2) using namespace std::cout; and the same for each name to be imported.     [tedious in the extreme] (3) Use the fully written out name std::cout every time. [unambiguous,     a bit clunky but maybe safest?] (4) rely on your C++ compiler allowing you to use either cout or std::cout     and hope things do not change. [not a safe long term solution!] This is then all related to the use of <stdio.h> vs <cstdio>, and the issue arises for all the other C headers and for names other than cout. I had written std::abort() in some patches to FOX expecting that to be safe, and it had compiled for me under several different C++ compilers, but then others found that some older compilers then failed when I had not #included <cstdlib> and the code failed to compile. Woe is me and I rather believe that almost all of the FOX library is following path (4) above. I am not really enough of a C++ expert to be certain about all this, so if somebody knows better I hope they will put me right!
  * Put *.gif files into a Mac bundle. The documentation available via that option is now somewhat outdated! But it may still be convenient for some.
  * Further fixes (I hope) to CSL mainly to do with terminal handling. The one I found most astonushing was an apparent issue with a call that went freopen("conout$", "w+", stdout) that I believe used to work but was now apparently failing (for security-check reasons?) meaning that a console mode Windows version was failing to deliver any output to the console! As with previons recent checkins I hope this has got close to completion, but I need to test on Linux and Macintosh (at least) before I am fully confident, and checking my changes in provides the neatest way to have a clear-cut version for me to test. Ahh oops - input on console mode Windows is still not OK when launched from cmd.com, so I have at least one more round to go.
  * Merge changes to winbuild from previous revision into winbuild64.
  * Small improvements to winbuild process:  Include global subversion revision into package version string  Force CRLF lineendings in Windows batch files.  Set default directory %USERPROFILE%\Documents in Windows shortcuts, so that people can write to the current directory.
  * Get rid of an unwanted bit of trace printing I had put in while debugging but had not cleaned up before the previous checkin!
  * Another flurry of CSL changes. First I respond to the fact that C++17 deprecates std::uncaught_exceptions in favour of std::uncaught_exceptions (note the plural) that had not previously been available. g++ tends to moan loudly and repeatedly if something deprecated is used, and that is a distraction at the very least. And it is expected that C++20 will remove std::uncaught_exception leading to failure not just noises. So I have got rid of the checking code where I used that! winbuild64 is a start at a variant on winbuild to be used to make 64-bit only Windows distribution packages. It is very much work in progress so far. I also re-arranges code in cslbase/arith.h to reduce the tendancy of g++ to produce warning messages that I did not view as reflecting errors.
  * Update the Fox "CHANGED" file to comment on recent changes and arrange that the definition og myabort is labelled NORETURN for consistency with its declaration. I need to do test-builds everywhere in case moving up to use of C++17 breaks things where the new C++ standard is stricter than previous ones - I should have fixed the issue about "register" qualification of variables but until I try on both g++ and clang I should remain twitchy about other possibilities!
  * The new version of termed.cpp requires at least C++11 so I have updated the FOX configure script to insist on this. While doing so I updated the autoconf macro that checks for C++ variants so it is up to date and make the body of CSL build with a C++17 compiler if one is available. This change was partly triggered by the fact that the macintosh compiler does not support C++11 by default...
  * Some of the issues that plagued the previous checkin arose at end of run when the terminal-management code was being tidied up. I had not been sufficiently careful about avoiding tidying up when (for instance) terminal editing had not been enabled. I hope this version is better behaved but it needs more checking.
  * This fixes some glitches missed out in previous checkin. And also these days g++ moans when I try to catch exceptions by value (well when it thinks they are polymorphic) so I now use catching by reference and that calms the warning messages down. I have also deleted soem trace output I had in there when trying to speed up the GUI handling of large output expressions.
  * I have just had a real mess-up with CSL. It turned out that I had been making updates in two places, and a recent checkin managed to merge (in a messed up way) fragments of each. The changes focus on the file termed.cpp. The issues addressed are better detection of ^C, input history that persists from one run to the next and history that keeps all input lines up to a ";" together (well it is not QUITE as simple as that) rather than having each individual line up to ENTER recorded individually. While looking to fix something else I ended up with a version of the file with a hideous mix, but with parts of stuff I felt were what I wanted in several different variants. Ugh! I hope this at least almost puts things back the way I want! Apologies.
  * Add reduce.sty to debian and Windows builds. Add libncurses5-dev as build dependency for debian.
  * Further correction to incomplete or botched version of previous FOX updates.
  * Remove iuse of "register" which will not be C++17 valid.
  * A missing "#" character caused trouble in cslbase/machine.h.
  * This checkin containes changes that are intended to let the CSL system build and run on platforms where alignof(max_align_t)<8, and in fact furthermore where malloc() might return an address that is not aligned at a multiple of 8. I need to check this in as the easiest way for me to be able to get a copy of the changes to a 32-bit FreeBSD13 system which at least suffers from the first issue.
  * PSL for armv6: comp/armv6/armv6-cmac.sl:  The anyreg function for the "Memory" expression used to clobber temp t2 register when referencing a fluid. Force it to use reg t3 instead. In opencode sequences called via *linke, replace a final *Call by *JCall, to protect against wrong value in link register lr. Rewrite wdivide opencode to call wquotient.
  * Protect against invalid input in cantens package indexrange:  If spaces around the .. operator are missing, the input is parsed wrong and results in an attempt to take the cdr of an atom.
  * Manually remove spurious underscore character on titlepage in HTML version of manual. Update URL on titlepage.
  * Incorporate recent updates to excalc documentation to manual + some cleanup of tex code.
  * Excalc: Add the killing_vector cammand to the documentation.
  * Change simplification rule for abs(x)^n to return x^n when x is real and n is even (https://sourceforge.net/p/reduce-algebra/bugs/96/). Update rataprx test log file and regression tests.
  * Excalc: provide an example for Killing vectors in the test file. Correct a typo.
  * REDUCE on Common Lisp: progress with noncore packages
  * Excalc: Add a command to calculate the pde's that determine Killing vectors.
  * PSL for armv6: more corrections for arithmetic.
  * PSL for armv6: corrections for bignum arithmetic.
  * PSL for armv6: correct code generation for 4-operand multiplication instructions (operand order was wrong).
  * PSL for armv6: support for directly addressing the value cell of a fluid variable.
  * Minor correction to crack/crtrafo.red
  * PSL for armv6:  - Correct code generation for 4-operand multiplication instructions.  - Add kernel function to implement wdivide.  - Correct inline code for bignum arithmetic.  - Minor correction to alloc.sl.
  * PSL for armv6: corrections to Lisp disassembler. Nota bene: disassemble.sl was compiled into a fasl file on the Raspberry Pi!
  * Minor correction to rlfi.red
  * Arrange that resetreduce does not force !*raise to T.
  * This puts in some more buffering as displayed maths is sent from Reduce to the place in the GUI from which it is displayed. I believe that this ameliorates a quadratic cost associated with displaying large formulae.
  * Include manual updates of continued fraction omitted in previous commit
  * Include new file cfutil.red omitted in previous commit
  * Changes to the code for generating continued fractions in contfr.red to avoid problems with rounding when expanding exact rationals which caused an error at default precision and at larger precisions produced two different, but correct, results.
  * PSL for armv6: correct a return outside of prog in qualcount.sl and qualified-timing.sl.                Minor update to code for static garbage collector.                Remove inline code for cons, change inline code for cons and ncons to call cons. The previous inline code didn't play well with the static garbage collector. Optimization postponed.
  * aPSL for armv6: remove a couple of old files that were copied from the 386 subtree.
  * PSL compiler for armv6: provide for 4-operand instructions in lap + small correction
  * PSL for armv6: compiledcallinginterpreted expects to be called with the id number of the function called in (reg t3), not (reg t1): change fastapply accordingly.
  * REDUCE on Common Lisp
  * Fix some mistakes in the previous checkin. Apologies.
  * PSL for armv6: update to support code for bignum arithmetic.
  * Correction to previous revision (4903): update armv6-cross.sl, not armv6-cmac.sl.
  * PSL for armv6: correct ahndling of negative inums (27 bit integers) in cross compiler.
  * when using a fully-interpreted lisp that implements even local variables using shallow binding there is a risk associated with name clashes between user names and those of some variables used in the system. This was the case with x, u and v! I have renames such to things like !~x!~ to make the clash less liable to impact ordinary users. When ths Lisp used makes local variables local and implemented them via either deep binding or as anonympos stack lcations this is all a non-issue. But both vsl and the emacs version were hit by cases such as a top-level script: "lisp; x:=5; list(x,x);" which yielded a less than reasonable result.
  * REDUCE on Common Lisp
  * PSL compiler for armv6: fix a bug in unbinding of fluid variables at the end of a prog or lambda form, if the values of more than 4 fluids are restored.
  * Corrected a bug in rd!-fix in file contfr.red from package rataprx which caused a crash when functions continued_fraction and cfrac were called on certain rational number values (e.g. 6/11) when the floating point PRECISION has its default value, namely 12.
  * PSL compiler from armv6:  Correct definition of inump in cross compiler. inump checks whether an integer fits in 28bits (on a 32 bit system).  Remove pattern for wquotient and wremainder, as three is no division on armv6.  (There is at least one other bug somewhere...)
  * PSL for armv6: first successful compilation of a lisp function of the Raspberry Pi!  Split instructions for arm6 into two files, as the fasl initcode became too large.  Rewrite laoding of id numbers for function calls and accessing nonlocal variables.
  * Somewhere between "ha ha" and "oh dear". The CSL interpreter was not garbage collector safe in a few places, so some heavy computations performed in interpreted-only code could fail. Also the "cyg32" and "cyg64" utilities need to be compiled with static linking.
  * PSL for armv6:  Fix parameter passing for compiledcallinginterpreted (a helper function bridging the gap between a compiled caller and an interpreted callee).  Rewrite code generation for data loads that go beyond the $pc+/-4096 limit of a simple load instruction.  Fixed a bug when a fsl file referenced more than 6100 different ids. This bug is still present in the code for all other architectures: although it is easy to fix it requires recompilation of all fasl files, therefore the fix will be applied later. For the moment, go around the problem in the cross compiler by splitting the armv6-lap fasl file in two parts.
  * Add missing file header.
  * PSL compiler for armv6:  A couple of corrections.  Rewrite MakeFarload logic: it generated wrong code if a lisp item was loaded into different registers at different points in the code.
  * Minor correction to clprl/clprl.red
  * PSL for armv6: implement MRS instruction (move status register to general purpose register) Some corrections for utils
  * PSL for armv6: update basics for bignum arithmetic
  * Minor corrections to cgb and redlog
  * Correct redlog to work with upper-case Lisps
  * Minor correction to crack/v3tools.red
  * Minor correction to linalg/fsimplex.red
  * Minor correction to groebner/hggroeb.red
  * Minor corrections to crack package
  * Minor correction to misc/sets.red
  * PSL for armv6: machine code for bignum arithmetic and division of long long by int in the kernel
  * PSL for armv6: add system specific source files
  * More updates to license statements.
  * Update license statement in some PSL source files.
  * Minor corrections to sum/zeilberg.red
  * Minor correction to mathml/om2ir.red
  * Minor corrections to sparse/spludcmp.red
  * Minor corrections to linalg package
  * Minor correction to assert/assert.red
  * PSL for amrv6:  Optimization in stack frame allocation  Cleanup debug code in PSL kernel  Dump correct size of symbol table: it has slots 0 ... maxsymbols, ie. size maxsymbols+1, not maxsymbols. This doesn't matter much, as the hash prime is usually smaller than maxsymbols, so that the space at the end is never used.
  * PSL compiler for armv6: minor improvement in allocation of stack frames.
  * Further minor correction to alg/sub.red
  * Minor correction to rlisp/sub.red
  * Excalc: variation of a wedge product with respect to a 0-form was not handled correctly.
  * PSL for linux 32bit: avoid SIGFPE (ie floating point exceptions). Consequence of change to floating point changes in Oct 2018.
  * PSL for armv6: Remove debugging output Move heap registers to memory immediately before writing image file Correction to heap memory variables when loading image.
  * PSL for armv6 added kernel source file creloc.c
  * Excalc: for innerproducts do not assume that when the first argument is built up from natural vectors that also the second argument is expressed in the corresponding coordinates.
  * PSL for armv6: add code to reloacte heap when loading image. Make sure that values of heaplast and heaptrapbound are loaded into registers R8 and R9 before first use.
  * CSL: apply(nil, '(1 2 3)) led to a bad memory access rather than a proper diagnostic about NIL not being a defined function.
  * Added an error message to protect for improper use of define_spaces in the cantens package.
  * PSL for armv6: correct writing the initial symbol table to the assembler file. Previously the compiler allocated two words of memory (instead of one word) for every unused slot. As a consequence, only parts of the symbol table where written to and read from the image file. The reason for this is the different behaviour of  addressingunitsperitem vs. (compiler-constant 'addressingunitsperitem) when cross-compiling: The former is evaluated at compile time (ie. when the cross compiler is compiled), the latter at runtime (ie. when the cross compiler runs).
  * PSL for armv6: corrections to code for writing the image file.
  * This addresses a name clash that arises in unusual circumstances. Imagine running Reduce with EVERYTHING just interptreted not compiled. Further imagine tha the Lisp interpreter uses shallow binding not deep binding, so that in effect all local variables are bound and accessed as if they had been declared fluid. Now look at poly/poly.tst whicg does a more elaborate version of "let d=n; n:=2; -d;". From within the eventual simplificaion of -d this needs to retrieve the value of n, which it does using lispeval. Hoewver one of the functions in play along the way has a parameter taht used to be called n (and is now called nn) and the binding of that overrides the to level setting n:=2. That leads to an incorrect result and the poly.tst test script misbehaving. Well it took me some age to track this down because I first suspected some deeper issue with the ezgcd package. My patch here does not resolve the global issue, but does allow poly.tst to report success. This is not a total killer because (a) use of "share" is not common, and in particular the one in poly is the only one that looks dangerouis amongst the test files and (b) it will be jolly rare to run with that part of Reduce interpreted (but that can arise when one loads parts of the code in interpreted form to make debugging easier) and (c) maybe your Lisp will not use shallow binding for interpreted code so the local nature of local bindings will be honoured. This is a long message because tracking this down took a while and I think the issue is slightly witty.
  * Rename ga and gc in alg/alg.tst so that the name "gb" does not conflict with the ideals package that is part of the Groebner stuff. Correct the interpreted version of list* which - in CSL - got grossly wrong results in pure interpreted code.
  * PSL for armv6: correct a really dump typo (loading wrong argument into register)                trap.sl: make sure that sp is aligned on an eight byte boundary
  * Fancy printing (fmprint/tmprint): Print prompt nubmers per default even when used from TeXmacs, as proposed by Andrey G. Grozin Setting the switch PRI to off had no effect with fancy printing. Added code to print expressions in the same way as the standard printer when PRI is off.
  * PSL for armv6: Rework use of temporary register in generated code Correct generation of one word integer constants (instead of fixnum objects) in expressions like (wand 16#ffff0000 x) Correct bug in calls to internal functions that follow immediately, causing the relative address to be negative. Changed compiler cmacros to pop the return address off the stack in *dealloc insted of *exit (consistent with pushing it onto the stack in *alloc) Make sure that the stack pointer is always on an 8 byte boundary, as per armv6 specification.
  * Correction for bug #90:   https://sourceforge.net/p/reduce-algebra/bugs/90/ (bug in fancy printing of some excalc expressions)
  * Make the function noncomp1 work with matrices correctly. Minor changes to the excalc documentation.
  * Minor correction to solve/linineq.red
  * Minor correction to support/support.red
  * Minor correction to rlisp/tok.red
  * Minor correction to boot.sl
  * PSL for armv6: correct a couple of errors, work on garbage collector (which produces a stack overflow somehow).
  * PSL for armv6: arithmetic.sl: protect against divide by zero trap.sl: Moving towards a working version compiler:    Implement ADRL pseudo-instruction to load a pc-relative label address into a register    Correct bug in shift operations    Make sure that stack pointer is doubleword aligned for calls to C functions, since doubles need to be 8 byte aligned. Failure to do leads to strange effects when trying to printf a double. Kernel, float.c: use snprintf instead of sprintf (for safety)
  * PSL for armv6: correct lookup of compiled function address for backtrace information.
  * int/driver.red went "put(a,b,c); ...; reflag(a,b);" when the second call should have been to remprop.
  * PSL for armv6: corrected hand optimized list functions.
  * PSL for armv6: Finally succeeded in compiling the basics of the interpreter. It prompts for input and can evaluate simple forms like (plus2 1 2). Others crash the program, e.g., (plus 2 3) or (list 'a 'b). Getting closer to a working PSL...
  * PSL kernel for armv6: cleanup of kernel C code.
  * PSL compiler for armv6: more corrections.
  * PSL compiler for armv6: corrections.
  * PSL compiler for armv6: Correct handling of symval and symfnc access, to use the values in register r8 and r9. Correct code for calls to internal functions (was missing a restore of reg lr): Correctly handle argument registers above 5 (using argumentblock). Add missing CMacros. Handle "far" loads, ie. load of memory items where the target address is not within $pc+/-4096. Some code cleanup.
  * PSL for armv6: first go at system dependent lisp files.
  * A number of corrections to the armv6 PSL compiler.
  * Updates to PSL kernel on armv6
  * Updates to PLS compiler for armv6. armv6-asm.sl: Move all preallocated storage from bss to data section, as the bss section lies much higher in memory, and its addresses conflict with the lisp tag bits. armv6-cmac.sl: Remove old code, add comments to assembler output, some improvements. armv6-comp.sl: Replace incorrect opcodes je/jne by beq/bne. armv6-cross.sl: Added redefinitions for cross compilation. armv6-lap-to-asm.sl: Output comments to assembler source file. armv6-lap.sl: Remove old code, a couple of corrections. armv6-spec.sl: Correct inline code for cons/ncons/xcons for 32bit target. geninstr.sl: Remove old code.
  * PSL for armv6: more corrections.
  * PSL for armv6: correction to compiler.
  * PSL for armv6: Updates to code generator: When generating code for accessing a fluid variable of calling a function, the id number (i.e. the symbol table index) of the identifier in question is loaded into a temporary processor register, in order to look up the identifier's value or function cell.  Some numbers can be encoded directly in the instruction, all others be loaded from memory. When lisp code is compiled for faslout, the id number is not known, as it is only set a load time.  There are two exceptions to this:   (a) The first 256 identifiers in the symbol table are always those with one byte print names, and nil is always the next one.   (b) When compiling the static kernel, the id numbers are known at compile time. Therefore, the compiler will always generate code to load these numbers from memory, instead of trying to encode them directly in the instruction (except for the first 257 ids).
  * PSL for armv6 architecture: minor improvements to lisp disassembler.
  * Update some scripts:   cygwin-sanity-check.sh: Replace transitional package texlive-collection-htmlxml   pslver.sh: Add armv6 as architecture.
  * Add declarations to list of reserved identifiers in manual.
  * Further updates to the manual: minor formatting improvements to oper.tex and the addition of the SELFCONJUGATE declaration to aprop.tex.
  * Add a remark on sandbox permissions for flatpak builds.
  * Add documentation by Alan Barnes: branch cuts for numerical functions and new behaviour of conj operator.
  * PSL for armv6: more updates of license statements
  * Correct a silly typo that would mean that CSL would not build on a big-endian machine.
  * The changes here are minor and several are merely fixing spelling error in comments. The changes here were prompted by some work with a student on VSL.
  * Initial support for providing REDUCE as a flatpak app.
  * PSL for i386 on Linux and FreeBSD: update some license statements in files, minor updates to floating point code.
  * General tidy-up of code called by simpconj. Added the flag "selfconjugate" to df to support conjugation of symbolic derivatives.
  * PSL kernel for armv6: update license statements in source files.
  * PSL: IEEE support for 64bit Windows
  * Corrected bug in in realvaluedp when dmode is rounded. Added "condrealvalued" functions for sqrt and the inverse trig and hyperbolic functions. Modified simpconj to apply for any rules that the user may have defined for conj(<kernel>) when simplifying an expression rather than simply returning repart(exp) -I*impart(exp).
  * Correct mistake in floatzerop on i386 Linux and FreeBSD.
  * PSL for i386 on FreeBSD: implement IEEE 754 support. PSL for i386 on Linux: implement (minus 0.0) --> -0.0 according to IEEE 754.
  * PSL for FreeBSD on Intel 64: implement (minus 0.0) --> -0.0 according to IEEE 754. Minor code cleanup in pslextras.c.
  * PSL for FreeBSD on 64bit Intel: Correct comparison of non-finite IEEE floats in equal and eqn.
  * Debian/Ubuntu packages for Reduce: By popular demand, include files from reduce-addons package into reduce-complete package.
  * PSL compiler for armv6: updates.
  * Small improvements to PSL arithmetic source code for 64bit Linux and Mac.
  * Commit compiled version of equal.sl for Linux 64 bit.
  * PSL for macintel64: Implement IEEE compatible floating point artihmetic, see revisions 4676, 4691, 4693.
  * Merge corrections from r4802 into PSL code for 64bit for macintel and free BSD. Minor improvement to assembler code to access hash table entries: remove superfluous "cdqe" instruction, as only the lower 32bits of registeer RAX are being used.
  * Small improvement to Lisp disassembler for 64bit Linux and FreeBSD.
  * Merge corrections from  r4802 into PSL code for FreeBSD on x86_64.
  * Merge corrections from  r4802 into PSL code for 64bit Windows.
  * Linux packages for Reduce: add reduce-complete as alternative dependency for reduce-addonts, so that the latter can be installed together with the former. Make reduce-complete conflict with reduce-common, reduce-csl, reduce-psl, as it contains the same files as all three together.
  * Correct PSL compiler error for x86_64 architecture:  A 32bit mov instruction with indexed source or destination address, e.g. mov %edx,0(%rbx,%rax,1) was incorrectly written as a 64bit move; the logic for detecting whether a 64bit or 32bit move is meant is not good enough (blame the convoluted x68_64 binary instruction format).  The only known case where this error occured was in the system function id-intern that is called internally when calling intern on a symbol (as in "intern compress something"). It didn't affect the lisp reader which calls a PSL kernel function for intern.  As effect, the incorrect code would overwrite the hashtable entry adjacent to the one currently being written, probably with 0.  For correction, add a movl instruction to the compiler that will always generate a 32bit move and make sure that it is used for direct access to the hashtable.
  * Added a comment on a sufficient subset of Macports.
  * ESL
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * Emacs REDUCE
  * ESL
  * Emacs REDUCE
  * Integrator: Rebind the switch precise_complex to nil during integration, add a bit of tracing output to substitution code, make switches trintsubst and trdint settable before loading int. "on precise_complex;" messes up square free factorization of polynomials with surds.
  * Emacs REDUCE
  * Improve trace printing in integrator, add two integration rules.
  * This tries to arrange that doc/manual/redlogo.png will end up in the tar file made as part of a Macintosh Reduce distribution.
  * Emacs Standard Lisp
  * Unwind bad effects of a mistaken checkin that put some incomplete stuff in there and led to build failures. While doing that I take the opportunity to detect the Mojave release of MacOS.
  * I hope this will detect MacOS 10.14 as Mojave.
  * Check in a file that I had "svn add"-ed but not previously checked in!
  * Building Emacs REDUCE
  * Building Emacs REDUCE
  * Building Emacs REDUCE
  * This tries to arrange that my own header files and libraries get scanned before any system ones, so that (eg) if there is a system version of FOX installed it will nbot clash with the copy that I build.
  * Try to get the --without-gui version to build again.
  * Emacs REDUCE big integer support and build issues
  * Replace explicit big integers in sfpsi.red by a decimal representation: this avoids the need to read in bigints in Rlisp code.
  * Building Emacs REDUCE
  * Defint package: when evaluating a definite integral by calculating the indefinite integral and substituting the limits, the code in defintx.red tries first a simple substitution for upper and lower integral limits. If one of these fails, it tries to compute the onesided limits. This is not optimal: if only of of the substitution fails, the other one can be used within actually computing the limit.
  * Add differentiation rule for the incomplete gamma function m_gamma (https://dlmf.nist.gov/8.2, Formula 8.2.1)
  * Procedure rationalizei in alg/simp.red converts a quotient of the form
  * Fix a type from the previous checkin.
  * Try to put the reduce.doc stuff into application bundles on the Mac. I tink that has basically always been missing from the time I first tried packing up application bundles!
  * New Emacs REDUCE build process
  * Improvements to driver file for integration package and code cleanup. Create one procedure subst!-and!-int for heuristic substitution of integrals.
  * The key thing here is that I hope I now put cal/generated-c/profile.dat in a tar file that gets to be part of the Mac source distribution, because macports packaging would like that. I have taken the opportunity to re-profile everything so there are now versions of all such files there. To take advantage of the new profile.dat you can either just go "rm -rf cslbuild" then re-configure and build (that is surely the simple route) or copy profile.dat from csl/generated-c to an existing cslbuild/generated-c directory, at whihc stage the next time the Reduce sources change and you re-build the new version should get used.
  * A fix to configure.ac to link in libintl.a that I had made for the Mac had got lost from the checkin when I tested it on the Mac but checked a version of this file in from my pc. Discard some now-outdated commenst relating to fontconfig.
  * Emacs REDUCE
  * THis comments out a use of "thread_local" which - it seems - is not supported by slightly out-of-date versions of Xcode on the Mac -- and on a somewhat old set of Mac hardware it is impossible to install a newer release of MacOS and then a properly up to date Xcode. I also now have a slightly cleaner (well...) waay of dealing with cygwin32 vs cygwin64 on Windows which may lead to very minor improvements in the build speed there.
  * Big integer and error corrections
  * OS interaction functions in ESL
  * Declare lispsystem!* to be fluid rather than global in rtrace/rdebug.red, since it is fluid nowadays.
  * Fluid and global declarations in ESL
  * Further update to macports-setup.sh
  * On a Mac when the regulat macports version of fontconfig is used it seems that I need to link in libiconv explicitly too.
  * Macports now installs all that I need for fontconfig, and so the previous individualized hacks that built it by hand have been commented out. I leave them in as comments at least for now to illustrate how I coped with a previous oddity. I can now get gnome-system-monitor installed by forcing an option when gstreamer-gst-plugins-core is installed but then when I try to use it it can crash! I may need to look harder or decide that I do not like it THAT much. It is not at all essential for Reduce anyway!
  * Reduce manual: added user contributed packages ratint and trigint.
  * Convert ratint.tex to error free LaTeX input
  * Correct typo
  * CSL: function in rlisp/inter.red was renamed from aftergcuserhook to aftergcsystemhook, but not in crack/crutil.red.
  * I hope this checkin gets rid of a sqrt(2)**2 that crept into the result of an integration and led to a non-terminating attempt to tidy up the result. I also make updating revision numbers using scripts/commit.sh just a little more robust. The changes in cslbase/allocate.cpp remain transient ones relating to future development that I am working on.
  * Web site
  * limits package: fixed a bug where a minus sign got lost.  This fix immediately pointed to other problems, hotfixed those as well. The whole package is a collection of special cases and incomplete code. Needs a thorough review!
  * Package mrvlimit: more code cleanup. Added a couple of optimizations. Corrected a number of errors, e.g., when looking for the smallest in a list of subexpressions only the first two lisp elements were actually taken into account. And suddenly two incorrect limit computations (namely a and misc2 which are the same) now give the correct answer.
  * Package mrvlimit: make code more readable by removing unnessessary parentheses and compound brackets (<< ... >>), added a bit of code to treat ids flagged constants as constant.
  * Update documentation of mrvlimit package, add to manual.
  * Correction for problem during bootstrap of aftergcuserhook mechanism in PSL. Problem occured while compiling conlaw.
  * Code cleanup of package mrvlimit: rename a number of procedures, e.g. compare --> mrv_compare, find --> mrv_find, etc.; rewrite one algebraic procedure as symbolic; add a couple of statements for tracing.
  * Some changes to with!-timeout to provide a version that will do ABOUT the same amount of work on either a slow or a fast machine. Minor updates to some scripts, most notably retiring support for obsolete versions of the Macintosh operating system.
  * Minor improvement to numerical computation of Riemann zeta function for small precision.
  * Emacs REDUCE
  * I believe that macports has changed the name of one of the texlive packages, so macports-setup.sh tries to track this. I had a stupidity in the garbage collector for CSL  where a mis-edit led to a bad storage leak. I hope I have now fixed that.
  * REDUCE on Emacs Lisp
  * aftergc...hook in crack/crutil: Variable gcfree* may be bound but nil.
  * REDUCE on Emacs Lisp
  * REDUCE on Emacs Lisp
  * Remove the tracing code for the Lucas test that runs in linear rather than runs in linear rather than logarithmic time, but which was much simpler and which had been in there to help debug the logarithmic-time version by computing and displaying the values it should have created when used on modest-sized numbers. Well the slow code is left in place - just commented out.
  * REDUCE on Emacs Lisp
  * Primality test: correct procedure lucas_test to use the general modular functions instead of those for non-bignums.
  * Correct typo in crack/crutil: missing space
  * REDUCE on Emacs Lisp
  * Try to tidy up the arrangemnts for aftergcuserhook with code that stands a chance of being OK on both CSL and PSL and is such that the rlisp and crack uses of the capability can coexist.
  * REDUCE on Emacs Lisp
  * REDUCE on Emacs Lisp
  * REDUCE on Emacs Lisp
  * If building on Windows with the Reduce directory in /home/username there was an issue re cygwin32 vs cygwin64 coexistence (because one tried to look in /cygdrive/X/cygwin/home/username and the other in the cygwin64 version. I have adjusted configure.ac at the top level in a way that may make things safer. Also macports has changed since I provoded scripts/macports-setup.sh so I have updated things there.
  * CSL: furter fix re EQN.
  * This tries to correct the behaviour of EQN in CSL.
  * PSL: improvements to disassembler for armv6
  * PSL for armv6: first go at a lisp disassembler for armv6, so that I can inspect the generated code without switching between PSL and gdb.
  * Minor fixes that are intended to make it easier to set up for creation of snapshots.
  * Add a "build-them.sh" script to the necessary-updates archive that can be useful on fairly archaic Linux releases where the supplied versions of automake and some other utilities may be too old.
  * Define internal PSL alias for id size, so that the PSL internal function cannot be easily redefined.
  * Another type on the adjusted script!
  * Fix some shell scripting mistakes in previous attempt.
  * CSL: scripts/ubuntu-sanity-check.sh now includes a recipe that should ensure that at least gcc-5 is installed, and that simplifies some messes to do with partial C++-11 support in gcc 4.8...
  * CSL: when std::max_align_t is not available I now check the alignment of double rather than long double.
  * Try to cope better with somewhat old C compilers where there is a pretence of support for C++11 but where parts of it such as std::atomic_flag are not present. At some stage in the future I am really going to want those C++11 features in a more critical way than I do at present and at that stage I will insisty on more up to date compilers, but for now I have a somewhat unprinciples set of #ifdefs in CSL that just comment out interlocks when they ar enot supported!
  * GNU Emacs REDUCE IDE
  * PSL compiler for armv6: more instructions + corrections
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE
  * PSL for armv6: first kernel working on Raspberry Pi.  Pass pointer to symval array (value cells) into the init code so that it can be loaded into a register, as well as a pointer to the symfnc array (function cells).  These are always kept in registers for fast access.
  * PSL for armv6: corrections to lap (instruction format for LDR/STR and LDM/STM)
  * PSL for armv6: proper alignment for code and data to a multiple of 4.
  * GNU Emacs REDUCE IDE
  * REDUCE on Emacs Lisp
  * sign(sqrt(expression)) was always unknown, whereas sign(expression^(1/2)) is handled. Made sure that both return the same result.
  * Small correction to user contributed package occal, module regex.
  * Improvement to the implementation repart/impart/realvaluedp computation:  Implement a procedure for testing realvaluedness of a standard form and improve handling of a s.f. occuring as mvar.
  * REDUCE on Emacs Lisp
  * REDUCE on Emacs Lisp
  * Small improvements to realvaluedp: attempt to determine whether log(x) is realvalued <=> x is realvalued and sign(x) = 1. Slightly improve code readability by replacing car/cdr by _pvar_ and pdeg. Add sign as function whose value is always real.
  * Slightly different way of detecting PSL during run of regresion test file.
  * Floating point arithmetic: Make sure that the implementation of the elementary functions handle non-finite IEEE floats correctly (or at least gracefully). For example, the current versions of sqrt and log raise an error for a negative argument. One could, for example, return NaN instead (and possibly 0.0 for log(-inf)). This is something that needs careful consideration.
  * Define a couple of functions even if our floating point model is not IEEE - probably superfluous, but better safe than sorry.
  * Debian package build process: change the dependency on gnuplot-x11 to (gnuplot-x11 | gnuplot-qt). Problem reported by Apostol Faliagas.
  * Correction to floatfix: signal an error for non-finite IEEE floats.
  * Forgot to commit revision_history.txt
  * Fixes for IEEE floating point in PSL (Linux x86_64): Correct comparison with NaN which are not equal to any floating point number
  * IEEE floating point for PSL:  New file ieee-decls.sl containing constants and smacros for accessing parts of an IEEE floating point number
  * CSL: change behaviour to match the Standrad Lisp Report, specifically so that (EQN 0 0.0) yields false (because the types of the tho arguments differs.
  * CSL: this has more changes by way of adding comments that explain what I intend to do than actual new working code, but is being checked in so that the plans are on record and I can now try to gear myself up to implement more stuff.
  * CSL: I believe that in the "conservative" world I can not both create and reload csl.img provided that in each case I run in enough memory that garbage collection is not triggered! Now I can move on and look at the interesting bits of the code.
  * CSL: The allocation code for my conservative collector is quite a lot more complicated then the version I had before, mainly because it has to be prepared to allocate around items that are referred to by ambiguous pointers and which therefore may not be relocated. However I have just reached a state where the cold-start code sets up ready for that and if I run in enough memory I can build a "csl.img" file where the compiler has self-compiled. The next step will be to work on the warm-start setup code so that I can reload that image! And after that to add the bit that is actually a garbage collector....
  * Fix for bug report
  * CSL: further attempts to keep the build process a bit quieter then it was originally and to take the next step towards a conservative collector.
  * CSL: I hope that this fixes some errors in last night's checkin. However right now my main pc seems to have its cooling failed and the result of that is that it reboots abruptly when I try the regular ways to rebuilding or testing Reduce. When I have managed this checkin I will be ordering a replacement!
  * GNU Emacs REDUCE IDE
  * CSL: Two sorts of change here. First I have tried re-working the Makefile stuff so that compiling CSL is less verbose. Anybody who needs to debug the exact way in which the compiler is invoked may need to undo these changes but most of the time and for everybody else it will (I hope) make the output from builds less daunting. Then there is further gradual movement towards having a conservative garbage collector. The collector itself is not implemented at all yet, but code that sets up the heap and allocates list and vector data from it has bene re-worked in ways that are part of the plan. The conservative GC re-work is activated by configuring with --enable-conservative, if anybody wants to join in developing and debugging, but people not ready to do a deep dive into the code and track bugs in code that is seriously incompleteshould ignore it for now.
  * GNU Emacs REDUCE IDE
  * Document major changes to Reduce.
  * Differentiation (procedure diffp): add a commented out condition for differentiation of dependent kernels.  Current, the following
  * Implement function fp!-signbit in PSL Reduce.
  * PSL for Linux x86_64: implement (minus 0.0) --> -0.0 according to IEEE 754. Minor code cleanup ins sigs.c
  * Web site: Add a link to the project page at the top of the web home page. Add a switch summary page linked to the documentation page.
  * FPS package: change toplevel simplification function for the fps operator from psopfn to simpfn. This allows for the definition of pattern matching rules for fps.
  * Manual
  * Manual
  * Manual
  * defint package: improve tracing when trdefint is on. -- und die folgenden Zeilen werden ignoriert --
  * Manual
  * GNU Emacs REDUCE IDE
  * Web site: Add another tutorial. Minor improvements to some existing tutorials and the main tutorials page.
  * Remove alloctest from the set of programs to attempt to build because it has served its purpose (and these days it fails to link for lack of all the defined symbols it would like!)
  * Integration: added some integration rules for shifted gaussians that could not be integrated otherwise, e.g.
  * Taylor package    2.2g    When a taylor series is computed via differentiation, the constant term is     evaluated by substituting the expansion point. Catch a possible error     (i.e. division by zero) at this point and call taylor!-error.    Modify taylor!-error to print the error message if the switch trtaylor is on.     This helps if taylor expansions are computed in an errorset where error     messages are not printed (i.e. when calling from the limit package).
  * Web site: Add information about logarithms to the support page, based on the recent discussions on the mailing list.
  * Web site: Add another tutorial.
  * Manual: I have removed references to the symbol LN from the early part of 7.2 Mathematical Functions (on page 73), which implied that it is an alias for LOG, but I have left the later references to it's use with ON ROUNDED and the fact that it is a reserved identifier.
  * Reduce manual: replace latin1 umlauts in text by canonical representation.
  * Web site: Added more tutorials.
  * Delete switch balanced_was_on from the list of switches in cslrend.red, as it was removed recently from the normform package.
  * CSL: further work towards a conservative collector - specifically fleshing out code that can take an ambiguous pointer and determine whether it identifies a genuin Lisp item, and if so which one that is. The code is neither tested nor optimised at present!
  * Further correction to mess-up in previous checkin.
  * Fix some glitches left by the previous commit.
  * CSL: I have cleaned up some of the autoconf etc stuff so that reautoconf should not generate as many warnings as it used to. At one time I had thought of using the Boehm conservative garbage collector as part of my storage management, and so I made it easy to build a copy and link it in. I have now changed my mind on that and so here I remove that extra library... and I continue to gradually inch towards my own conservative collector.
  * Alan Barnes noted (a while ago) that with "on rational,complex" certain expressions where printed in a peculiar way, namely:
  * Allow internally to add a matrix to zero. It should eventually be made consistent up to the algebraic level.
  * Web site: Add two new tutorials.
  * CSL: A week or so back I checked in asome changes that were intended to be the very first start towards a long term idea. I hads some variables "thread_local". Because of linking issues on some platforms I ended up with the variable "stack" a regular thread_local when used in the file bytes1.cpp and expanded into (*p_stack) elsewhere. This ran all tests. However looking harder later it turns out to slow things down by a factor of around 10 (perhaps especially on Windows)!!!!! I have not investigated exactly what was goin on, but basically I have reverted the change. In the case of "stack" the good news is that when and if I complete a conservative garbage collector that variable will become redundant and so any issues of making it thread_local become moot. But for now I need to remember that as I try to mave into a thread-supporting world that I will need to check the performance consequences of even changes that appear rather modest.
  * CSL: In recent times a build of CSL on Windows has REQUIRED that a 32-bit version of cygwin be installed in c:\cygwin and a 64-bit one in c:\cygwin64. If your C: drive is a modest size SSD or if system software has been provided for you on a nework drive cygwin might live elsewhere. The most important change in this checkin is my attempt to inspect the Windows registry and using information from there followed by further jolly tests to identify Cyhwin installs wherever they have bene placed. By its nature this is the sort of thing where testing all possibilities is hard, so I first hope it will behave if cygwin is on d:\cygwin (say) and then that all other potential cases work. Or at least that the new scheme is more robust then the old one. While doing that I have taken the opportunity to try to speed up how the build works if the version of cygwin you are running on is the one being built for.
  * Web site
  * CSL: Put back some code to try to make the C++ threads terminate at end of run. This time I use4d atexit tosend messages to the threads asking them to give up. This will not kill them if one is exiting over-abruptly, perhaps. It MAY have been that leaving detached threads waiting on condition variables at end of run was causing the whold program to hang waiting for them...
  * Web site
  * Reduce manual: list more switches in appendix
  * normform package: remove unnecessary witch balanced_was_on, minor code cleanup
  * Web site: Tidy up the code by using absolute URLs for the navigation and other key internal links, so that I no longer need a separate template for files in subdirectories. I can now do this because I have reconfigured my development web server to use a virtual host that matches the SourceForge server. There are no user-visible changes.
  * Reduce manual: document a couple of switches
  * GNU Emacs REDUCE IDE
  * Web site
  * Reduce manual: add description of HORNER switch.
  * In C++11 it seems that if you invoke exit() or otherwise quite your application without arranging that any joinable threads have been joined that is an error and tends to get reported to you as a failure. I had tried using RAII to cause the threads that I had created to be joined, but that was not always catching every case. So as an alternative I now detech the threads. I believe that the C++ standard does not mandate what happens to left over still-running threads when a program terminates, and the issue about threads that are waiting on condition variables that the master thread owns is if anything even less well defined. However I *VERY MUCH* hope that on the various real operating systems that I am concerned with that such threads get unilaterally killed and that no messy exceptions get raised in the process so that everything shuts down nicely.
  * Alg package
  * Interactive lessons
  * The previous system demanded that cygwin and cygwin64 had been installed in the default locations for them on the C drive. The changes in other-cygwin.cpp and the configure.ac files arrange to scan the Windows registry to find where cygwin might be even if it has been installed "somewhere silly".
  * User's Manual: document startup file. Decrease verbosity during PDF generation.
  * Merge latest change to psl/reduce.img.sh into the psl/saveimage.sh script. (Note: should merge these two scripts into one!)
  * PSL Reduce: better interface for TeXmacs. Load tmprint package at startup if environment variable TEXMACS_REDUCE_PATH is set. It is no longer necessary to add code to the .reducerc file.
  * CSL: correction to seeding or random number generator.
  * CSL: Adjust cslbase/configure.ac to makec++11 features link better under mingw. Workin arith06.cpp re initial random seeding of the random number generator to allow for the fact that std::random_device might in fact be deterministic (at present my solution has a memory lead which I ough to fix). Correction to allocate_test so that it now behaves (as far as it goes) on at least Windows(mingw), Windows(cygwin), Linux and Macintosh.
  * GNU Emacs REDUCE IDE
  * CSL: AT least when running under cygwin the alloctest stuff now demonstrates that it can flag up dirty pages - at least if simple cases. I will now need to verify that on Linux, Macintosh, BSD, Windows... but the testing flushed out a bunch of glitches in the code I had put in allocate.cpp, so this feels like good progress.
  * CSL: I am liable to continue developing code in allocate.cpp - and to help with that there is a new target alloctest[.exe] which is just a temporary location for code to test stuff from allocate.cpp. With its very first try it identified a couple of (not terribly deep) errors. Right now it does not do anything much! Anyway, I can now allocate memory using mmap(), and soon I will check if VirtualAlloc works too. Then I can start to agonize about the more complicated stuff!
  * Web site
  * Interactive lessons
  * Web site
  * Interactive lessons
  * Try to be more generous about checking alignof(std::max_align_t), which should be available on any fully compliant C++11 compiler, but where gcc in the 4.8.x series fails. IN that case I try to fall back to using alignof(long double), which I hope will be handled more gracefully.
  * Web site: Delete the old top-level htdocs directory, which is now a subdirectory of web.
  * Web site: Convert support page to a collapsed list (accordion) and add more information. Minor tidy up of the documentation page.
  * Further progress on PSL compiler and kernel for armv6: kernel runs unteil initial load message.
  * PSL compiler for armv6: first successful compile and link of PSL kernel (but crashes immedaitely after start)
  * CSL: I have put a whole chunk of new code in allocate.cpp - and at present it is not used and not tested at all, but it is intended to be a framework that can develop into support for a generational garbage collector. While sorting that out I have changed from use of signal() to using sigaction() [but only if it is available - it is not on mingw/Windows] which is the more modern approved scheme. This leads to some changes in header files that get copied into the generated code u01.cpp-u60.cpp, so I take the opportunity to refresh the copies of those in csl/generated-c that get used in somewhat obscure cases that probably involve cross compilation. The changes here have been confirmed on Windows at present, but soon after the checkin I will verify that they still allow me to build on other platforms.
  * Web site: Update support page to use question-and-answer format consistently and add more information. Add a new template to provide the repetitive markup for the support page and rationalize all template code.
  * Further progress on PSL compiler for armv6, first attempts to compile the lisp kernel.
  * Further improvements to PSL compiler for armv6: put constant kernel data into .rodata segment.
  * Correction (I hope) for a bug that led to bad results or crashes when integers with over say 2400 digits got multiplied by CSL.
  * Web site: Make the navigation menu and footer panels stick to the top of the viewport when scrolling.
  * CSL: this makes a bunch of changes where most are concerned with concentrating memory allocation code in the file allocate.cpp. This is being done both because it may be seen as rationalizing things and because I am about to want to rework a lot of the stuff there. I have some incomplete and at present wrong-minded fragments of what will morph into the new code there, but at present things are much as they used to be (except that now I use just 3-bit low tage I only need memory regions aligned to 8 byte boundaries not 16). This checking is really to give me a better base for future steps!
  * Put a subversion $Id:$ tag in configure.ac
  * Web site: Use a dynamic tabbed layout for the bibliography page and correct a few bibliography items. Check in reduce40.pdf, which is not available as source code.
  * Web site: Introduce a new template for bibliography.php. Assign each alphabetic section to an array element and loop through the array in the template. No user-visible changes yet, but this revision should make it easier to improve the layout.
  * Web site
  * Web server: Initial checkin of a new file tree for the web server rooted at the parent of the htdocs directory, which is accessed as /home/project-web/reduce-algebra/. This is necessary to provide a better file structure and because it seems that recently only files outside htdocs can be written to by the web server, i.e. by PHP programs, which is why the RSS feed display stopped working. The Smarty template system also needs to be able to write to cache directories, so they must also be outside htdocs.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@4605 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@4604 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Web site: The first step of a move to using Smarty templates. The main files in htdocs are now data files used by templates that contain the primary markup. The 2 .inc files are now included templates stored elsewhere and the php directory has been moved elsewhere. The RSS feeds now display only the first 5 items.
  * PSL compiler for armv6: minor correction.
  * Correct error in trap handler for SIGSEGV: always set on-altstack* to t,  to tell the backtrace code that the real stack pointer at the time of fault is in the fluid variable stack-pointer*
  * Next step for PSL armv6 compiler
  * Changes to existing parts to stitch in the new file allocate.cpp
  * Split off memory allocation functions into a new file allocate.cpp so it will be easier for me to work on them.
  * Web site: Initial move to responsive styling based on Bootstrap 4. (But this is not the final version.) Before developing this further I need a templating system.
  * A Windows framework for noting which pages of memory have been updated.
  * PSL for armv6: Can now compile simple functions to assembler source code.
  * Sample and test code which is a start towards support for a write barrier for generational garbage collection via marking heap pages as read-only and then when the first access trap arises both resetting them to read-write and recording that the page concerned is dirty. I would greatly appreaciate advice or reassurance (or otherwise!) from somebody who has a bit of experience in this area as to how reliable the approach I am introducing here can be, and where it can not be used.
  * CSL: For very large integers CSL uses a version of Karatsuba that runs the top-level three (half-length) multiplications in parallel. In the past this used custom synchronization involving a pile of semaphores. The version here now relies on the C++ thread library which came in with C++11. C++11 also provides a Mersenne Twister random number factory, and so I now use that rather than the imported Mersenne Twister code. I have also updates the file cslbase/conservative.txt which documents how I hope to modify the system so that I have a conservative (and generational and thread-friendly!) memory management regime. At present there are no code changes to implement what I discuss there and the discussion is not even complete. But it can help focus my mind.
  * A number of improvement to last checkin. I consider this as proof of concept for the ARMv6 compiler backend. ToDo:  - add missing instructions to geninstr.sl  - check all cmacros in armv6-cmac.sl  - check generated code for obvious inefficiencies and add optimization rules.
  * PSL compiler for ARMv6: first successful generation of assembler source file.
  * More work on PSL compiler for ARMv6 architecture.
  * First attempt of a Lisp compiler backend for the ARMv6 architecture.
  * For the benefit of platforms where /bin/bash does not exist but bash has been installed somewhere else (eg in /usr/local/bin/bash...) but is at least on your PATH, this alters scripts that used to start off as "#! /bin/bash" to go "#! /usr/bin/env bash" which will (I hope) be more portable, in particulat to BSD platforms. I rather expect (indeed I rather hope!) that a fair proportion of these scripts will not in fact be bash-specific and it would be sabe to revert to just "#! /bin/sh", but doing what I am doing now should invole less risk and is certainly less effort than checking each script individually.
  * CSL: if the shell variable CC or CXX were set when the top-level configure script was invoked (as one very well want to be the case!) the autoconf-generated configure script got confused as regards variables AMDEP_TRUE etc to do with dependency tracking. This issue arose while I was putting in support for ccache. The checkin here is one that I HOPE will fix the problem and not have other adverse effects, and by checking it in I have a chance to test it on a range of platforms.
  * PSL sources: remove CRs at end of lines, remove superfluous files
  * Make the WHILE macro in Reduce more generous (so it matches the ones that both PSL and CSL would otherwise have... and permit    (while PREDICATE S1 S2 ... Sn) with multiple statements to be iterate4d not just one.
  * VSL: gets as far through pass-2-3.sl as to where the first compilation of a call to ASSOC arises.
  * VSL: try-fasl.lsp now contains a patched version of codefiletrailer that tries to avoid leaving stray bytes in strings put in the .b files.
  * PSL compiler: update for win32.
  * VSL: more fixes towards getting bigger files converted to .b format.
  * PSL compiler: Correct wrong number of arguments in function definition
  * By telling my VSL-based cross-compiler which functioons PSL views as "fasl callable" I now get essentially identical .b files for a range of little functions up to being as ambitious as the factorial function!
  * PSL: final update (for today) of license statements
  * PSL: more updates to licnese statements
  * PSL: Next round of updates to license statements.
  * VSL: Now apart from some non-zero bytes within the padding of some strings to 8-byte boundaries a TRIVIAL fasl file gets created with just the same sequence of bytes as is generated by the genuine PSL compiler (tested on Windows at present). I will obviously now need to try some more ambitious examples, but there is not liablke to be too much pain. The last fix was when I discovered that "put_a_halfword" plants a 32-bit value rather than merely a 16-bit one. When I feel VERY brave I can now see if I can recreate a range of the PSL "*.b" files that a kernel build out of main.s and dmain.s reads in to create a first fully working system! I believe it is now pretty clear that that is going to be possible.
  * PSL: another batch of license updates.
  * Next batch of updates to license statements in PSL sources.
  * VSL: Now for the generation of the very simplesy fasl file using VSL rather than PSL I have only one unexplained byte of discrepancy. Yay!
  * Copyright updates in PSL util/win32
  * PSL sources: more updates to copyright notices.
  * PSL for win32: remove extra return
  * VSL: Implement a prinhex function in vsl to help me debug. And a further large step towards getting the FASL files OK as I come to understand that writing 16, 32 and 64-bit values into the code-stream has to work regardless of data alignment - so niw even for 64-bit values I do the writing byte at a time. Still some blips by distinctly fewer!
  * VSL: I wass failing to write some word data into fasl files as a combination of a putword implementation that assumed alignment and a bas setting of codebase* that had left it at at odd address. Fixed here which creeps me closer to agreement.
  * PSL: minor update.
  * PSL for 32bit linux (kernel): remove return
  * PSL for 32bit FreeBSD: improve signal handling, add interface to rmdir and mkdir system calls.
  * PSL for 32bit Linux: improve signal handling, add interface to rmdir and mkdir system calls.
  * PSL for macintel64: minor improvement in signal handling.
  * PSL for macintel64: compile recent updates.
  * PSL: minor update.
  * PSL for 64bit Windows: minor update
  * PSL sources:  Replace a couple of return clauses outside of prog.
  * VSL: Make VSL fussy about checking the GO and RETURN are only used in PROG context. This adds a dozen or so lines, but if I had put this in earlier it would have helped me spot an instance of a RETURN somewhere I would not have expected that PSL in fact copes with (at least when compiled).
  * Minor update to PSL compiler for 64 bit Windows.
  * VSL: This is creeping closer to having the cross-compiler and the real one generate the same .b files. I think I now have (most of?) the code a binary match, so I now need to disentangle relocation tables etc. I think!
  * PSL source: Update nonkernel copyright notices.
  * PSL for x86_64 on Linux and FreeBSD: use correct stackpointer in break loop after SIGSEGV  so that one can print a stack backtrace after a SIGSEGV, e.g., a stack overflow.
  * PSL for 64 bit Windows:  Added protection against misinterpretation of high return addresses in backtrace.   Removed function definitions from allocators.sl, leftovers for debugging.
  * PSL for 64bit Windows: merge recent changes.
  * Merge recent changes to x86_64 into freeBSD64 code.
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * VSL: have a hacked go at watching for uses of getfcodepointer.
  * VSL: mainly due to a mixup as to whether a block write function specified length in words or bytes, I can now generate at least SIMPLE .b files that are roughtly the same length as ones produced using real PSL.
  * Standard LISP on Emacs Lisp updates
  * GNU Emacs REDUCE IDE
  * VSL: The attempt to create aq FASL (.b) file now does not crash (at least on very simple test cases) and it creates a file. However the file created by try-real.sh (which uses genuine PSL) and that by try-Winfasl.sh and friends is different in both length and contents! SO there is yet some debugging to go. However the current state still feels like something of a landmark.
  * VSL: I have consolidated the LIsp files used to build my vsl images into a smaller number with a little parameterization. I have NOT re-worked the parts that generate main.s and dmain.s, but goiing ./Winfasl.sh builds a vsl image file with a compiler ready to (try to) make fasl files, and then ./try-Winfasl.sh has a go at running it. And similarly for AMD and Mac. The generation of files gets most of the way and I think I just lost one final blip to sort it out during the consolidation - but I wanted to check in the generally tidies up versions of the files before going back and resolving that blip.
  * GNU Emacs REDUCE IDE
  * VSL: enough for today! I spotted a real ugly that was leading to a divergence between my behaviour and the regular PSL one, and another place where a stub I had inserted was way inadequate. That leads me to try loading sys-faslin while generating .b files, but that leads to further mess wrt code that is very PSL specific. By running on Widnows I now get as far as failing somewherte in the code that writes out the trailer block at the end of a .b file.... That feels encouraging!
  * GNU Emacs REDUCE IDE
  * VSL: This adds scripts for buinding mingw-w64 stuff to make tests and comparisons on my Windows machine easier for me. In a while I hope to squash all these multiple copies of files and scripts into single-copy generic ones, but at this stage the "copy and paste" style of development is easiier. My woes regarding generating fasl files seem to relate to IDLOC.
  * PSL for macintel64: merge latest compiler improvements
  * PSL for macintel64: merge latest updates to x86_64 disassembler
  * VSL: Get a smaller illustration of how my FASL compilation differs from that using "genuine" PSL. try-AMDfasl.sh and try-real.sh place the last instruction from the LAP code at different locations.
  * Remove the word "svn" from just before the revision number in the name of a snapshot.
  * VSL: I have renames and rearranged verious files so that I can try both the Linux-styles AMD64 build and the Mac one. At present I have not got the Mac version so it can build main.s (but that is probably simple). For the Mac version to get the fasl code to move forward I have to address a problem where a function "asmp" defined with no arguments gets called (via apply) with one argument. I just gave it an argument in is definition. I presume that PSL is less careful about checing arg counts! With this for both AMD64_ext and Mac I get an issue whereby the fasl compiler that I build here accounts (jmp (indirect (entry putentry))) as 7 bytes long while scanning the code to set labels, but then when it comes to deposit bytes it only generated 3 bytes, leading to the following label not being where it was expected to be - a situation that the compiler quite properly detects and complains about. So I have something incorrect!
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * VSL: On the path to being able to create fasl files I now start to generate a binary .b file, but label resolution gets confused somehow.
  * cslgc.cpp: This change helps a CSL-based version of Reduce start up when the heap image is large compared with the (somewhat arbitrary) in initial space allocated for it. While the system is starting up garbage collection not be performed, and if you run out of space that is a fatal situation. I now do a better job of trying to allocate more space if I can. This is most important on small computers. VSL: incremental movement towards fasl file generation. Still not there!
  * VSL: moving on in the direction of creating .b files. I can now generate what may be the first few bytes of one, but the next hurdle is a bunch of calls to gtstr, strbyt and friends. I will also need to review what I am doing in the light of recent good rationalizations in the main PSL tree.
  * Improvements in compiler and signal/trap handling:  Changed the compiler's assembler backend to generate pc-relative instead of absolute address references (as specified in the x86_64 ABI).  Added alternative stack for SIGSEGV signal handler, try to recognize stack overflow and print a suitable error message.  Added protection against misinterpretation of high return addresses in backtrace.  Added a system interface function for masking signals.  Removed function definitions from allocators.sl, leftovers for debugging.
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * In the int package there was some overloading pr punning on use of lt, lc, red, .+ and .* etc. At least som eof those cases have now been given distinct names to redmove any possibilirt of confusion. Also the windowed version of CSL now shows total memory in the top bar as well as the percentage used. And I have contniued to move towards being able to recreate .b files for PSL using vsl.
  * Standard LISP on Emacs Lisp updates
  * VSL: I have renamed some files for what I hope will count as clarity, and started seeing how I get on with the versio nof the (cross) compiler that will generate fasl files (ie *.b). It is not yet quite clear how far I will get, but I can now go (faslout 'foo) happily and the immediate error when I try to define a function looks one that "just needs debugging" by adding support for more of the low-level vector stuff in syslisp.
  * PSL compiler for x86_64:   do not generate REX.W prefix bytes for push/pop instructions,   correct a case where a cmp instruction was generated without a REX.W prefix (ie. cmpl instead of cmpq).
  * X86_64 disassembler for PSL didn't handle instructions longer than 8 bytes (max length is 15 bytes)
  * VSL: It looks now as if with this version I can build on cygwin, Linux and the mac, and each test run stops in about the same place! Given that the Cygwin version uses a copy of main.s build for mingw (ie using Windows calling conventions) I have fair confidence that the native windows version would do the same if I just got the C coded support stuff adjusted my merging in Windows-compatible copies of stuff there.  So I can now continue debuggin on whichever platform gives me the best tracing and disgnostic tools.
  * VSL: make the tracing code protect itself somewhat from bad memory addresses so it can perhasp keep displaying stuff even in the face of messed up data.
  * GNU Emacs REDUCE IDE
  * VSL: get cygwin support a bit more stable by arranging that the GNU assembler ".ifdef" knows what to do.
  * Standard LISP on Emacs Lisp updates
  * VSL: This corrects mistakes in acn.s so that low level tracing will get further, and separates out the linux and windows version of main.s and dmain.s a bit more clearly. As usual I now need to alternate between debuggin on one platform and investigating the prospects for support on others and for portability!
  * Let image files that have large amounts of list storage in use in them reload by allocating extra memory as needed during system startup.
  * Standard LISP on Emacs Lisp updates
  * VSL: This put in "-Wall" when compiling the C code, and then fixes the issues (pretty minor ones!) that gcc moans about. I will also need to build on Mac which will find a separate selection of "issues". I also now arrange that the machine code is edited to try to trace every function in it, reporting both entry and return. Right now that causes things on Cygwin to give up earlier than before and I have not investigate dwhether this is because of bad insertion of "call acn" lines or som eother issue, but whatever else tyhis gives me better hooks for sorting out what is going on!
  * VSL: On Cygwin I can make a bpsl that can be executed, and the "call acn" trace mechanism lets me see loads of stuff happening as load-psl.b is read in. I can see intern being called etc. So now I need to work out why things stop. The code in acn1.c has a distinctly limited and crude function that can print simple Lisp objects in the 64-bit PSL world subject to the allocation of tags being as expected.
  * To make it easier for me to debug the assembly code and its interaction with C code of the PSL kernal I have now provided a little routine called acn. Its usage is that one can insert    call acn    .asciz "message %x ..." almost anywhere in the assembly code. the acn procedure preserves all registers, and returns after the zero byte that terminates the string. At present the string is a format string for printf, and it gets %rax, %rbx and %rcx as available values to display. Well very often they will be Lisp entities tagged to show their type, so what I will be able to do is to implement my own printf-like scheme that supports an escape sequence that causes the tag to be inspected and at least some forms of PSL Lisp data to be displayed nicely. I can then put "call acn" statements at the start of many Lisp compiled functions and also just before the "ret" statements at their end to give myself a level of tracing. I HOPE that the version I have provided will behave on Linux and Cygwin.
  * VSL: delete the local copies of kerbel/*/*.c files because all the ones I use dto have there have been adjusted and moved up to the top level.
  * VSL: README.PSL is now a clearer explanation (I hope) of the files in this directory. I have hacked vsl (in PSL mode) so that it prints names that has * and a range of other punctuation marks in without escapes, and tried to tidy up the various build and test scripts with a view to moving into debugging the copies of bpsl that get made. Well I still have a load of work to do merging in mingw support...
  * Standard LISP on Emacs Lisp updates
  * VSL: I had not thought quite carefully enough about where to put .text and .data directives when messing with main.s, and had put .data ones after some labels where they need to be before them. Fixing this leads to messier code in fudgedata.c (which is NOT written in a nice modern style, but is a jiffy program that will not be needed for too long) but lets a cygwin build of bpsl get much further.
  * Standard LISP on Emacs Lisp updates
  * Fix a typo.
  * VSL: Try to move strings etc to the data segment.
  * Standard LISP on Emacs Lisp updates
  * The header file involved in the previous checkin!
  * VSL: start to create a header file for the C parts of the PSL kernel so that there can be cross-checking when there is separate compilation. At present about all it contains is a scheme for tracing things, and that helps me see how far I get before disaster strikes,
  * VSL: I *believe* that this version builds a (non-working) bpsl on Linux, Cygwin and the Mac. A Windows version will need MUCH more work to paper over system-library variations and merge in C-code from the existing Windows version of PSL... but that will be "just time and effort". The fun now is to start running under debuggers and understand just how far things get before (a) behaviour on the different platforms diverges and (b) how far things then get before the segmentation fault that I observe is triggered.
  * VSL: I can now at least compile and link a version of bpsl on both cygwin and Linux. It does not work! I have also moved all the jolly .b files into a sub-directory wher ethey will not clutter up the top level so much.
  * Check in a set of *.b files (for AMD64) so that at least on Linux I can try loading some of them into bpsl. Hmmm these will probably not match the version of bpsl that I make, but at least it gives me something to play with.
  * VSL: Check in a couple of files I had failed to before, and rename the various scripts that I use to test stuff. main-dmain.sh edits the AMD64_ext versions of those files to try to make portable versions. psl-linux.sh, psl-win.sh and psl-mac.sh are the scripts that assemble those and then compile all the C code. Right now the Linux version probably makes a bpsl executable, but the other two sort of obviously find that they are not on Linux so the Linux-specific stuff in the C code will not compile. The existing PSL way of doing things has been to have separate versions of the C code for each platform - what I am exploring here is having one set of files with #ifdefs to allow for variation. The attempt to build on the Mac shows up a few things where although supported on Linux the Mac moans about use of deprecated functions. Windows is just SO different that I will need to start by just putting in empty stubs for most stuff.
  * Standard LISP on Emacs Lisp updates
  * VSL: bpsl now links again on Linux64. I will now try to coax it into doing so on the other platforms. And then see how to make an image file using it, because existing image files fail to load, giving messages like "Cannot start the image with this bpsl / nnn != nnn, mmm != mmm" which is probably very reasonable!
  * Get rid of a clash on the name "VECTOR"
  * VSL: more pslstubs.c filled in. I think I just have the pthread ones to continue through now, but I think there are 45 of those to fill in! And I *bet* that PSL does not actually use all of them!
  * Standard LISP on Emacs Lisp updates
  * VSL: a checkin because I have changed enough that I want to keep what I have safe. This is still in progress and at present will not build, but I believe that most of the framework is in place.
  * This continues to work towards a model where assembly code and as much of the C as possible can be one version for 64-bit Windows, 64-bit Cygwin, x86_64 Linux and Macintosh. It creates versions of main.s and dmain.s by applying ugly edits to the AMD64_ext versions - but changes to the compiler could do all that in a nicer way. Linux vs the others disagrees wrt whether symbols in the assembly code need an underscore ahead of them. So I define both versions! The C code will write the definitions of functions called from main.s as "int _(foo)(int)" where the underscore is a macro that pastes in an underscore in the Linux case but not elsewhere. The C code has been adjusted to use ANSI prototypes rather than K&R function headers, and passed through astyle so that indentation is consistent everywhere. Re-run astyle with different settings if you hate the ones I have used!  Most things called from assembly code already go through little stubs (eg see how sin, cos etc are done), and I need to add a bunch more for basic IO and for pthread support.
  * Standard LISP on Emacs Lisp updates
  * VSL: the edits in bad1.s turn the AMD64_ext versions of main.s and dmain.s into ones that are at the very least close to being able to assemble under cygwin64, Linux64 and Macintosh. For the Mac I have to do extra work to insert underscored in MANY names. I wonder if either the Linux/Cygwin gcc or the Mac assembler has an option to control whether the assembler adds in underscores? But even if there turns out not to be a good fully mechanical option (I have spotted but not checked -fleading_underscore in gcc) this is still close to nice. The file pslstubs.c now has non-functioning stubs for a number of Linux functions that the AMD64_ext main calls, again with the hope that eventually just a single version of the assembly code can be generated for all x86_64 platforms. The various bits of C code moan rather a lot on the Mac with plenty of "control reaches the end of a non-void function" and other observations about C style that is liable to deserve cleaning up. BUT... BUTBUTBUT. Starting from the AMD64_ext version sof both main.s and dmain.s I have at least now linked a bpsl on Linux64. Cygwin64 and the Mac. I believe that the Cygwin and Mac ones are really not likely to function, but both the Linux and the Mac versions get as far as something like ./bpsl Setting heap limit as follows: bpssize = 20500000 (138CE20), heapsize = 514038000 (1EA398F0) Total image size = 4331667456 (102300000) About to load LOAD-PSL FATAL ERROR: Couldn't open binary file for input
  * Standard LISP on Emacs Lisp updates
  * VSL: bad1.sh tries to let you disable "-no-pie" with paramater substitution but I am not confident that that is behaving, so bad1a.sh just always leaves gcc with default behaviour. For me on the latest Ubuntu I think that causes things to fail to link again, and the code in main.s needs to call library functions in a way that can cope with them being at very remote addresses?
  * VSL stuff. This makes it possible to assemble the version of main.s that was intended for AMD64_ext and link it on cygwin64 to make a bpsl which at least loads. I suspect it is not functional, but at present that is a separate issue. The scripts bad*.sh try building with various options. pslstubs.c contains stubs of functions that Linxu provided where it looks as if cygwin does not. At present they are just there to get the external references satisfied - it might be better if they bore some better resemblance to the functions that they stand in for.
  * After adding the "-no-pie" option things build MUCH better!
  * Add forgotten comment end.
  * Rename the new snapshot builder.
  * Check in a pile of VSL files so they can be reviewed and tested some more.
  * Correction to x86_64 lisp disassembler: print correct register name in push/pop (was wrong or upper 8 registers)
  * This makes a few minor changes to testsnap.sh and hence snapshot generation. It cleans up the script that sees if a Debian-family Linux has enought packages installed to make it less verbose. It also provides csl/support-packages/necessary-updates.tar.bz which is a source archive of various software tools (automake etc) that it is useful to install if you are trying to build Reduce either on a fairly old release of Linux (Ubuntu 12.04 is the use case I encounter) or perhaps on som eother platform that may not come with a full set of sufficiently up to date GNU tools. Of course people could fetch those sources individually, but collecting them as a bundle of the most needed ones may help.
  * Forgot comment end in last commit
  * More clarification of license statements.
  * I think this may finally manage to make snapshots crewated using testsnap.sh all use revision numbers in their file-names rather than dates. I have tested this on my home collection of machines and virtual machines and now it needs verifying in another couple of places!
  * Standard LISP on Emacs Lisp updates
  * Improve Macintosh snapshot generation scripts.
  * And some more updates to license statements
  * Updated license statements in PSL for 64bit Windows.
  * Missing license statements is PSL source files...
  * And another fix for a botched edit.
  * Correction to previous checkin!
  * Adjust findhost so it knows about Linux Mint.
  * Better support for realvalued(p): functions that are realvalued for certain values of their arguments can now be declared. Added a case for expt, so that (expt something n) is seen as realvalued when something is realvalued and n is an integer. Previously, after a "realvalued x;" declaration, "realvaluedp(x^2)" did return false.
  * Standard LISP on Emacs Lisp updates
  * An yet another typo.
  * Yet further fixex to the attempt to use revision numbers rather than dates!
  * For a conditional in a Makefile "ifeq" seems to need a space after it.
  * Another mess in the transition to version numbers rather than dates in snapshot file-names.
  * Mend the updating of revision_history.txt
  * Fix a spaces vs tab issue in debianbuild/Makefile
  * The start of the revision_history.txt file. This is updates by scripts/commit.sh and is intended to record dates for each revision. Or at least a sampling of those revisions created using scripts/commit.sh.
  * I am going to try to move forward on the VSL front for a bit now...
  * the identification in snapshot names, and it tries to build a file in the trunk directory that will record checkin revision numbers against dates to help provide an index.
  * And again!
  * Yet another error in my shell scripting in testsnap.sh!
  * Yet further fixes to the testsnap.sh script. IN part I am checking each version I have in because I then want to test it on multiple machines and so having it in the main repository lets me be certain that they are in step. The changes this time relate (again) to dealing with backup copies of snapshots.
  * I had messed up the detection of --rc= in testsnap.sh (as well as perhaps other things) in a way that meanst that if you provided any arguments at all the .snapshots file was looked for in implausible locations. Try again!
  * Autoload mrvlimit package
  * Change where backups of generated snspshots go so it should be better if the user has confugured where the main snapshots get put. Try to provide command-line processing for testsnap.sh so you can list either positive targets (eg windows, linux64) or negative ones (eg -macintosh, -rpi) to adjust exactly which snapshots get built. If you do not specify any positive targets it should default to all of them (and you can then trim that down using negative targets).
  * Trying to get a log file put where I want it...
  * More fixes....
  * Fix multiple typos (or just plain glitches) in testsnap.sh
  * Try to arrange that a directive --rc=FILE can allow one to override use of the file $HOME/.snapshots. Put svn logs in the snapshot output directory. Try a tidy up in psl/reduce.img.sh where it set a variable, used cygpath on not a lot and then ignored and replacxed anything it had done.
  * Rearrange .snapshots so that there us a section for each host you might run it on, and within each section there is a set of function definitions that establish the build machines to be used for various targets. The data in there mostly related to the collection of computers that I have access to, but this should illustrate a range of options.
  * Fix PATH for when a windows machine is accessed using ssh for remote execution. I do not really understand why this is needed, but it seems to be!
  * A second place where I need to play games with path-names so that cygwin32 and cygwin64 do not end up disagreeing.
  * Standard LISP on Emacs Lisp updates
  * Issue about Windows builds where the Reduce tree was in a home directory rather than somewhere more absolure on the disc.
  * Correct typo, a bit more code cleanup
  * Slightly better formatting of mrvlimit.red source code
  * Correction to the update relating to installing rsync on cygwin.
  * Further fixes to testsnap.sh (and a chance so that --with[out]-ccache should not be passed down to various sun-calls to configure that would not expect it.
  * Attempt at a better choice of port numbers to communicate with VMs in the snapshot builder.
  * An attempt to make the new snapshot builder give users a chance (in their .snapshots configuration file) to specify the directories to be used during a build, in particular in case it is important (perhaps for space reasons) to put them on a file-system other than the one where the Reduce source tree lives.
  * Fix to try to get Macintosh source archives properly built via testsnap.sh.
  * Adjust the scripts that help get development tools installed so that they pull in rsync, which is used in the forthcoming snapshot generation process.
  * Further improvements (ie bug fixes) to ssh+ssh option in makesnap.sh
  * Small improvements to testsnap.sh. Peerhaps the main one is that if it is not given any arguments it should build snapshots for just the platforms that .snapshots tells it about, and if any platform is not mentioned there it will just log a message and ignore it rather than stopping. This may be particularly relevant for the Raspberry Pi target, where there will not be build machines available everywhere.
  * Make the case in testsnap where a VM is run over ssh behave better.
  * Try to get the names of snapshots more uniform across platforms, with an underscore not a hyphen before the date, and with a date included in Mac and Windows files.
  * Try to get rsync options such that local and PSL builds behave better in testsnap.sh
  * Minor change to PSL compiler for AMD64_ext
  * Update a couple of comments.
  * Two issues here. The first is that I had createa a file called scripts/install.sh, and the autoconf stuff moans that once upon a time it used to use that name for what is now install-sh, and so I most have an obsolete file hanging around. So I have renamed it. The second issue is that at least on Windows the previous version of the autogen.sh script seems to have had a race condition between libtoolize4 and autoreconf, such that when trying to bring the autoconf files up to date in all directories concurrently I sometimes (but not always) got complaints about an inability to update or access ltmain.sh files. To try to avoid that I now run all the libtoolize steps (in parallel with each other) first and then all the autoreconf ones, and on a dozen tries I have not seen the complaint. But that does not utterly guarantee it is gone!
  * Preserve the current directory when building a snapshot on the local host. I now observe that autogen.sh sometimes reports problems with installing ltmain.sh. At present I think I have seen them when it has been run with the default parallel executaion scheme but not when run sequentially. I do not understand this yet. And dropping back to always doing the autoreconf (etc) steps sequentially would be costly. I guess I need to experiment and think more!
  * Continuing work on snapshot build process. This version tries to make the debinanbuild stuff survive on a Raspberry Pi where (at present) PSL is not available. It also does some other tidying up.
  * Minor updates to comments
  * Merge updates to PSL compiler into code base for freeBSD64
  * More update of copyright notices
  * Remove CR at end of lines
  * testsnap.sh can now (sometimes) build a linux distribution when that gets done on a VM hosted on the system that testsnap.sh is run on. However right now there are issues with ssh host key checking that mean that manual intervention to clean up .ssh/known_hosts is needed at times - I will need to sort that out! But before I do I will want to get the Windows building tested and working.
  * Updates of copyright notice in PSL kernel files.
  * Further work on testsnap.sh. It *may* now build for the macintosh when the build machine is accessed over ssh?
  * Update copyright notices in win64 kernel files, remove some extra files.
  * Recompile PSL kernel for win64.
  * Improve new snapshot custmization scheme, and put in code that uses rsync to copy files around in a variety of ways - most of which have not yet been tested or checked!
  * Put in sample code intended to start up and shut down virtual machines in the new snapshot stuff.
  * More iteration on snapshot builder - the code that actually does the work is not there yet, but the framework is falling into place.
  * correction to option to enable autoconf cache
  * testsnap.sh is an INCOMPLETE start at a script that will, I hope, make it easier to build snapshots on various individual machines or on clusters of machines, collecting the results in one place. It is here now not because it is ready for use, but because having it distributed this way helps get it to all the various machines I may wish to test it on.
  * Fix further mistaked in config files.
  * Improve the test for ccache
  * A further iteration trying to make ccache behave for me. Plus a preparatory change in the top level Makefile so that it can call a script in scripts/snapshot.sh. That script is not yet there but the idea is to consolidate snapshot building via it.
  * Remove unwanted trace output from cygalt.
  * Only changes to comments: mostly to indicate license.
  * PSL compiler for 64bit Windows: merge recent updates.
  * PSL compiler for 64bit Windows: merge updates for code generation (mostly SSE2 instructions)
  * Commit file forgotten in one of the recnet updates.
  * Now I (again) attempt to let winbuild use ccache.
  * I am trying to get the "cygalt" utility that flips between 32 and 64-bit cygwin to cope when there are items among the command line arguments that include whitespace. This ia a problem because re-launching using the other cygwin used both DOS "cmd /c" and bash "bash -c" both of which take the command line as a single line of text and so tend to re-tokenize it. And tracking which aspects of the tokenization are done by DOS and which by cygwin so that the information I need persists has proved delicate. My previous implementation did not worry much about inserting escape characters or extra quotation, and seemed to work when there were no whitespace messed, but the desire to go './configure CC="ccache gcc" ...' brought this misery into focus. I HOPE it is better now, but this check-in is mostly so I can do some more testing rather than because I am 100% confident that I have everything correct now!
  * Merge recent improvements to PSL compiler into macintel64 sources.
  * Fix minor bug in AMD64 disassembler
  * PSL compiler: improve assembler code generation so that generated code can be assembled directly, without the previously necessary small changes.
  * PSL compiler: small optimization in code generation. Since we keep nil in a register all the time, we can directly use the nil register to initialize entries on the lisp stack.
  * Correct typo.
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * The attempt to have one copy of config.cache for all libraries and applicationson one architecture turned out to be a mistake - for reasons that I do not fully understand if one tries that the system reports conflicts between the builds of different components. Well I think that this means that for config.cache files to be re-used the build environment in each case must be rather strongly identical. So I have backed off from that attempt (which had been intended to give a chance for further build speedup). There is also a --without-ccache option to ./configure that you can now use to prevent attempts to use ccache to speed thikngs up if you suspect that of being the cause of any unhappiness.
  * A second (or perhaps third) try to get ccache and config.cache used in a proper manner. Please report if you observe adverse consequences!
  * The changes I had put in to use ccache caused trouble on some platforms relating to usage that went essentially    ./configure CC="ccache gcc" --host=something.else where the forcing of CC overrode the selection of a compiler suitable for the desired cross compilation. I need to arrange to insert mention of ccache at some later stage after the cross compiler has been identified and selected. But this is an emergency patch just to restore the prior state where ccache is not used. Apologies.
  * Test program for inspecting the information available to the arithmetic trap interrupt handler. In particular, look at the subtype of arithmetic trap: the actual values differ between operating systems.
  * Start UTF8 support for PSL: some declarations and common functions.
  * Add scripts to generate PSL manual in PDF and HTML form.
  * Teach SPL compiler for AMD64_ext to generate code for jumps and calls to addresses in registers.
  * Minor improvements to dynamic loading in PSL kernel, updated example
  * PSL: remove old file
  * PSL compiler for macintel64: merge improvements from AMD64_ext.
  * PSL for macintel64: fix a bug in garbage collection, introduced during recent changes in symbol hashing.
  * Standard LISP on Emacs Lisp updates
  * The configure scripts now use config.cache while configuring Reduce. A consequence is that if the software configuration of the computer is changed in a significant way then these caches may become outdated and the effects could be confused. In case of dount going "rm -rf cslbuild pslbuild" then re-configuring should sort things out. Possibly "rm config.cache" in the might be useful. But the scheme is expected to speed build up usefully. If the program "ccache" is installed then all use of gcc or g++ will be adapted to use "ccache gcc" or "ccache g++". Do a web search on ccache for what this is about and why it too is expected to speed up builds.
  * PSL kernel for macintel64: Add support fpr dynamic loading of libraries using dlopen.
  * Remove some extra files from PSL compiler
  * If ccache is installed this will try using it while building the CSL-based version of Reduce. And the configure scripts try to use a "configure -C" option to activate config.cache where they can. It is hoped that these two changes will tend to speed up builds.
  * Standard LISP on Emacs Lisp updates
  * PSL compiler for kernel: teach lap-to-asm to generate xmmN register references.
  * GNU Emacs REDUCE IDE
  * Correction to fix re libtoolize
  * Fix access to libtoolize for the Mac
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE
  * PST Kernel for 64bit Linux: add necessary declaration to avoid compiler warnings.
  * vsl/kernel/bpsheap.c now compiles without warnings, following a load of changes to resolve potential confluct between int, long, long long, intprt_t, uintptr_t and size_t. And then use of prinf formats %x, %lx %llx to display same. I may not have got all the changes correct, and this is some way from being ready to test, but "at least it compiles more cleanly". More in the same spirit to follow! -nThis line, and those below, will be ignored--
  * Re-work of some of the PSL kernel C code in the experimental version.
  * Another VSL and PSL-boot checkin. And again this is not a version that is in working order (by some margin). It provides a script assemble.sh that assumes main.s and dmain.s are ready (well it probably picks up the official versions just for now) and then it tries to compile and link in the C code. The original compile-link command used "-w" to didable all gcc warnings, and that was sort of relevant because it was written in the sort of C that I was used to in the 1980s. the relationship between integers and pointers was uncertain in places, functions where defined with no explicit return type, or used before declaration or definition and basically a lot of it felt in need of a refresh. So I have made a copy of the AMD64_ext set into vsl/kernel and will gradually start updating the code with first a view to get the x86_64/Linux version to compile without warnings under a -Wall regime, and then to see if it is easy to merge the versions for other targets so that things end up with just one set of C files to mess with and maintain - albeit that will need to "#ifdef WIN32" style stuff to cope with operating system dependence. While looking at this I observe that if I take the AMD64_ext main.s and dmain.s files I can assemble them and combine them with all the C code under Linux. Under cygwin the code compiles but then will not link because the references to symbol+nnnn in main.s are viewed as ones that the cygwin x86_64 gcc is not willing to count as fitting within the range of a 32-bit relative addreess mode. I expect there are some rules I can use to deal with that. But before I worry too much I will keep working though the C code and tidy it up for use with 64-bit Linux.
  * A couple of additions to make the PSL kernel compile.
  * GNU Emacs REDUCE IDE
  * Implement LINELENGTH for vsl, and this now seems to make main.s get built a bit better.
  * Make VSL suppoty (POSN)
  * Correct indx function: must return character code instead of character
  * Fix things so that toploopeval* gets preserved in an image and so that use of APPLY with an undefined symbol should not crash.
  * Snapshot building: another needed adjustment of timeout to assure successful building on the machine at Brock.
  * Standard LISP on Emacs Lisp updates
  * Remove extra backslashes
  * Make vsl understand a LOSE flag, and then flag INTERN as LOSE so that reading in the PSL version if intern.sl does not break it. Also change build scripts to put literal fragments of constructed files into here documents rather than many many uses of printf.
  * Further improvements to SPL compiler in VSL
  * Remove extra argument to initializesymnam
  * Correct bug in #. reader "macro"
  * A couple of Improvements to PSL assembler code generation
  * Add sample code that scans Lisp executable code and identifies all the function calls. The only special thing involved is that it has to know the syntax associated with every special form.
  * A small further step towards PSL buidling using vsl. The scriupt try-to-make-main.sh does not yet succeed - if only because the top level read/eval/print loop does not propagate compilation to assembly code down through calls to dskin. Thise version has vsl updated so it can dump its image file in a separte place from the one that it reads its image from.
  * Standard LISP on Emacs Lisp updates
  * Increase LONGTIMEOUT to 10 hours to cope with the slowdown after the latest OS updates.
  * Minor improvement to generation of PDF files.
  * Minor improvement of Reduce manual.
  * Cleanup of PSL tree.
  * Add two test cases for MeijerG function.
  * Minor correction to PSL compiler for Intel 64
  * Remove forgotten tracing statement
  * PSL for macintel64: increase size of symbol hash table & merge a couple of corrections
  * PSL for win64: increase size of symbol table, merge a couple of corrections.
  * Standard LISP on Emacs Lisp updates
  * Standard LISP on Emacs Lisp updates
  * Reinstate special treatment for "make csl" and "make psl" in the top-level Makefile, where my failure to understand the rules of the final wild-card section had led me to believe I could discard them. Support %e in printf.
  * PSL: a couple of open ends: add disassemble.b to Makefile, remove duplicate symget.b file, recompile a couple of files.
  * PSL: found and removed more duplicate fasl files
  * PSL: delete old copies of fasl files in wrong directories
  * Adjust autogen.sh (with consequential small changes in configure.ac and Makefile.am) so as to forcibly reinstall libtool stuff on every configure step. This is intended to make libtool behave everywhere. What I THINK was happening was that recent versions of autoreconf would perform the libtoolize step aned so bring everything upo to date on that front, while older versions required users to run it by hand and before calling aclocal. By doing it by hand in all cases I hope to have made things more robust.
  * Avoid trying to compile some windows-specific stuff at compile time when not on windows!
  * PSL sources: remove tracing during compile
  * PSL for freeBSD64: increase hash table size (number of symbols) to 300000.
  * PSL sources: remove duplicate file
  * PSL for macintel64: replace comp files by symbolic links where possible, in order to separate OS dependent and processor dependent files
  * PSL for macintel64: replace util files by symbolic links where possible, in order to separate OS dependent and processor dependent files
  * PSL for macintel64: increase binding stack and catch stack sizes tenfold.
  * PSL for macintel64: replace nonkernl files by symbolic links where possible,  in order to separate OS dependent and processor dependent files
  * PSL for Windows64: increase binding stack and catch stack sizes tenfold;     small change to PSL kernel files, to reduce the differences between different OSes
  * Remove spurious return in function body
  * Remove spurious third argument in calls to fasl-define
  * Further updates to PSL compiler in VSL. It can now generate assembler code for simple functions.
  * VSL printf: implement "%e" for eval of argument, needed for ASM output
  * The compiler now gets some way into LAP. Right now it fails at a tim ewhere it calls id2int, which is a function where I will need some potentially strange simulation for use in my cross-porting process. But still this feels like a little bit more progress.
  * Remove extra copies of files with short filenames
  * Further updates - this does not let the code get visibly further, but I believe it moves things on a little.
  * A couple of corrections/improvements to VSL.
  * A couple of comments on the PSL oddities.
  * Some more spurious eof definitions.
  * Replace leftover definitions of EOF for some architectures.
  * Really this is mostly so that there is a check-n on Chriatmas Day so I have a chance to say "Happy Chriatmas and a Prosperous New Year" to everybody in the check-in message!
  * Adjust the code so that it can try to start bootstrapping a PSL compiler!
  * make-psl.sh script: try to correctly set up things for FreeBSD and Windows. Since the windows binaries need windows-style pathnames, cygwin style pathname of the form
  * Matrixproc needed an update to work with the changes introduced for type annotation.
  * Remove spurious ctrl-z character at end of file.
  * Further changes to configure stuff. I think the main thing I have been tring to do here is arrange that on Windows that when the 32-bit cygwin version is to be configures, built, reconfigured or rebuilt that even if the user is sitting in a 64-bit cygwin shell to start with that there is a switch into a 32-bit cygwin shell to do the work. And equivalently for 64-bit cygwin systems being built while using a 32-bit shell. The number of paths involved has turned out to be higher than I had expected! In the process I suspect I have lost some support for building in directories that have whitespace in their paths. I had also messed up some quoting in the shell scripting, and there may be further instances of that. But her eis a check-in so I can try building of many machines and so test behaviour.
  * configure and configure.ac: properly quote autogen.sh command line. THis is necessary for, e.g. FreeBSD and doesn't hurt elsewhere.
  * Further attempt to improve the reliability of the build scripts and maybe rationalise "configure.ac" a bit. On some platforms the snapshot of wxWidgets that I have here appears not to compile because of ambiguous overloads in usage such as "GetPathSeparators(format)[0u]" where the configure step has not spotted and defined wxSIZE_T_IS_UINT. I guess I need to check how configure is run...
  * PSL for freeBSD64:  Increase system constants: bndstksize: 2000 --> 20000 catchstacksize: 400 --> 4000  Add low-level support for dynmaic loading of libraries  Add debugging output during loading of image file
  * Cleanup of PSL source code tree: replace those freeBSD (32bit) files by symbolic links that are identical to the corresponding Linux files.
  * Cleanup of PSL source code tree: replace those freeBSD64 files by symbolic links that are identical to the corresponding Linux AMD64 files.
  * Merge in r4275 was incomplete due to an editing error. Fix this.
  * Most of the time I leave the generated configure script and all the other things that autoconf/automake/libtool set up for you as they were, but very occasionally the central repository should be brought up to date. If you have autogen etc installed then once you have accepted these updates the next time you reconfigure Reduce your local files should be put back in a state localised to your particular setup. I have tried to review configure.ac as regards shell programming quoting of text (which is amazingly delicate to get right in the face of eval etc!) to make reconfiguration work better. I have also fixed some code in wxpsl.cpp that was out of date, and added a text file describing the experiment I hope to conduct in contrib/typecheck.
  * Standard LISP on Emacs Lisp updates
  * Improved script to reset a checked out tree to match the repository.
  * Smallish patches emerging from wxWidgets activity and trying to build using High Sierra on the Mac.
  * sl.el: Standard LISP on Emacs Lisp updates
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE documentation update
  * sl.el: Standard LISP on Emacs Lisp updates
  * Fixups relating of --with-wx in debug mode.
  * Web site: Fixed navigation and missing footer for REDUCE IDE page.
  * A second attempt at the wxWidgets refresh. I now include libpng and zlib within the wxWidgets tar file, and I hope I have corrected some of the configure flags passed down.
  * Web site: Updated REDUCE IDE page for version 1.5 and made directories viewable to facilitate REDUCE IDE package distribution.
  * GNU Emacs REDUCE IDE
  * Some ages I have had a background activity of migrating the CSL GUI from using the FOX GUI toolkit to using wxWidgets. For a while I have not actually done anything on that. This checkin is at least that start of bringing the Reduce experiement that is "./configure --with-csl --with-wx" so that it uses a recent snapshot of wxWidgets. This step is taken partly because the current wxWidgets snapshot now contains code to support private fonts - a facility I had a look at a while back but where now some kind and helpful person has taken the sketchy implementation I had and got it robust enough to go into wxWidgets properly. I hope that in a while that will filter through to the main wxWidgets release version in various operating environments and then I will be able to avoid having Reduce build a custom private copy. So far I believe I have build using the new wxWidgets on Windows - after I have made this checkin I can try on Linux and OSX. This change ought not to have any effect on people who do not use "--with-wx" on their configure line, and anybody d¥who does use that flag is being an experimenter and super-developer and I hope they will join me in trying to move that version of the code forward.
  * sl.el: Initial experiments to emulate Standard LISP in Emacs Lisp, with a view eventually to running REDUCE in Emacs without any external Lisp support.
  * PSL compiler: Fix a couple of typos in comments.
  * PSL: Implemented exploden, explodecn, explode2n.
  * PSL: minor improvement in printing/explode. Probably doesn't make a difference in real life examples.
  * Merge change 4254 for macintel64 PSL: removed superfluous masking of lisp tags already masked.
  * Merge change 4254 for FreeBSD64 PSL:  removed superfluous masking of lisp tags already masked.
  * A script to use "yum" to install packages that may let you build Reduce from source there. I do not guarantee either that this list here is complete or that it is minimal - but it will perhaps provide a useful starting point. If any Scientific Linux user wants to refine this to ensure that it is really tidy and that it works across a range of releases of the operating system I hope that they will, and that they will then contribute their changes back.
  * Merge change 4254 for Win64 PSL:  removed superfluous masking of lisp tags already masked.
  * GNU Emacs REDUCE IDE
  * GNU Emacs REDUCE IDE
  * Make the .cab files in winbuild rather smaller, both my omitting some content and by using the "-z" flag to gcab.
  * Web site: Added a new book, corrected an error on the independent distributions page and replaced a dash character in the wrong charset with &ndash; on the support page.
  * Replace symbolic link by file (missing target)
  * An illustration of how to get started with a framework for analysing existing Reduce source code.
  * GNU Emacs REDUCE IDE
  * For CSL if you go into the detailed build directory (in other words trunk/cslbuild/<arch>/csl) and go "make noinlines.img" you should then be able to go "./bootstrapreduce -i noinlines.img" and geta  versio nof Reduce where the "inline" qualifier on function definitions has not been applied. This obviously will slow things down, so what is the idea behind this? Well using load!-source you can retrieve function definitions via the !*savedef entry on property lists. In this image functions like "addf" will show "domainp", "lt", "red" and basically all the low level constructor and accessor functions using their names as in the original source. Otherwise for instance domainp would have been expended out in terms of atom, and lt might have become cdar. Having the original names to work with is liable to be a real benefit for code analysis purposes, and has been provided here as a (small!) step in a path to making global type-checking of Reduce a bit more of a possibility. Soon I intend to check in some code that illustrates gaining access to all the source code and tracking at least minimal information through the code using it.
  * Experimentally generate .cab files in winbuild/Output. At present I do not know if what I have there will prove useful or worth distributing, but the extra command in winbuild/Makefile under the package-win target may be something to build on.
  * This should make the creation on a windows distribution in the winbuild directory work using libffi.
  * Remove some unnecessary comments in cslbase/configure.ac, and slightly update ACN-projects.doc because some have been addressed.
  * Website: Start to add Q&A-style information to the Support page.
  * GNU Emacs REDUCE IDE
  * Update the CSL configure.ac so that in a situation where curses seems to be avaiable but fails to link that "-L/usr/local/lib" is put into LDFLAGS to give a chance to pick up a privately installed version. Well that supposes that yuou have authority to put one in /usr/local! Also much messing around to look for tgetent potentially in this new place. This was prompted by experiments on a fairly historical version of centos.
  * GNU Emacs REDUCE IDE
  * Further improvement to the last commit: the substitution was restricted to rational powers of the integration variable.  Maybe this is never used, but it was only a small change to the code.
  * Definite integration package: correct code for detection and substitution of powers of the integration variablei in the argument of a Meijer G function.  Previously it looked at all powers, even those that do not depend on the integration variable.  The new code uses the pattern matcher to separate coefficient from variable.
  * Detect CentOS as a distribution whose name is known, rather then it being reported as "unknown".
  * Minor change to PSL for 64bit Linux: removed superfluous masking of lisp tags already masked.
  * To try to make the CSL version build better on SuSE I am putting a (somewhat arbitrarily selected) copy of ltmain.sh in the Reduce trunk, directory, and when I configure libffi I tell it to stop trying to be clever re multi-arch directories (specifically "lib" ve "lib64"). By telling it not to build its decomentation I maybe remove the depencence on having texinfo installed.
  * GNU Emacs REDUCE IDE
  * This adds libffi as a library where I have a snapshot of its source in the directory trunk/libraries/libffi, and the CSL version of Reduce always builds from that and links to it statically. Every so often the snapshot in libraries should be refreshed. I do this for the benefit of people who do not have libffi installed on their computer (either just the libraries or the development files). I should ideally have a "--use-builtin-libffi" configuration option to enable this rather than use of a system version of libffi, but getting this far is at present enough effort!
  * Corrected numerical evaluation of psi (digamma) for complex argument, added tests for this case.
  * This should make the CSL version on the Macintosh link libffi statically, so that those who fetch apre-built binary do not need to install that separately. I BELIEVE that on Windows all is well in that respect. On Linux the Reduce binaries link againsta  number of dynamic libraries including libffi and libz as well as many X-windows libraries. For now I believe that just using a package manager to install whatever dependencies there are will be easy enough for almost all Linux users.
  * A (trivial!) bug in the new hash table stull caused the fide.tst test file to abort in the CSL version. I hope it is now corrected.
  * For CSL when hash tables need to grow this arranges that the space used by the old (ie smaller) table gets put somewhere where it can be re-used. This should reduce the4 need foir garbage collection especially in the following two cases: (a) hash table are created, grow and are then discarded. The later allocated tables will be able to re-use the space from small versions of earlier tables. (b) when rather large tables are involved they are internally handled as vectors of sub-vectors, and the component blocks are all the same size, so when a big table is enlarged the pool of releaed blocks is liable to be useful for subsequent big tables. Getting this working cost me more time than I would at all have predicted, with the final issues relating to re-use of recycled space for vector-like objects with sizes that were not multiples of the size of a LispObject.
  * improved function mkallmon
  * CSL has a re-written hash table implementation now. The new version can cope more gracefully with large tables, has hash functions that I have thought about more carefully, shrinls tables in a way I hope will be nice when you delete items, ... and garbage collection sets a mark on hash tables which can then be re-hashed when they are next used (rather than having the garbage collector rehash everything even if it was never going to be used again). The rehashing is probably more rationally implemented than in the previous version. For some time I had been thinking of using cuckoo hashing, but following some more measurement I have concluded that here the extra complication in hash insert steps is not justified and that just keeping tables sufficiently lightly loaded does well enough.
  * Update svn:eol-style property for files in CDE package.
  * Update test log file for CDE package (messages only).
  * PSL for AMD64_ext: correct a bug in code generation introduced in last update (addressing relative to register R12 only) Change default value of bndstacksize in binding.sl
  * Package mrvlimit: Code cleanup (mostly removal of unnecessary << ... >> constructs).
  * Website: revised the Obtaining REDUCE page, especially to add more about using Linux.
  * CSL now uses a Mersenne Twister random number generator rather than the somewhat old and much less certain scheme. It also goes to the operating system to collect randomness when asked to select an unpredictable seed for the pseudo-random sequence. The prime-testing code has a small reducction in the size of one of its tables.
  * Website: add a footer to all main pages that shows the date the page was last modified; use the SimplePie library locally to display RSS feeds.
  * PSL for 64bit Linux:  Increase system constants: bndstksize: 2000 --> 20000 catchstacksize: 400 --> 4000 maxsymbols: 65000 --> 300000  Remove a couple of return clauses outside of prog  Add debugging output during loading of image file
  * Website: fixed some broken links in the bibliography.
  * Updated list of known switches
  * Added switch unicode_in_off_nat to have unicode characters displayed as such when nat is off.
  * Website: ensure that the text in the Download REDUCE from SourceForge box stays black.
  * Website: added details of another book.
  * Website: added a remark about running REDUCE on Windows under Cygwin.
  * new module for evolutionary vector fields and their bracket
  * Restore accidentally overwritten pslmem.sh script
  * corrected a misprint
  * This is an update of CDE to version 2.1. Main changes are: 1 - New cde_superfunction module, with new syntax to declare superfunctions. 2 - The cde_cdiff module has been cleared of code related with superfunctions. 3 - The cde_cdcalc module is now ready to be extended with operations between C-Differential operators. It currently covers the linearization of a vector function and its formal adjoint. In addition to the above reworking of cde, a bug was fixed in a procedure in cde_ansatz.
  * fixed one example program
  * Website: added more details for installing and running REDUCE on Windows.
  * Building PSL REDUCE on Windows:  make sure that the 64bit version is built  even when building in a 32-bit shell running on a 64-bit operating system.
  * Another place where CSL had not kept a value safe from the garbage collector. In this case it was with interpreted code binding a fluid variable. This bug arose when I changed instate_binding from being a C macro into a C++ inline function... that meast that its arguments were separate variables (maybe because I had not written a "&" in the procedure header) and so they needed protection in their own right.
  * Fix (I hope) a bug in the bytecode interpreter where over some tail-calls a value was not kept safe against garbage collection. I believe that this was at root a very longstanding oversight (the function poll_jump_back could cause a garbage collection, and a variable called r1 was left live across use of it) so I am not certain whether recent changes made the problem arise more frequently or if we have now just been "lucky" enough to stumble across it and smart enough to have sufficient debugging technology to track something that was not that easily reproducible down.
  * Website: renamed reduce-ide.php to index.php to correct a potentially broken link.
  * Change associated with when "make c-code" gets activated. This may be important inb cases where psl has been configured but not PSL, but I am uncertain!
  * I have re-worked the CSL code that translated from Lisp into C++ so that the generated code is a little less ugly. It is still not exactly super, but it it needs to be read by humands for debugging purposes it is nicer then it used to be. I have then re-run the profiling step, so that if one starts off a CSL build with the directory cslbuild/generated-c not present the version copies from csl/generated-c will be more up to date. The tidy-up job was prompted mainly by me having trouble debugging some fairly minor changes in that area and finding reading the generated C++ horrible.
  * Website styling changes: slight drop shadow and animation in navigation panel, serif font for major headings, better heading levels on About page, removed small caps on Help Wanted page, fonts and animation on Books page.
  * Slight improvement so that if CSL or PSL has not been configured there will never be an attempt to build it.
  * Improve README for Linux build process: describe which packages are required.
  * CPPFLAGS was sometimes restored from OLDLDFLAGS rather then OLDCPPFLAGS leading to - among other possible disasters - a failure to find ffi.h on systems where clang rather than g++ was in use.
  * Fix a typo.
  * Small changes...
  * A typo in this script, whihc could mislead people but ought not to actually hurt any build attempts.
  * I had included <ff.h> twice, whihc was silly.
  * This should be a small cleanup to the CSL generated uNN.cpp files so that they do not use variable name swith such large numbers in them and so that RPLACA and RPLACD get expanded inline. Also a little messing wrt version information, where the concept of version has mostly been replaced by "revision".
  * Build process for Linux packages: make sure that the files in the tar package(s) are copied from the correct build directory.
  * In CSL there had been a garbage-collection related bug. I believe it just arose when there was a function with at least four arguments that called itself (it may have been that only tail-calls would hurt), and then that function was heavily enough used to end up compiled into C++, and finally a garbage collection got triggered precisely at the point of that self-call. The consequence could be an illegal memory reference (SIGSEGV) because a value that was needed was not kept safe in a place where the garbage collector knew to update it when it copied all the heap. I hope that this checkin fixes things, because the bug was horrible to track down, perhaps because very small changes in environment could lead to a garbage collection being triggered one step eariler or one step later than the place that led to failure.
  * Website: renamed Related Packages to External Packages and moved Related Projects to tbe bottom of the navigation menu.
  * Replace symlink AMD64_ext/sys-consts.sl by file, so that its contents can be changed independently of the values in AMD64/sys-consts.sl.
  * Website: added a new page soliciting new developers to help improve REDUCE.
  * Checkin a table of improvements/additions to PSL, and their implementation status fro various architectures
  * Moved polydiv package into the Reduce core: it was loaded together with matrix anyway. Updated manual accordingly. (Note: now using lower case symbols in manual consistently, at least for new and changed bits.)
  * Ensure that libffi-devel is installed on Fedora.
  * Website: attempt to improve instructions for installing REDUCE distributions and add a new page describing independent distributions.
  * I hope this fixes a bug relating to CSL hash tables that cartainly caused the LALR test to fail (sometimes!) and may be the root cause of some other occasional bad behaviour.
  * Debian/Ubuntu build process: allow influencing the build process by preserving the value of the env. var. DH_OPTIONS
  * Set a couple of svn:ignore properties in debianbuild tree
  * Build process for Linux: add a new package "reduce-complete" that includes all files from reduce-common, reduce-csl, and reduce-psl
  * I have a CSL bug somewhere at present, and I have been having real trouble isolating it. It appears to be that something escapes from being properly handled by the garbage collector, and that can lead to what are mostly occasional crashes or badness. Part of what this checkin does is to provide a command-line option that provides fine grain control of when one garbage collection happens. The usage is ... -K4G --gc-trigger=NNNNNN ... where one specified a large general amount of memory to prevent normally triggered garbage collections, and then the special flag to indicate a count on which the first one should occur. The count is something that is incremened and tested every time that CSL considers possibly invoking the garbage collector, so it is sort of once for every cons and once for every allocation of a bignum or vector, and once every time CSL checks to see if its stack has overflowed. Numbers are liable to be in the millions. Ordinary users ought not to have any need for this! But some of them may be interested in the script scripts/chop.sh that can run another command and do binary chop to isolate where the return code for that script changes as its numeric argument is varied. This is checke din now not because it fixes the bug I am hunting but because it makes the tools I am using to hunt more generally available.
  * Website: give the RSS feed iframes a fixed width to improve portability (specifically to Edge).
  * Add libffi-dev to build-dependencies for Debian/Ubuntu packages.
  * Website: moved the RSS feeds to a column on the right of the home page, made the screenshot larger, made minor text updates, and removed the News page from the navigation menu.
  * Website: added a News page that automatically displays two SourceForge RSS feeds. It currently uses an external RSS processing web site, but I want to bring this in house ASAP.
  * The changes here are to help with debugging. First I have added more command line options for CSL:   --force-verbos    garbage collectore messages always   --force-backtrace backtraces even from inside errorset(X,nil,nil)   --force-echo      echo input even after "off echo;" Those can take a script that fails and get more information out about just where it was when it crashed without needing to alter the script itself in any way.
  * On windows I found a case where autogen.sh seemed to need to call aclocal explicitly before autoreconf. I rather think this should not be needed (ever), but having hit it I have put in a patch to sort things out. I also fixed a spelling typo in csl/configure.ac
  * A follow-up commit to merge in other changes I made to CSL while working on the larger adjustment. I have removed several cases where in an ungramatic way I had think like "what if X???" with multiple question marks. That is to keep well away from ANSI trigraph potential woes. cygwin-sanity-check now arranges that a cab-file creation utility will get installed, for future use in building Windows installation packages. Minor adjustments to the wording of some internal diagnostics in lispthrow.h
  * A first observation is that I am aware that this checkin breaks the LALR package. But all the other tests seem to run OK at least on Windows so I want to check all this in to make it easier for me to test on other platforms and so that there is a chance of bug reports from others of you.
  * Website: revised links to other CASs; split off version information from obtaining.php into a new page versions.php.
  * Website: make the SourceForge link at the bottom of the navigation panel look more like a download button and increase the font size in the navigation panel from 80% to 90%.
  * Major revision of Characteristics page, now called Features. Thanks to Raffaele Vitolo for substantial input. Moved LaTeX logo markup into main stylesheet.
  * Website: added front-cover images and improved formatting of books page.
  * Website: added the Google translate widget and marked German text as such in books.php.
  * Website: revised and renamed the Available Packages page to Related Packages.
  * Website: replaced table-based by flexbox layout on the grg32 and reduce-ide sub-pages, which I overlook before.
  * Website: added a page listing available books about REDUCE.
  * Website: replaced \times with &times; in bibliography and added info about Reduce.jl to projects.
  * PSL: correction to lisp disassembler
  * PSL for win64: correction to lisp disassembler
  * PSL for win32: correction to x86 disassembler
  * Yet more messing wrt version identification.
  * Further recovery from macro name clashed with <ffi.h> on the Mac.
  * Use PACKAGE_VERSION rather than VERSION as the version identification, to avoid a name clash.
  * Website: replace the remaining table-based layout with flexbox layout and make the background outside the content area a bit darker.
  * I had omitted a double quote in configure.ac
  * Improve the prospects for the Macintosh and BSD ging to find ffi.h, the header file for libffi. If the fixed extra locations I have put in now turn out not to be good enough I will need to seek a more general scheme. Get rid of consecutive question marks, because I reminded myself about trigraphs, and although just 3 question marks in a row is not one, it seems cleaner and safer (as well as more syntactically correct in English!) to use just a single quote. Arrange that other-cygwin sets an environment variable OTHER when it is used so one can see that the launch of cygwin is sort of artifificla, and potentially cut back on .bashrc activity.
  * YOu now need to go --enable-profile as well as --enable-debug if you want "-pg" style profile information collected.
  * Improve the valid_address() function so it does what it is supposed to on BSD.
  * Website: add the bee icon to the header on main pages above the navigation panel.
  * Forgot a couple of updates in the last commit.
  * PSL: commit pending updates (corrections to land and lor, see r3780)
  * PSL for 64bit linux: minor improvement to terminal interrupt handling
  * Website: set svn:ignore property on non-source objects.
  * Added references to Inside Reduce; removed redundant references to the documentation on the support page, and improved the guidance on obtaining REDUCE.
  * I had been having trouble with building on 32-bit machines. The changes here certainly fix some problems, but I need to do more checking before I am confident wrt stability. Note that I now include <ffi.h> so libffi-dev must be installed if you are to build Reduce - that is because sometimes (soon, I hope) I will move from using my own very ugly foreign function calling code to using the library that everybody else relies on. The 32-bit issues addressed here relate to the fact that on a 32-bit system it is necessary to put in padder words to make vectors end up a multiple of 8 bytes long and hence maintain the alignment I want. There were some cases where I had not initialized the padder words but then inspected them. I hope I have now changed things both so that the words are initialized and also so that they are not looked at too hard by the garbage collector.
  * PSL: compile latest compiler changes (see r3999) for macintel64.
  * PSL: compile latest compiler changes (see r3999) for various architectures (macintel64 still to be done)
  * PSL: small improvement in lisp printer: correct calculation of line positione when a string containing string delimiters is printed
  * Remove spurious fasl files.
  * Fixed a bug in smtqe_fl2uc, which caused incorrect unsat core computations with rlsmtqe.
  * Solved two problems related to ofsfsmtqe. Now we can: 1. continue when a guard evaluates to false. 2. compute Gauss and co-Gauss prime constituents, forbidding these to occur on toplevel because of correctness.
  * Initial import of web site source code
  * PSL for freeBSD64: compile pending updates
  * PSL for freeBSD64: improved signal/trap handling.
  * Better detection of errors during PSL build process.
  * PSL for FreeBSD (32bit): Improved floating point error handling (and hardware trap handling in general)
  * Fix for PSL land of negative bignum and positive smallnum on 32bit FreeBSD.
  * PSL for freeBSD (32bit): Improvements to reading and writing (see r3809)
  * I have now re-worked more things to use the new CSL "large vector support" mechanism, and in particular worked through lisphash.cpp in ways that probably make the code shorter and tidier as well as probably fixing bugs. I have also restored the ability of CSL to generate a messge when a SIGSEGV or other exception is raised - in recent revisons if it managed to trap one it did so silently so you may have got at best part of a backtrace. There should now be an initial error report too.
  * This checkin in not quite complete in that it looks as if it has a bad interaction with sstools, but I want to upload it and then hunt down that effect. There is now the basic infrastructure to allow almost all CSL vectors to be of essentially arbitrary size, rather than being limite to fitting within 4Mbyes which was the previous situation. I need to work all through the code both to check it and to rationalize code that previously used lower levels of abstraction. The consequence of the change that is most immediate is that I have been able to simplify the object-vector (ie package system) hash tables in a way that allows them to cope with very very many symbols in a way better than was the situation up until rather recently. The new policy is that the C++ inline function "elt" accesses memberfs of a general vector, which is either a single block of memory or a 2-level structure with the top level marked as TYPE_INDEXVEC. The function "basic_elt" copes with just the simple linear block. I have provided inline functions to do a range of tests on vectors allowing for th epossibility of index blocks - I now need to migrate the code so as to use them everywhere!
  * Minor improvements to Lisp disassembler for x86_64
  * PSL for FreeBSD: set default heap size to 8MB (32bit), 500MB(64 bit) Better floating point trap handling on freeBSD (32bit)
  * Bugfix in lto_setcover.
  * There are three sets of changes folded together in this checkin. (1) As part of a general adaptation of the CSL source cose so it uses C++ rather than C idioms I have changed a load of places where I used C "#define" macris into uses of C++ inline functions. That gives better checking of both syntax and types. In OPTIMISED code it should not introduce any overhead, but when you compile without optimisation for a debugging session it slows things down mightily. As well as that I am also trying to work through changing many used of int32_t to intptr_t or size_t as appropriate so that there is a better chance of surviving when data structures and memory get big enough to overflow 32 bits. (2) The CSL internal representation for Lisp vectors sets a limit on the largest. Up until now this has meant that an attemnpt to create a vector with more than about half a million elements would fail. I now have a scheme where bigger Lisp level vectors can be stored using a 2-level structure (ie a vector of vectors) pushing the architectural limit up to around 128 Gbytes. This is not full tested or integrated yet. It will (at least to start with) only apply to Lisp vectors that hold Lisp objects - so strings and bignums and various specialzed vector-like items will still be capped to fit in at most 4 Mbytes per object. (3) The above two probably do not matter a lot to most users. The final one might be useful to many. The new syntax    begin      scalar a := A, b := B, c, d;      ...    end; allows you to initialize variable as you declare them. This is achieved by mapping the above onto    begin scalar a, b, c, d; a := A; b := B; ... end so when the initialization forms are evaluated all the new variables will be in scope, and thos enot yet given intial values will have the value nil. I think that use of this will make some code look cleaner. Please view it as experimental for at least a few days until you have verified that it behaves (and complained if it does not)! (3a) The type-annotation for local variables has been cleaned up a bit, so that the generated code is not cluttered up when you do not use any. Bu this means that the full format for local cariables is now    scalar   variable_name [: type_description] [:= initial_value] ... where the items in brackets are optional and either or both can be present. It is still the case that type_descriptions can only be identifiers, and if any are used then a form    (QUOTE ((name . type) (name . type) ...))) will appear at the head of the PROG block. But names that have not been given an explict type will not appear in this annotation. A consequence of this change is that procedure checksums all change, so you may wish to copy from csl/generated-c/profile.dat to cslbuild/generated-c/profile.dat before rebuilding so that you get respectable performance.
  * PSL for win32: set default heap size to 8MB
  * PSL kernel for 64bit Linux:  set default lisp memory size to 1GB  set all signals to be restartable
  * Further windows-specific correction to configure.ac
  * Correction to the configure script - relebant for Windows builds.
  * This has re-profiles the CSL version. For better performance either delete your whole cslbuild directory and re-run ./configure, or just copy csl/generated-c/profile.dat to cslbuild/generated-c and then recompile with enough energy that the stuff compiled from Rlisp into C++ gets regenerated.
  * I have re-worked the rlisp parser a bit. It can now allow single words to appear in a place where they might be type specifiers in procedure headings and in the variable declarations at the start of a begin..end block. These are at the moment limited to just arbitrary symbols as type specifiers (I expect to extend on that later), and at present the extra information is not really used. Well for a procedure it ends up stashed on the property list of the procedure name, and for local variable the generated (prog...) block in the parse tree has the type annotations grafted in concealed within a QUOTE where it will not lead to any calculation but where it is potentially available for analysis.
  * Fix a typo.
  * The Rlisp parser can now (if the !*acn flag is set) parse    scalar a:type:=initialvalue, b, ...; syntax, but at present it then throws the extra information away so that it presents the same material to later parts of the system as they have had to cope with up until now. I am also taking a view that compilers can optimise equality tests against symbols so that "if a = 'somesymbol then..." can be compiler-transformed to use an EQ test rather than an EQUAL one. And then "a = 'somesymbol" looks cleaner to me that "a eq 'somesymbol", so I have changed some parts of the code.
  * The change in cslbase/isprime.cpp is a further step reducing the size of the tables. cslbase/Makefile.am removes a hack I put in a month or so back that was to smooth a transition awat from using make double-colon rules. It also tried to tidy some messages up a little.
  * PSL for Win64: apply latest improvements to Lisp disassembler.
  * PSL for Win64:  1. General cleanup of C code for type safety , to avoid compiler warnings  2. Do not raise floating point hardware traps.  3. Set default heap size to 1GB
  * cslbase/fatbinary.sh is a re-work of the stuff that originated in the winbuild directory, and is a script that (with a fair following wind) may manage to make Windows binaries that can run on all possible variants of windows. As of this checkin it is freestanding, but there are two things I intend or wish to do with it. One will be to update filed in the winbuild directory so as to use it. The second will be to arrange that "make install" on a Windows platform can activate it yto make a composite binary for for installation. Before I get to the second I may need to adjust things so that use on systems that do not have both 32 and 64-bit cygwin available are copied with - for now it will ONLY work if you are on a 64-bit windows with both cygwin32 and cygwin64 installed.
  * More mistakes/typos/messups...
  * Correct some typos (involving unmatched string quotes) in configure.ac
  * This represents quite a lot of re-work of the configuration and build scripts. That means that there is a risk that something will have ended up broken in the process - so PLEASE report to me if things go wrong.
  * Correct reference to wrong variable n instead of b in pslrend.red.
  * Now I try to have "make install" behave a bit better for PSL
  * Further small corrections!
  * Fix a typo.
  * Something for the "man" directory...
  * (1) small improvement to isprime test. (2) other-cygwin.cpp can now force 32 or 64 bit cygwin as well as     just flipping between them. Changes to configure and make scripts     that will eventually (I hope) exploit that. (3) Linux installer updates. Still not certified finished!
  * Correction re the uninstall target.
  * Further corrections to the Linux "install" target and a start at an "uninstall" one to go with it. The next challenge will be to sort out the Windows world some more!
  * Fix re /bin/sh ve /bin/bash support (pushd/popd)
  * This is a a first cut towards making "make install" work on at least some platforms. At present it should be viewed as thoroughly experimental, and there is no "make uninstall". So far if you are building on Linux and use "sudo make install" it should try to put file in a structure just like the one set up in the *.deb or *.rom files. If you have used the default setting for "configure" these will go in /usr/local, so you may wish to consider "--prefix=/usr" if you want to put stuff in /usr/bin etc. I have not yet understood all of what I may want to do for Windows and Macintosh. I have do not support the GNU "DESTDIR" option. This is not yet really tested and because it will tend to put files in public places I might suggest that you try it in vitual machines where you have taken a snspshot so you can roll back from it - at least for now. But I hope some of you will try it and provide feedback and comments.
  * Remove the cslbase/mr directory since I have put the sort of thing it contained elsewhere on sourceforge as part of the process of creating isprime.cpp.
  * PSL for macintel64 trap/signal handling: Print type of arithmetic exception, handle more signals.
  * PSL for macintel64: sysreadrec calls unixfgets instead of fgets so that interrupted reads are restarted.
  * PSL kernel for macintel64: amke sure that system calls are restartable after a signal,  add a new function unixfgets: like fgets but automatically restarted
  * PSL disassembler for macintel64: fix printing of symbol references
  * bare-psl start script for macintel64: use env. vars instead of absolute paths
  * PSL for macintel64: make sure that characters with high order bit are not converted to sign extended negative integers during printing.
  * PSL for macintel64: set default heapsize in bpsl executable to 1000MB (which is the default in all scripts anyway).
  * PSL for macintel64: Correction for reading characters with high bit set from terminal
  * PSL for macintel64: Lisp disassembler computes correct target address in PC-relative addressing
  * Use land() rather than remainder() to reduce some values mod 4 or 8. Hook on to use the new CSL built-in primep64 functionn.
  * An a file isprime.cpp that can check values up to 2^64.
  * PSL for macintel64: Better code for Lisp disassembler   (still not satisfactory in resolving addresses in modR/M bytes)
  * PSL for macintel64: Correct printing for non-finite floating point numbers,  let (quotient 0.0 0.0) return an error
  * I am henceforth going to insist on C++-11  support, which carries with it noreturn annotations, type trails, static asserts and in general just about enough that it becomes ugly to avoid it. On some platforms (eg Ubuntu 12.04 and earlier) this will mean you need to take special action to ensure that a sufficiently new g++ is in place (and that may involve configuring extra software repositories and generally messing around - but web searches will tell you exactly what you need to do). There is some sort of constant tension between compatibility with the past and exploiting newer language and library features, but since Ubuntu 12.04 is now officially out of support (as of April 2017) I will dare rely on things that need ugly update to it.
  * Remove some spurious RETURN forms outside of prog
  * A number of corrections/improvements to x86_64 code generation in the PSL compiler
  * Improvements to Lisp disassembler for x86_64.
  * There was a bug in CSL such that if you were in the middle of passing a gensym to intern, and that gensym had not previously been printed so a name4 for it had to be invented and craeted, and if that triggered garbage collection, the effect could be a value not being preserved over garbage collection and hence possibly calamitous and unpredictable disaster.
  * There were doubles quotes missing around a string.
  * Recomputed and hand-checked regression references on alfred.
  * Recomputed qepcad reference logs on alfred. Qepcad on the Mac is not stable at all, and I actually have some doubts also on Linux.
  * Print complete warnings about fail McCallum projections.
  * Bug fix in qepcad variable extraction and recompited regression reference logs.
  * Adapted to new Qepcad interface.
  * Adapted some regression tests to changes in the Redlog interface.
  * If you launch the windows version of Reduce that gets installed by the windows installer, and then while it is running you use the task manager to kill the pask called "reduce.exe" then that may leave a windowed reduce still running and you need to kill it too. In such a case you may find a temporary file with a name similar (!) to T40d3f9b.exe present in your Windows home directory. My recent check-in had been an attempt to ensure that Windows would get rid of it, but was not good. This reverts.
  * Undo checkin 3932, as it was wrong.
  * Several headings here: (1) the test for an integer being prime now uses the best hashed method I have found so far for 32-bit numbers. Then a deterministic test that I can optimise later for values up to 64-bits. After that a BPSW test (Miller-Rabin followed by Strong Lucas) where there are at present no known false positives at all, and plausible estimates for the first such are amazingly high.
  * Use gcc intrinsics that can count the high or low zero bits in a word to implement MSD and LSD (provided that they are available), and while looking at that make the behaviour of LSD more rational.
  * Preparation for a check-in in the CSL source files that makes an incompatible change to the behaviour of "LSD" that makes it behave the way that its name suggests!
  * PSL for 64bit Linux: teach compiler about sqrtsd instruction, add test file for sse/sse2 compilation
  * Get rid of some more warning messages during CSL compilation on the Mac. Implement logbitp and fix up integer-length. A yet further small enhancement to the 32-bit primality test that shrinks the lookup table by one entry.
  * PSL for 64bit Linux: Better handling of hardware traps and signals.  Improve error message on arithmetic exception by distinguishing between subtypes (ie. integer divide by zero, floating point overflow/underflow/divide by zero, etc.)  More signals recognized, e.g. File size limit exceeded.
  * Fixed but in let unfolding.
  *  add a comment to auto-generated QF_NRA files
  * Removed debugging output from vs_applyfn.
  * Reset Rlisp parser after unexpected end-of-file condition.
  * Provide service rlnra2qf. (eliminate-quantifiers) creates a form and prints a result instead of pretext now.
  * Provide (eliminate-quantifiers).
  * Starting to disentangle Pascal type definitions. Not done yet and no start yet at making use of the collected information, but it is the end of the day so I want to check in what I have done.
  * Moved some SMT-related code from clmisc into smt. Support NRA.
  * t small changes to the Pascal to Lisp conversion that start to separate out declarations from execuatble code and provide more of a framework for the propagation of type information.
  * Yet anmother fix to Makefile.am
  * Second try at the double colon thing
  * A typo (well more a complete collapse of concentration) in the floating point cube root code.
  * Reduce (and CSL) generate dependency info automatically, and that ends up in files csl.dep, reduce.dep and bootstrapreduce.dep. The scheme up to now used GNU make "::" rules. Sometimes if files got messed up those could end up clashing with single colon rules and cause confusion. So after further reading up on the matter I have changes to generate single colon rules so thjat renamed or deleted files should not cause disaster. And for the next while to ease the transition I have put "sed" scripting into many places in the Makefile.am that globally and often redundantly update any *.dep files to the new style.
  * A file I had faile dto check in last night.
  * (a) Correctiuons to lufylib.red so it codes and decodes floats better. (b) Add some code in cslbase/uint128_t.* that can simulate 128 bit integers     where the local C++ compiler does not have an integer type that is     that wide. Then adjust header files to include and activate this     when needed. (c) Include the latest and smallest table for primep32 that I have. (d) Correct the printing of single-precisoin floats that needed to be     displayed using exponent notation.
  * I now arrange to be able to create a prettyprinted version of the Pascal code to make review of translation of it easier, and I have thought a bit more about coping with Pastacl variant records and the like, but have yet to implement everything. lufylib.red is a place for support code.
  * Fixes around printing. Introduced "interval" as default value for option :model-values.
  * Smt yields models also with fallback cad now. anu_evalf catches overflows and returns "NaN" then. Added colon to list of valid symobols within an identifier for smt. Adapted tst file and rlg.
  * Added computation of models in form of (possibly negated) equations in module ofsfic. The main features are: - Models are computed only for the satisfiable case. - Answers (in form of ANU assignments) are extracted from CAD computation. - Standard answers are computed for nonstandard symbols. - Resulting ANU assignments are compared to decide which variables are equal.
  * Renamed wrapper procedure vsnd_evalqff to qff_evalatp.
  * Removed unused variables in ofsf_qemkstdans.
  * Written AEX and ANU reordering procedures.
  * Test file for smt module. There is an error with PSL, which is not a PSL problem. See bug #77 in the tracker.
  * The newer primep32 function uses set-small-modulus and hence if that is less than 2^32 it will give trouble. I fix it here for PSL. It is probably an issue on 32-bit versions of cygwin too, and I will need to check that.
  * Removed the old rl_mkservice and rl_mkbb macros. Removed old a2s and s2a functions. Moved rl printing into a separate module. New rlabout. Fixed some old headers for this. lto_string2id handles non-alphabetic first characters correctly now, in particluar integers.
  * Restored mma interface.
  * All relevant functionality has been migrated to rlblackboxes and rlservices.
  * Major changes in the Redlog interfaces. qepcad and mma have been moved into package ofsf. This required modifications of Makefile.am in psl and csl/cslbase and of create_*_bundle.sh in csl/cslbase. I did automake and checked in also the generated files. Still, a full rebuild might be a good idea.
  * Fixed a kernel ordering-related bug in ofsfic_process!-coe.
  * Ortocartan in the contrib/ortocartan directory is an independent Lisp coded package used for computing cuvature tensors and the like in General Relativity. See its manual and the example scripts in the ortocartan directory to see what it does and how to build and use it. Thanks to Andrzej Krasi´nski and Marek Perkowski for contributing this.
  * removed cl part of experimental straight line code
  * As per recent commits that add csl and bootstrapreduce to distributions, this should do so for the pre-build Mac version.
  * Removed experimental straightline approach.
  * Moved further services to the new system. apnf is miniscope now.
  * This checking should arrange that csl and bootstrapreduce are included in a Linux release.
  * fixed missing assignment with lto_insert
  * Moved some services to the new system.
  * Various fixes.
  * This adds a copy of bootstrapreduce and of the raw CSL Lisp system to the windows distribution. The "bootstrapreduce" version of Reduce runs significantly more slowly than the normal "redcsl" or "redpsl" version, but it will sometimes be able to deliver clearer diagnostics when and if you are investigaing an internal failure. It also has all the Reduce source code available in the spirit of "reflection" so that Lisp code can operate on it. Accessing it is for specialists only! If you launch bootstrapreduce from the start menu by clicking you will get a dummy console window that you can ignore. "csl" is (one of) the Lisp system(s) used to build Reduce and is made available for the benefit of people who wish to use it directly. I intend to make equivalent changes to the Linux and Macintosh installer building scripts next.
  * Put help system into a temporarily stable state.
  * The biggest fun here is mr.cu which I can build using cuda and run using am nVidia GPU. It does what the previous program mr2a.cpp does - ie makes a catalog of 32-bit pseudoprimes to all bases up to 0xffff. On my Jetson TX2 (which is a pretty low-end CUDA device) it is still fairly dramatically faster than the multi-threaded CPU code, as well as using much neater code to express the concurrent search. I think I now need to do the same exercise using opencl, and buy myself at least a mid-range graphics card (which should be faster again by a useful factor). I have changed isprime.cpp so it takes a special case on inputs less than 4086 and just uses table lookup in those cases. The table that it uses is not very large and this feels generally a good deal.
  * revised and simplified module ofsfic
  * fixed smtqe_fl2uc
  * The optimum is not the first ansewer when using xopt for optimization.
  * Correction for an error with nested rules: the input
  * work on first working prototype for SMT QE + a few fixes
  * Added smtqe_fl2uc.
  * Added lto_transposip, lto_id2int, lto_int2id.
  * the first SMT QE prototype
  * CAD returns unknown in the sat case (no model)
  * Fixed a bug in aex_bind + updated a few related comments.
  * Another fix in vsnd_ans!-dgs.
  * Fixed a bug in vsnd_ans!-dgs.
  * Fixed a bug in vsnd_ans!-epsilon.
  * Fixed a bug in aex_bind.
  * Fixed typo
  * comments + minor reorganizations
  * Keep assertions in correct orders and do not reverse infcores.
  * Infocre computation with fallback CAD has bug. Disabled for now.
  * Added module ofsfvsans (for computing standard answers) along with a temporary entry point.
  * Added static "degree" . "real type" -> "real type code" alist.
  * Written function aex_realtype.
  * working on smt; several fixes
  * added missing file
  * Added missing files.
  * Working on SMT in Nancy. Redlog help system is WIP but stable.
  * Incremental enhancements.
  * There was a genuine straightforward error in bignum addition on 32-bit hosts. There were also issues with divising a bignum by a float - and those did not show up in tests on a 64-bit machine because there fixnums extent to 2^60 bits. However testing on a 32-bit system triggered the bad case much more readily. With these fixed the 32-bit hosted versions of CSL behave better again. Otherwise just incremental changes in other stuff I have been working on.
  * Here we have a primep test for 32-bit integers that works using a small number of initial filters and then a single use of the Miller Rabin test. The witness for that is selected using hashing on the input such that the test is always reliable - ie so that there are no issues with pseudo-primes. I have a version coded in rlisp in alg/zfactor and one in C++ in csl/cslbase/fns3.cpp. The directory csll/cslbase/mr contains copies of the programs used to derives information about pseudoprimes and then select a hash function and create a table that make sit possible to avoid then - and then to do an exhaustive check on all numbers from 1 to 2^32 to verify that the results are as they should be. I make some attempt to get the size of the magic table that is used about as small as is possible.
  * Fix for a spurious "improperly defined in terms of itself" error.
  * Arrange that the Makefile is more generic (eg I can now run this on a Mac), and continue translating a wider range of Pascal constructs. This now generates somewhat over 6000 lines of Rlisp, much of which looks half plausible. And that feels like a quite modest expansion as compared against the bulk of tex.web. But when one looks at the code much of it is ugly! There are or corse no comments in the generated Rlisp, but its logic should be an exact match for the description in "TeX: the program" and the litany to be recited is that in-line comments will not be useful while the structured explanation in that book can be!
  * Corrections so that the scripts that build a Windows installer will run when launched from a shell that is using the 64-bit version of cygwin. The previous versions were only OK if you ran them from a shell under 32-bit cygwin.
  * Some types changed from into to bool
  * Changes so that a 32-bit PSL can be built when the built platform is the 64-bit version of cygwin rather than the 32-bit one.
  * Further small fixes. I hope.
  * Correct a type in configure.ac that I believe led to exactly the same code compiling happily on Windows and Linux and being rejected with an error message on the Mac. Make use of grep more conservative to get some scripts rto work better on the Mac.
  * Use SetErrorMode so that having empty drives that might have contained removable media doe snot mess up the installer.
  * rprint was mapping upper case letters to lower case, and so if you fed it for istance !Ab!Cd it would print out !ab!cd. This behaviour is possibly useful by default if there is a risk that the input Lisp might be all in upper case, but if it is carefully in mixed case the effect is bad. So I disable the case folding if neither !*raise nor !*lower is set. I expect that at present one or other of that will be set by default so this ought not to change behaviour for the ordinary user.
  * Check in two more files
  * Change name to LuFy to avoid confusion with an uFy that exists elsewhere. Incremental changes.
  * Correction to some subversion properties.
  * Remove a file that was checked in my accident abd that is not needed"
  * uFy starts as a translation of the original literate TeX sources into a form parsable by Lisp. It is part of my continuing neurosis about wanting to be able to get Reduce to display maths really nicely. In the state of this initial checkin the Pascal form of TeX is all parsed, but some syntax contructions lead to null branche sin the parse tree. The tree is also in an ugly format. The next step will be tofinish off semantic actions in the grammar so that nothing is lost in translation, and then arrange to read what results into Reduce and start transforming the parse tree to make it gradually closer to executable Lisp code. Beyond that come two steps that I do not yet understand. One is "give an executable file built from tex.web, how does one create a set of support files so that it will process LaTeX?" and the second is "how can the code be modifies so that rather than using file input and output it will support a direct procedural interface". As always volunteers to join in would be welcome.
  * PSL compiler: correct a code generation bug for nested bindings like   (prog (...)     ...     ((lambda (fluid-var) ... (return nil)) value)     ...   )
  * With luck the RATIONALIZE function now works on 128-bit floats as well as on standrad ones. This has been a certain amount of fun to implement, but seems to me to be a fine illustration of how Common Lisp (which asks for this facility) did not listen to the YAGNI (You Ain't Gonna Need It) principle and stuck in a whole load of things that may entertain - or possibly frustrate - implementers and distract them from things that might matter to stick in capabilities that almost nobody will ever want to use. But hey - that has ticked off another issue that had been left pending for quite a few years. The code is in cslbase/arith04.cpp if anybody wants to check it (and in particular if anybody wants to think through really carefully whether there remains scope for integer overflow tp wreck its behaviour in edge cases).
  * Get the target "flatcsl" working again. This compiles all of CSL at once and hence ghhives the compiler a chance for broader global optimisation. In one case that reduced the size of the csl executable by a "massive" 3%. That version is not intended for very general use, but ensuring that everything compiles as one has led to further code cleanups and that is a good thing - so this check-in has some rather general cleanups as well as arranging that "make check" builds flatcsl as well as the other test and demo programs.
  * Avoid name-chasl on biggest_hash when building CSL as a single "flat" program.
  * Extend newfront so that a command "rfboot" is created to run the bootstrap version of Reduce (when it is available).
  * I also needed __STDC_LIMIT_MACROS defined for use with older C++ systems...
  * Here I have (yet) another go at compatibility issues. This time it is INT64_C() and the need for __STDC_CONSTANT_MACROS on some platforms that are still supported but are not amazingly up to date. I am now going to insist that <stdint.h> and <inttypes.h> are present, but for the benefit of awkwatd C++ systems I hope I work around the fact that in C++ the type intptr_t is "optional".
  * Let me follow up on the previous checkin, which may have mended things on mac/clang but broke on other platforms that use gcc! And if some helpful person can send me personal email to set me straight about C++ that might be good. I had code along the lines of the following:
  * clang on the Macintosh was failing to compile things claiming an ambiguity when an intptr_t argument was passed to a function that had overloads for int32_t, int64_t and int128_t. Surely intptr_t should have matched one of those better than the others? Anyway I have now put in an explicit overload for intptr_t and things compile again. Also in arith03.cpp there were a couple of places where I had && rather than &. I believe that the mistake only hurt performance (marginally!) but it is better fixed.
  * Fixed a typo in an assertion.
  * Fixed one incorrect argument type.
  * Fixed one incorrect return type.
  * Fixed incorrect types with asserted procedures.
  * Corrected several types with asserted functions. There no bugs, only incorrect declarations. redlog.tst runs without any assertion viloation now.
  * Removed redundant documentation; now all documentation is in the main Reduce manual
  * This is a small set of upgrades TOWARDS making rationalize work on long floats. I asked to speculate I would guess that I still had around 5 bugs in the code let to be sorte dout bvefore it actually works, but I believe that this version compiled, has broadly the right structure and the chanmges ought not to impact anything other than the single function rationalize in the single case when it is given a 128-bit float as an argument. So this arranges that my current snapshot is saved at sourceforge, and would allow anybody else who was keen to pile in and work out where my remaininig typos, brainstorms and utter misconceptions are.
  * I had omitted a type (bool) when I converted the previous macros equal, c;_equal etc to be inline functions. And then gcc one some platforms accepts that without fuss, so I had not noticed until I checked on a different platform that was more pedantic. Apologies.
  * I havce mended the detection and use of __int128_t for CSL (where it is available), and have had a lot of fun implementing a rationalize function that maps from a floating point number into a rational with about as small numerator and denominator as will be needed to capture the value of the float up to its precision. Thie check-in only has the skeleton of the rationalize code for 128-bit floats, but it¥s a useful place to upload a snapshot. oddp and evenp were wrong in that they returned results rather than errors if given short floar args. Negation of long floats had been broken and should now be fixed. The function ROUND with 2 args should now work if given intgere args rather than raising a diagnostic that basically indicated "have not done this bit yet". I have also given myself a version of frexp for use on 128-bit floats.
  * The bulk of the factorizer code was written between 1979 and 1981, ie not far short of 40 years ago. The core ideas are notionally straightforward but the Zippel-style treatment for sparse polynomials ends up with a great many intertwined tests and many special cases. The basic idea is that while factorizing (or GCDing) you form images of input polynomials by substituting small integers for all but one of the variables and then pick a prime and reduce the coefficients in an eventual univariate image modulo that prime. Then you reconstruct, with the Hensel Construction the main tool. But when done in a straightforward way the Hensel Construction has very bad consequences when your polynomials are sparse and the evaluations you have made do not give a faithful image of true results - you tend to reconstuct a dense polynomial and old stop when you hit a coefficient or degree bound (or more probably when you run out of time and space). The spareseness preserving schemes use an heuristic that if some coefficient is zero in an image polynomial perhaps it really is zero in the full result, so you use a variant on reconstruction that assumes that and sees if it leads to a valid full result. But of course especially if you are using small integer value substitutions and for awkward cases you can get zeros in an image that are a consequence of cancellation in the image-forming step and so the path taken will not work. That situation may not become apparent until a significant amount of work on sparse interpolation has been done. It can (and does) arise because of multiple special cases all arising together. In the checkin today I have disabled one of the bits of special case detection that presumably saves resources when it works but that was leading to trouble in other cases. I have disabled it as an admission of my inability to work though all the ancient code and recover all the reasoning behind it (even though "on trfac" and "on trallfac" still produce what I count as being remarkably carefull trace output). This chance may be presumed to slow factorization and GCD down in some cases, but it also fixes a failure in others. I would really welcome anybody who had the time and energy to review all that code rather carefully and check the logic carefully both for special cases currently not exploited and for paths that could lead to misery.
  * Reduce fancy printing: put {...} around limits of definite integral, evan if it seems unnecessary.
  * This has a bunch of general tidy-up changes such as removing code that is no longer in use. But the most worthwhile change is that it addresses what I believe to be a 28-year old bug whereby MOD did not keep something safe against the garbage collector, and so in some cases could lead to behaviour where a non-Lisp value crept into the Lisp world and caused havoc. In support of the seriously time-consuming process that tracking that down has been I have added a function that is only intended for use by people debugging CSL itself but that for them can be used to cause garbage collection to be triggered at fairly precisely controllable times. While the error and its correction were trivial once isolated, tracking down where it was had been seriously time-consuming, and given one example of a bug that can last unreported for that long one can not rule out there being others. So I will need to run all my tedious tests for quite a while further to check that I do not manage to uncover more!
  * More efficient checking in SFListP and KernelListP.
  * Always produce squarefree factors with sf_factors.
  * PSL compiler: add comments explaining the failure of correctly compiling a return clause inside a lambda with a nonlocal variable binding inside a prog,  and add examples for testing this and similar cases.  Failure is not relevant for Reduce, but should should be addressed.  Note: address also the fact that the compiler happily accepts a return clause outside a prog and treats it like an implicit prog around the currently compiled function body.
  * Provide an incomplete sfto_fctrf, and start using it as consistently as possible.
  * Provide a sanity check for Fedora.
  * In cslrend.red I have not annotated a buncg of functions which in CSL have optional arguments so that Rlisp does not moan when they are us3ed with one arg-count in one place and a different one elsewhere. Three or four months ago when correcting a lonmgstanding long division issue and cleaning up the code  in that area I had left in a garbage collection interaction that could sometimes lead to bad behaviour. After heavy testing I managed to narrow this down (introducing a little CSL function that I can use to help me adjust exactly when garbage collections happpen so I could do an exhustive test to see where GC led to trouble). And I now hope that is fixed, although while I understand the error I found in the code I do not fully understand how it led to the bad effects I had observed.
  * Minor edits.
  * Fixed a bug in ofsfic_filterlocalcore.
  * Romoved another reference to rldynamic.
  * Removed old experimental code, which simulated a property list at the beginning of formulas.
  * Correction to LOGNOT. I guess from the fact that nobody had reported this that it is not a very heavily used function!
  * Remove softfloatdemo as a target if Makefile - it had been there when I first introduced use of the softfloat library, but now that has been in use for a while it is maybe not required, and anyway dealing with just what other files from CSL it depended on was becoming problematic.
  * Added a missing quote.
  * Added systo.red, which had been forgotten with my previous two commits.
  * The new AM interface of Redlog did not notice when a servie existed but was not available in the current context. Finally removed all explicit loading of rltools. Added test files for acfsf, and added dcfsf test data to redlog.tst.
  * Many nonlcoal changes in Redlog: (1) Reduce CSL/PSL dependencies. (2) Better support of autoload for rltools. (3) Remove explicit references to "on1/off1 'assert" in the source code. Assertions are compiled in when REDUCE_ASSERT=1 is in the environment now.
  * Used rfcslb instead of rfbcsl.
  * Added support for rfbcsl.
  * More work on rationalization of the code for plus and difference so that the dispatch on all the various arithmetic types is better implemented. Code in csl/cslbase/bigarith.red tries to test integer arithmetic. That is designed for us with CSL but I have tried retrofitting some PSL support, but that is not (yet) fully finished or debugged. I will still want to go through and re-do the type disptch for times and the division/remainder functions, and also the smaller number of unary generic arithmetic functions. But maybe bigarith.red will help me to find both long-standing and any newer arithmetic bugs. I will then need a similar style file that will check arithmetic with floating point components, but I will write that assuming that integer arithmetic is OK.
  * Arrange that symbols that have properties that are implemented using the CSL "fastget" mechanism but that are otherwise dull end up in the result returned by oblist().
  * Fixed a bug where cl_sordp() was called with tagged formulas instead of formulas.
  * Eliminated some explicit loads for rltools in favour of autoload.
  * Removed redundant procedure ofsf_genavar().
  * Fixed a bug in anu_rename.
  * Fixed a bug in ofsf_gelimset_orig; similar to fix in commit r3951.
  * Fixed a bug in ofsf_elimset_orig; in very special cases this procedure could produce invalid SQs.
  * Having eventually tracked down a simple type in code to multiply 128-bit floats to get a 256-bit float result I now believe that reading and printing long floats as significantly improved.
  * Modifications to definite integration code:  Added some comments,  removed unused rdwrap code,  replaced explicit setting of allfac switch be rebinding !*allfac,  rewrote some code lines to be better readable,  added a lot of tracing when switch trdefint is on.
  * Correction to the rationalize function that turns a floating point value into a fraction.
  * This may address some glitches where clang on the Mac warned about some things in code that is not in fact used by existing Reduce much and failed to compile some other things that gcc let through. But more importantly it continues development of support for floating point (icnluding the 1280bit long float format), cleaning up code in a number of ways. It also gets functions like integer-decode-float working for long floats in a way that is going to help me check and debug their workings....
  * ofsfic: Properly use variable order optimization when calling CAD routines.
  * This is a further round of work on floating point. I have re-worked the CSL implementation of lessp and greaterp, and prepared the ground for other arithmetic operations. In the process the support for various floating point formats has been moved forward, but perhaps more importantly I believe I have fixes¥d some long-stanidng bugs involving comparisons between floating point and big integer values. In this version if you try to read in a long precision float such as 1.0L0 into Lisp you will get a load of silly trace output which is there because at present it shows some rounding errors during reading and some formatting mistakes while printing the 128-bit long float values. But I have put in enought updates that I want to cement those with a check-in and then get back to understanding the long-float mistakes and fixing them as well as reviewing and enhancing other arithmetic. There is also now a bariable gcknt!* in CSL that is intended to do what the same variable does for PSL.
  * a few type annotations
  * A couple of changes to the defint package:  I replaced explicit cons'ing of !*sq by a call to mk!*sq,  rewrote some inequality tests to use the more general simp!-sign  instead of explicitly trying to calculate both sides in rounded mode.
  * I needed to update some file in the FOX directory to track changes I had made in cslbase, but had not noticed because I had not tried a rebuild full enough to re-make the fox libraries.
  * Updated smt_processGetModel() to the new return syntax of cl_qea().
  * Defint package: add a couple of test cases that do not work properly.
  * Some regression test files produce now extra lines in error messages.
  * Another fix for the defint package: avoid another case of car/cdr of an atom.
  * Small addition to regression test script:  Since error messages may print the full pathname of the test file,  try to strip the directory part of this pathname before comparing.
  * Recent change in rule printing changed output of regression test file.
  * Add regression test file for recently discovered errors in defint package.
  * Correction to package cdiff: use renmaed variable in test file.
  * This is a first step towards better floating point handling in PSL, first for 64bit Linux.
  * Teach the PSL compiler how to evaulate (wnot constant) at compile time
  * PSL compiler for AMD64: Correct computation of instruction length of SSE/SSE2 instructions,  so that jumps are now computed ocrrectly.
  * Fixed a bug introduced when merging stuff from the "jaroschek" branch.
  * Be extremely conservative about simplifications for the time being.
  * Changed module name and prefix to smt. Adapted code to ofsfic.
  * CLeaned up module structure.
  * Added date.
  * Fixed a missing semicolon. r3924 did not build because of this.
  * Better printing of double tilde variables (~~x) in rule lists.
  * More corrections to manual
  * A few more correction to the manual source files
  * A couple more formatting errors corrected in manual source.
  * cursym!* and ifl!* must be fluid now. I do not quite understand when and why that happened.
  * I had omitted some crucial whitespace in the previous attempt. With luck I have fixed it here.
  * OpenSuSE 64-bit sometimes seems to be set up so that automake/autoconf default to putting libraries in a lib64 directory where I expected a lib directory. The --libdirectory option is supposed to override this so I now use it.
  * Correct some of the worst formatting errors in the .tex files for the manual.
  * This updates a number of packages and changes CSL a bit (and the PSL build step) so that almost all functions throughout Reduce end up with file-name and line-number information on their property lists. This was much much more painful than I had expected mainly because of delicacies at the start of bootstrapping where some necessary function tended not to be defined. So you should expect that some parts of the rlisp parser will have code that does not have information about which file the code was defined in. It also meant that getting a version that worked for botyh CSL and PSL was a pain. I have also mended a glitch in generation of C++ code relating to cases where functions are updated beyond the version that gets compiled into C++. Doing this involved making ifl!* and curline!* fluid rather than global, and that led to (not very dramatic!) change in a bunch of places.
  * First note that this checkin only changes rlisp/proc.red and alg/reval.red. proc.red puts file-name and line number on the property list of procedure names as they are defined. The way it does this is such that the info will only tend to survive during the current run, so a saved Reduce image is not overloaded with this info. reval.red hooks onto the code where user-defined algebraic procedur4es are called (specifically when the 'opfn property of an operator is used to cause a procedure to be called). If you go    algebraic procedure foo x; x + 1;    tralg foo; and then use foo you may see some trace output! Sort of obviously untralg foo; would untrace it. Right now as well as an attemt at an algebraic display of args and results there is a Lisp prefix display - that is intended to be temporary while this feature is explored and tested. With luck (and I have not tested it al all!) if you have "on backtrace" then utter failures within algebraic procedures may lead to a bit of a backtrace. Since I have not tried that I do not know how satisfactory it will seem.
  * Small changes in tokenization so that for symbolic mode code Reduce parses floats with exponent markers S, F, D and L as short, single, double and long, as well as E for the default (which is double). This was messier than I had at first expected because the Rlisp lexical processing reads floating values as an integer mentissa and an integer exponent, packed up in a structured headed with !:rd!:. There is no instant place in that to preserve width info. The existing parser has a joke that I will show via          30.0 = 3.0e+1 = 3.0*e+1 = 9.15384548538 where the implicit multiplication of adjacant items risks confusion. With extra characters as exponent marks this risk grew, and in particulat existing reduce code included cases of "... 2sqrt ..." that risked being seen as "...2.0s0*qrt ...". To reduce the risk there the new exponent letters are only recognised if there has been an explicit "." in the preceeding number. But for backwards compatibility "e" does not require that. A consequence is that while "2sqrt x" behaves as some people clearly expect "2exp x" will be treated (and has been for ages) as "2.0 * xp x". The purpose of the change is to help me test varied widths floats in CSL. The change is disabled on PSL and also for algebraic mode code.
  * Further steps towards support for short and long floats - there is still more to do but because Reduce only uses the default doubles at present and this should not disturb them it seems reasonable to check this in as I work on things.
  * A nicer interface between ofsfic and ofsfcad modules.
  * Just a couple more files re-work wrt short and single floats.
  * Added service rlpreqe for ofsf. This includes a linear real qe-based implementaion of minimum vertex gover in lto.red.
  * Now in CSL at the Lisp level (plus 1.0s0 1.0s0) => 1.0s0, (plus 1.0s0 1.0f0) => 1.0f0 and (mantissa!-bits 1.0s0) => 20 while (mantissa!-bits 1.0L0) => 113. I will be gradually changing some things that used to be done useing C style #define into C++ with "static inline" procedures. And if I have got addition sorted for 4 widths of floating point and if printing shows which sort you have I can move on to supporting the other arithmetic operations. So this is not the end of the floating point re-work, but it illustrates a good step along the way. The exponent markers used are   S   short   (28 bits in all, 20 bit mantissa, always immediate)   F   single  (32 bits in all, 24 bit mantissa, immediate on 64 bit machine)   D   double  (64 bits, 53 bit mantissa)   E   default, which is double)   L   long    (128 bits, 113 bit mantissa, probably rather slow). Printing of long floats gives incorrect output at times at present.
  * The proper versions of file for generated-c...
  * Added module ofsfic for infeasible core computation. We extracted necessary functions from r3291, refactored them, and coded a delicate co-existence of the current Redlog with the infeasible core computing functions. The functionality can be activated by turning on the switch rlqeinfcore.
  * This repairs the ability to profile Reduce so as to be able to generate C++ code best suited to speed it up. I have then run the profiling using today's Reduce sources so that the key file profile.dat is up to date. If you were to remove all of your cslbuild directory and re-configure and compile you would get the benefit of this. Otherwise you may want to copy profile.dat from csl/generated-c into cslbuild/generated-c and then force Reduce to remake itself, eg by using "touch" on almost any source file so tha things seem out of date and then going "make". This may lead to a small speed-up on the CSL side especially for packages that have been heavily updated since the last set of profile data was published, but probably nothing truly dramatic.
  * Two CSL changes here (mainly). The first is that the mapstore implementation and also code to list all symbols (ie oblist()) has been re-worked to use a scheme based on the serialization code that traverses all live data. One consequence is that the code no longer relies in any way on heap allocation being contiguous (althougg the copying garbage collector will make the newly compacted version of the heap contiguous, and scans through it on that basis). The second change is that there is now a neat table of all list-bases in restart.c rather than the previous slightly awkward functions that copies things in and out of a "nilsegment". I will now be able to get rid of the old nil segment. The new code there is tidier and shorter, and will make it MUCH easier to add new list bases as and when I wish to. In the process of this rework I spotted and fixed an issue that arose with zero-length vectors (as in (mkvect -1)). And also as usual when I read the code I spotted some typos in comments and fixed them.
  * Manual: new switch trdefint for definite integration, update PDF version in repository.
  * The makes traceset automatically include trace, and untrace automatically cancells traceset.
  * This continues the recent run of CSL internal reorganisation. It should fix a few trace issue, and arrange that when you trace purely interpreted code you (mostly) get notice of the function that the traced thing is called from. It should also reinstate support for traceset, where in this version I hope that for interpreted code every SETQ gets reported, while in bytecoded functions all assignments to global and fluid variables lead to a report (which report tried to mention the function that the assignment was present in). Please report issues that arise...
  * Another round of CSL internal changes! These should mend a couiple of glitches in tracing, but are mostly preparation for the next step, which ought to get trace output for interpreted code able to report what function something was called for and should also be able to reinstate traceset. This bit of re-factoring is widespread enough that it needs to be its own check-in.
  * A block of quantifiers can be processed by backtracking through the QE tree. To turn on this new functionality go "on ofsfvsblockbtr;". It is turned off by default.
  * Fixed an imprecise procedure description.
  * Output useful QE information when rlverbose is on.
  * Get svn:keyword properties to be "Id" rather then "id"
  * This is a first cut at getting TRACE in CSL working better (with a little bit towards restoration of traceset). The new scheme puts responsibility for tracing on the place in the code where a function is called,where the previous version made it the job of the function that was being called. A consequence of this is that (mostly...) all functions including ones built into the CSL kernel or compiled into C++ as part of Reduce optimisation can be traced provided they are CALLED from bytecoded or interpreted stuff. Calls out from stuff that has been compiled into C++ will not be noticed by the tracer. Because things work this way it should be that all calla made from bytecoded stuff can show what function called the traced function (I find this very helpful indeed. I first trace a low0ish level function I am worried about and I can climb back by observing what called it and tracing that too...). When debugging you may often wish to use bootstrapreduce rather than reduce/redcsl so that this is not messed up by optimisation into C++ code. There should be better trace output associated with some tail-calls. Traceset should report on assignment to fluid or global variable in bytecoded functions (but not to local variables). AT present the interpreter does not do traceset and does not keep track of the currently executing function, but I hope to improve that soon, and feel that where I have go to now is stable enough to be worth exposing to people who may try it out. As always there may be glitches which I hope you will report!
  * Fix a glitch in the previous checkin.
  * I believe this fixes the bug that showed up recently via some GCD calculations. A case in the integer gcd code could return a result that was correct in value but that was internally represented as a bignum when it was in fact small enough to be a fixnum. A subsequent attempt to divide a larger fixnum by it then have q auotient of zero reasoning that fixnum/bignum must be zero because bignums are bigger than fixnums. This arose on a 64-bit system but I can see that there had been at least a risk of it forever on all platforms - though the probability of it bneing triggered on a 32-bit machine would be smaller )and might have been zero, but the analysis for that is deeper than I have done!). The quantifier elimination example that this showed up in now for me merely seems to run for ages and ages so any further examination shoulkd be directed at rlqe.
  * Be more verbose during block elimination.
  * I believe this mends the Mac issue I had before. Without this (CSL) Reduce would run if run from the application bundle, but would not run nicely as a command-line program.
  * Add predicate for new style indices.
  * ANother go at getting the adjusted CSL right. SOme of what has just been going on is that I have decorated various functiosn such as those that report errors with [[noreturn]]. I found some advice that [[noreturn]] functions should be written as "[[noreturn]] void ff(...) ..." with VOID as the "return type". That means I needed to make changes where I initialise a table with such a function, and I can not then go "return ff(..)". So this now adjusts the compilation into C to try to reflect that. My checkin earlier this afternoon got things as far as bootstrapreduce building for me, This ine now gets full reduce to build (this time tested on Windows). Arthur
  * Fix a mistake that was introduced in the smaller change-set 3888 where I was just trying to tidy up and fix a Mac issue! And now propagate the consqunces of [[noreturn]] more thoroughly. This lets bootstrapreduce.img build for me again - at least on Ubuntu.
  * This adjusts soem of the recent check-in both to put NORETURN in in a few more places where it ought to be and to fix up some of the issues where the Macintosh was giving trouble. Some of those are where clang was being fussier than gcc, e.g. abou the placement of [[noreturn]]. I believe I still have a Mac issue to fix, and will look at that further tomorrow. There is also a token first start at reinstating traceset - the function by that name now exists again but just as yet it does not do anything useful. Watch this space.
  * Fix errors of previous commit for Excalc. Sorry.
  * A file that had been missing in the previous check-in. Apologies
  * Excalc: For all statements didn't work properly as free variables were always treated as 0-form valued.
  * This is a check-in with changes pretty well throughout CSL. The key one is part of the migration from coding in C to use of C++.
  * Correct number of arguments of defint0 in autoload.
  * Added service rlifacdegl, which returns maximal degrees in irreducible factors.
  * Correct an error from the second latest checkin and add a couple of improvements; commit the latest version of the defint.rlg file.
  * Definite integration (Mellin transform method):  I try to get a handle on integrands that have more than tow or three factors  by applying pattern matching rules.
  * Definite integration (Mellin transform method):  catch some cases of using car/cdr on an atom.
  * This is part of a process of ensuring the FLUID and GLOBAL are used consistently. In the future (with CSL at least) it will become and error to declare something fluid if it is alread global or vice versa, so that variable types across Reduce are kept more in step. Here I fix a number of cases. There is scope for negotiation as to whether each case should be fluid or global and the direction I have jumped might deserve review. There is one issue that needs further commentary. In CSL the name "pi" is a global preset to a value 3.14159... (this follows what Common Lisp would want). A consequence is that trying to use a local variable called "pi" should be invalid, even in a context like "scalar ph,pi,pj,pk;". And in such cases letting pi become fluid is not really proper either. So in a new places where implementers had used local variable called "pi" I have changed that to be "pi_", aware that the change is not really very nice. But believing that source-wide consistency is important. This may all increase pressure on designing a scheme that provides local name-spaces!
  * Modify defint driver so that domain mode is always restored properly at the end of a computation.
  * Step 3 of improvements for the Mellin transform method for definite integrals:  Rewrite the proprocessor called new_defint.  Introduce a switch trdefint to print out intermediate results. Also remove global replacement rules for sinh and cosh. As a consequence, a couple of definite integrals come out in a slightly different form,  and one of them fails:
  * Defint package can now be loaded automatically, hence remove explicit load_package statement. Better detect unknown integrals passed to new_indefint.
  * Make defint package autoloadable. Make tra switch for algint package known before autoloading it.
  * update of the main manual pages about the packages cde and cdiff
  * minor improvements to the cde manual
  * Updated manual and examples after the recent update to cdiff
  * Second step of cleanup of Mellin transform code for definite integration: Improve rules by adding proper rule conditions and removing unecessary double tilde variables.
  * First step of cleanup of Mellin transform code for definite integration: Rearrange rules according to number of parameters of defint2 operator  (no change in code)
  * Add a couple of online references to MeijerG notes file.
  * Add a special case for the MeijerG function, and a text file with notes.
  * Manual and examples updated to reflect the latest updates in the packages cdiff-cde
  * corrected a misprint
  * Changed the global undeclared variable graadlijst into the fluid (and declared) variable all_graded_mon. A useful procedure has been added.
  * The function check-condition of the solve package didn't handle rounded mode well. The example on rounded; solve(df(e^x/(e^(2*x)+1)^1.5,x),{x}); now goes through.
  * This checking re-writes the function factorf in poly/facform.red, which could previously deliver incorrect results. To try to reduce future confusion it renames the old function to be interbal!-factord and makes the name factorf a synonum for the main entrypoint (fctrf). A modest number of other files that refer to factorf directly have then been changed to track this.
  * Correcting an obvious typo (defint package).
  * Minor improvements to Reduce manual.
  * Correction of an inappropriate call of the factorizer in gifactor:
  * Checking in Manfred Kremer's bad cases for definite integration as regression test file.
  * changed sign of Schouten bracket to match the mainstream convention
  * improved/modified code for C-Differential operators, mostly in cde_varcalc.red and cde_cdiff.red; documentation and examples updated accordingly
  * PSL for win32: improvements to Lisp disasssembler
  * PSL for freebsd-i386: set default memory size to 16MB
  * PSL for linux (32bit): 	Set standard memory to 16MB 	Add get-image-path, get-exec-path, get-fullpath functions
  * Bugfix to get-fullpath for PSL on freebsd-i386
  * Bug fixes to lisp disassembler for i386
  * Further improvements to disassembler for i386
  * Improvements to disassembler for freebsd (i386)
  * PSL for FreeBSD: ensure that NaN and +/-inf floats are printed correctly.
  * A couple of minor improvements to the PSL manual.
  * PSL for FreeBSD:  Correction for reading characters with high bit set from terminal  Bugfix for compiler: assignment to an id with the constant? property went wrong  (32bit only, 64bit already done): implement new functions get-exec-path, get-image-path, get-fullpath
  * make-pslcomp script: do not echo input lines
  * When I first designed CSL I believed that NIL was by far the most important value involved in Lisp. Well I probably still do! At the time the then-new RISC machines xpected to get a special benefit if you could keep key values in registers, so I wanted to have NIL in a machine register as much of the time as possible. Having decided on that I then arranged to store all sorts of other important variables and data so that they could be accessed using offsets from NIL. To do this in C I have a reguilar extern variable called C_nil pointing to the nil-segment and I tried to arrange that most functions had a local variable called nil that help a copy of it. Over the years the performance gains may have been eroded for heavily cached multi-issue CPU implementations, and the number of places the CSL code ended up with explicit statements "nil = C_nil;" to keep these two values in step escalated. I also had to have what could look sprurious declaraions of a local variable NIL in functions that did not visbly touch it but that used macros that expanded into a use of it. Yuk! So this check-in goes through and files nil and C_nil together, and I will now trust modern C++ compilers to keep a shadow of the extern variable in a register in a way that will be pretty close to what I had orignally arranged somewhat manually. I think this cleans the code up. The planned next step will be to go further in making use of C++ exceptions for all sorts of non-routine returns from functions...
  * The is some CSL code cleanup, where the main thrust is to move towards use of C++ throw and class detructors to clean up after error and (in due course) other cases where the stack has to be unwound. A side effect of this should be that recovery into generating a backtrace after a system failure gives a SIGSEGV or other low level trap should become more reliable.
  * Change == to = in configure.ac where it copes with C++ compilers that do not support c++-14
  * This fixes a bug in long division that only applied on 32-bit machines. In that case a near-degenerate "Bignum" could have just 1 digit, and in that case the general long division code became confused since to make some decisions it looks at the top two digits of things. The effect had been that it ended up looking a "digit -1" of 1-word bignums, ie the header word. That obviously confused things. I now detect that situation and turn it back into a short division.
  * Corrections to arithmetic when built on 32-bit platforms.
  * Do not INSIST on C++11 unless signed shifts are not arithmetic.
  * This continues review of the arithmetic code in CSL. I am part way through looking at all shifts to try to ensure that I remain within the C++ standard and so not rely on undefined features such as the effect of left shifts on signed types. If there is a 128-bit intgeger type available I exploit it in the hope that that speeds up multiplication of large fixnums, division of numbers of length up to 120 buts biy one of length up to 60 bits, and modular multiplication for moduli up to 2^59.
  * Replaced calls of rl_gsd with rl_gsn(..., 'dnf).
  * I hope this gets the code so that it survices using clang (ie on the Mac) again and there are no consequential issues that arise on Linux or Windows. There were a number of places in CSL where I did arithmetic on 32-bit signed integers with the explicit expectation that I would then detect carries out of the low 31-bits by looking at the sign of the result.  But adding values so that the sign bit changes as a result of a carry counts as integer overflow and the results from that are considered undefined by C and C++. Based on that clang was (legally) assuming that no such overflow existed, and that allowed it to make some optimisations that utterly destroyed the behaviour I was expecting. By moving to use of unsigned integer addition in a number of cases (and also much the same for some shift operations) I believe I have made my code safer. The arithmetic tests (the crude code in bigarith.lsp in cslbase) and all the reduce test cases just ran apparently smoothly on a Mac, so I am hopeful. I still need to test on a 32-bit platform. Fingers crossed.
  * Arrange that when unifdef does something it does not hand back a return code that stope the rest of the build. This impacts zlibdemo. Correction to detection of the "timeout" command.
  * This is another reasonably substantial commit for the CSL world. It arranges that if you have build Reduce on a 64-bit machyine it can keep numbers from -2^59 to +2^59-1 as immediate data rather than as memory-based bignums. On 32-bit systems the range is -2^27 to 2^27-1 (as before). This should tend to speed up arithmetic involving numbers in the range 2^27 to 2^59, which seems a Good Thing to me, I need to try taking measurements to see how much difference I observe on various platforms. I have also corrected a bug in the long division code that seems to have been present but unreported for around 20 years! There are a few refinements to the transition to bigger arithmetic that I still want to make, but the version here just ran the full set of Reduce tests (on 64-bit Linux) without fuss, so further work is liable to involve much smaller changes.
  * PSL for win32: recompile recent changes
  * PSL for win64: recompile recent updates
  * PSL for Linux: make sure that characters with high order bit are not converted to sign extended negative integers during printing.
  * Correction to latest change of printing routines in PSL.
  * This is the first half of some re-work on the CSL garbage collection. It changes things so that there is no longer need for a dedicated garbage collector mark bit in every Lisp Object. In the old world addresses all had to have the same sign so I could use the most significant bit as this mark bit, while immediate data has to leave one bit spare for it. WIth the change (which uses a tag code for fowarding addresses) the heap on a 32-bit system can apen across the 2G boundary, and when I do the next stage of rearrangement I will have one more bit available in every header word and every unit of immediate data.
  * Further refinement to serialization - mainly adding some run-length encoding. This saves a useful amount in bootstrapreduce.img, but hardly makes any difference at ll to reduce,img (which probably has almost all of its space filled with bytecode material where the new feature has no impact at all.
  * Update README file for debian build process (Bug #74)
  * Made CAD less verbose by default. For higher verbosity turn !*rlcadverbose on.
  * This is a further round of improvements to the checkpoint/FASL mechanism, mainly centred around nicer support for serialization of List structures. It also has reader support for more serialization opcodes to cope with long lists and to help when there are repetitive parts to data - but at present the writing code will not exploit them - that can be a next step.
  * Added a comment on duplicit formulas in vs_blockmainloop.
  * Fixed a bug and deleted an unused variable in ofsf_qemkstdans.
  * CSL now uses zlib to help it compress image files, and both saved images and FASL files are packed using the code in serialize.cpp. As compared to the situation a few weeks ago this often causes image files to be smaller by about a factor of 2! The way in which the word-length and byte-order of the computer used to reload an image file is also a lot cleaner. This has involved changes in quite a few places within CSL and there will still be some improvements that I can make over the coming weeks, but I hope that this is the major step and future changes will count as more localized refinements.
  * glibc on Linux was amazingly helpful and spotted some places where I had used a buffer that was too small for the data I wrote then using sprintf. I believe that is now fixed.
  * Update the file a bit to respond to reports of it being incorrect or out of date.
  * This checkin represents CSL in a state of transition. The arrangements as regards FASL and !*SAVEDEF have been rationalised and the new scheme for creating checkpoint images is now the one in use. The garbage collector has been simplified so that the mark/slide version is no longer present - only the copying one is there. This last change means that the limit on the calculations that can be completed on a 32-bit machine will have been reduced, but I do not believe that this will be a serious inconvenience to anybody and the fact that the code is now shorter and hence easier to keep reliable may compensate.
  * PSL improvements in I/O: checkin FASL files for macintel64
  * PSL for macintel64: suppress warning message about redefintion of constant bitsperword when compiler is loaded in REDUCE.
  * redlog/lpdo: procedure lpdo_mykernp doesn't work correctly if _ in printing and explode is preceded by an escape (!) character
  * Fix for PSL land of negative bignum and positive smallnum on 64bit macintel.
  * PSL improvements in I/O: checkin FASL files for Win64
  * Correct win32 makefile: missing TAB character
  * PSL imporvements in I/O: checkin FASL files for Win32
  * Necessary changes to scantable in support/pslrend.red
  * PSL: Improve line breaking for dot (of dotted pair) at end of line. Again, FASL only for Linux.
  * PSL: Improvements to reading and writing  - Better support for characters 128-255 in input stream: extend scantable from 128 to 256 slots, fix a remaining bug.  - Correct computation of line breaks in prin1 for identifiers and strings near the end of the line. This corrects most long outstanding differences in line breaking between CSL and PSL.    The only remaining difference is the handling of the dot in expressions like (a b c d . e) where PSL starts a new line a bit earlier than CSL.  - Introduce a new token type for characters that are allowed inside an identifier, but not at the beginning, like _ in Rlisp. FASL files for Linux (32 and 64 Bits), others to follow.
  * This changes the internals of CSL so that the bytecoded form of compiled functions lives in the regular vector heap, not in a special heap of its own. This and the associated changes to make it happen clean up the code and should save a little memory or size of saved heap images. Meanwhile if CSL is built with --enable-test the new serialization-based version of preserve aned restart now works well enough that I have built and tested a bootstrapreduce using it. There are still some rough edges but it is neverthless a much cleaner approach then the previous one - for instance it makes images portable across 32 vs 64-bit and big and little-endian machines without any need for delicate shuffling, and it allows for taking a snapshot of the heap while the system is running rather easily. My next steps are to continue tidying up and testing that code...
  * Add a target that makes a first-stage boot image in the CSL world, which may be useful when debugging in contexts where things get started but the full build of bootstrapreduce.img fails. Correction re forcing configuration of Boehm conservative collector for the experimental branch.
  * Fix for Bug #71
  * Removed a commented procedure whose removal caused PSL compilation problems in the past.
  * Done renamings of data structures and procedures in accordance with my dissertation.
  * Win32 PSL: Correction for reading characters with high bit set from terminal
  * Fix for win32 bpsl
  * Win64 PSL: Correction for reading characters with high bit set from terminal
  * PSL: Correction for reading characters with high bit set from terminal Linxu 64 bit first, compiled lisp code for other architectures to follow
  * Correction to inthash code that lets the serialize version of preserve behave better.
  * The important changes here are in serialize.cpp - pretty well all the rest are just support for that of the correction of incidental spelling errors in comments. This should not have any effect on a normal build of the CSL version of Reduce, but if "configure" is run with the "--enable-test" option the code trie sto use a new serialization mechanism for creating heap images. This now ALMOST works. I believe the current limitation is that things compiled into bytecodes do not get dumped (OK so that means that I can not even build a complete csl.img!). But heap images made without compiled code in at all seem to reload properly. I am expecting that this will eventually lead to more compact image files and shorter and more robust code for saving and restoring things - with in particular less horrible messing around to cope with 32 vs 64-bit systems and the two possible byte orderings in words. There are then several transitions left pending that this can help support. One is moving to the new hash table implementation (from a recent check-in, where there is still some finishing off needed). The next will be direct support for functions with 0 and with 3 arguments, and a scheme for 5+ args not base don the C va_arg mechanism. The third (not at all started yet) will be to use 60-bit fixnums when running on a 64-bit architecture where at present the code only support 28-bit fixnums regardless of word-length on the target machine.
  * Minor cleanup of limits code: !*protfg is fluid, so rebind it instead of assigning
  * With the latest update to the bignum arithmetic for win32 PSL, Groebner calculations came out wrong. This is very strange, as exactly the same code works for PSL on 32bit Linux - something that needs careful investigation. Back out change to lshift function, but add a correction to big2sys.
  * SSTOOLS Chapter in Manual
  * Added sstools to manual
  * Introduced an Enum type and migrated some more services.
  * Improve error message on missing termcap library for redfront
  * Added missing service psat2pol.
  * This patch should mean that you can get away with not putting a semicolon after "showtime" if what follows is ">>", "else" or some other item labelled as a delimiter.
  * PSL for win32: implement BPSL_CYGDRIVE_PREFIX environment variable
  * Fix for PSL land of negative bignum and positive smallnum on 32bit Windows.
  * Fix for PSL land of negative bignum and positive smallnum on 64bit Windows
  * Add a couple of failing limits to the end of the limits.tst file.
  * (1) if --with-wx is selected I hope I am now less overenthusiastic about repearting the unpacking of wxWidgets, and so building should run faster. (2) the new CSL hash table support has moved on a fair amount, and at least a simple timing test of EQ-based tables has shown it running faster than the existing version. I still need to complete support for EQUAL-comparison tables before I can make it the default. But the advantages it should bring are (a) newer code that I hope is tidier, (b) much cleaner support for large hash tables, (c) apart from the need to rehash after a garbage collection the cost of hash lookup is always bounded to at most 3 table probes, (d) rather better table occupancy is achieved before the table has to be expanded. (3) The "showtime" command can now take a sring argument that is displayed as part of the timing message. This may be useful when showtime is used several times in a script since the message can show what step has been reached. Eg 'showtime "Time to get to step 3 ";' might be a plausible thing to write.
  * This gets newhash.cpp much closer to working. It may even be OK for "eq" tested hash tables now, but the issues of EQL, EQUAL CL-EQUAL and EQUALP variants still need work. And all will need more testing before I can make it the standard implementation of hash tables. I also in due course want to use of for packages/the oblist.
  * Last April I introduced a --no-rcfile option fopr CSL, but I omitted the word "else" in command-line decoding, with a result that options --cygwin and --texmacs were recognised but neverthless triggered a message as if they had not been.
  * Putative fix for PSL land of negative bignum and positive smallnum on 32bit Linux
  * Correct typo
  * Putative fix for PSL land of negative bignum and positive smallnum on 64bit Linux (other architectures to follow)
  * An improved bit of code to check for 27-bit primes, now using Miller-Rabin rather than just Fermat.
  * Package normform: remove nestdom module, as the matrix module contains a slightly newever version of nestdom.red
  * Rudimentary changelog for the manual
  * packages/tmprint: protect against double redefinition of linelength
  * Document the new UNSET command.
  * Provide an unset command (similar to clear for let). Example: operator a,b; a(1) := x; b(1) := 4; a(2) := y; b(2) := 3; set(a 1,b 1);  set(a(2),b(2)); x*y; unset a(1),a(2); x*y; Should be mentioned in the manual. Any volunteers?
  * Typo corrected.
  * An attempt to fix the recently reported factorizer bug, with various code cleanups (eg messages moveed from upper to lower case) as I was dealing with it. I hope this fixes things and does not wreck other cases!
  * Make modular-plus, modular-times and friends check their arguments to verify that they are (small) integers before doing anything. Note that when stuff gets compiled into C these are compiled inline into unchecked code (rather as iplus etc are...). So to get the slowdown and benefit of this test things using bootstrapreduce.
  * I believe this now does pretty well all that the earlier version of this code did - but in a better way. See test data for it in cslbase/wxdata. I have still not got a clean way of thinking about the font sizes and coordinate system I need to use to draw things, but characters get rendered and placed in a way that scales with the window size, which is what I was mainly aiming to achieve. So this seems a reasonable place to leave this for a while!
  * This now draws a bigopen curly bracket with the lower leg longer than the top, and still manages to let things scale as you re-size the window. To compare with the version I had a month ago (a) this should work with a stock version of wxWidgets while the old version needed a cutmised one so that I could use my private font in a wxGraphicsContext and (b) this one should render characters better when the window scaling is not a nice whole number - the old code occasionally left gaps between parts of a big delimiter or ugly edges where glyphs had been snapped to pixel boundaries by the renderer. I have you to reinstate the row of kerned text that the previous demonstration code had.
  * wxshowmath can now downsample to get antialiased sub-pixel positioned characters using my own code rather than system-provided bitmap scaling. This seems to give me a really useful speed improvement. The Windows version now re-sizes the screen fast enough to look good to me. On X11 I tend to see one attempt to change the screen size causing multiple refreshes and re-paints and those all happening one after another lead to noticable delay. But even then the performance is not a disaster I think. Next I need to reinstate the fragments of maths-style display that I commented out when I started this pass of work here...
  * Protect against segfault in returnaddressp
  * Two noticable changes. Well maybe 3. The first is that I believe I now manage to force re-painting such that the window appear with text filled in when the program starts up. Then I have a load of energetic code that sorts out how to scale text so that the row of 80 fixed pitch characters fills the width of my window accurate to within (about) a pixel whatever width window I have. Then I display timings for some of the operations, and what that shows is that the scaled drawing from by big bitmap to the screen is a real bottleneck. But I now have infrastructure so I can do that by having modest sized tiles so that I will (soon, I hope) be able to refresh part rather than all of the screen and with luck I will be able to get both better absolute refresh speed and much less flicker (by repainting bit by bit rather than clearing the whole window before starting to redraw it.
  * This gets behaviour better, but performance of wxshowmath is a big issue. There are two separate issue that can hurt. The first is that when I repaint the screen I may process the whole of a bitmap that is some multiple of the screen size, even though my window is not filling the whole screen. The second issue is that when I update my output the only way I have of re-drawing is to process the whole of the window, not just the (probably) smaller part that has changed. Attached to these two are the fact that re-painting the screen causes bad flicker because it all gets set to its background colour before any of it is re-done to show what is eventually needed. But I will check this in now if just for testing.
  * wxshowmath (at least on Windows) now displays a row of text whose size changes as the window is resized. Note how the font size underpinning it still has integer point sizes and how this leads to a jumpy change in the length of the line of text. That still feels ugly. Under cygwin/X11 right now the text does not change when you resize the window, everything seems painfully slow and there are a load of diagnostic messages from Gdk which *may* relate to trting to draw beyond the edges of the bitmaps and windows. So there is more debugging to do. But this is still clearly a step fowward!
  * wxshowmath at present JUST displays an alphabet at the top of the screen and you can not at present re-size the window usefully. Bu this is all because it is in the process of changing internal behaviour so that output is first written on a huge monochrome bitmap which is then re-scaled for final display. The purpose of all this is to get fine control of character placement. The code here can test the technology and will - when I have got rather further with it - allow me to see if performance is going to be OK. My intent is to re-create the output that the previous version of this code created. I am checking in at this "pre-alpha" stage so I have a safe copy and in case anybody else wants to see what is going on, comment or contribute. Note that wxdemo renders small characters in three different ways so that the effects on-screen can be observed, and it plus the previous version of wxshowmath have convinced me that simpler schemes for maths display are going to end up ugly, so I do need to go to this level of trouble.
  * Yet further work on wxdemo.cpp (and associates) so I can compare various ways to display small characters precisely positioned. Note that on the Mac you need to go "open wxdemo.app" so you get access to the custom fon I wish to use. The latest unpleasany observation is that if I build up a tall delimiter or if I wish to draw a long rule then the whole object needs anti-aliasing as a single unit. Oh how messy. When I really do all this I will probably need to cache pre-rendered forms of things.
  * This represents quite a lot of experimentation and maybe even pain wrt wxdemo but it now gives acceptably consistent results on Windows and X11 (tested using cygwin at this stage). I have not checked it on the Mac and need to. It can now do its own anti-aliasing to display small characters with sub- pixel positioning, and it avoids using wxGraphicsContext (which may mean it will not need my special hacks to do with custom fonts). I will now want to migrate the experience I have built up here into the larger demonstration programs - and also worry a bit about performance aspects. I could find that I need to cache glyphs that are rendered very frequently...
  * Fix a bug in my private fonts stuff for wxWidgets that was causing a crash at system shut-down time because some destructors were called in what seems to have been the wrong order. Take the opportunity to refresh the snapshot to reflect current git version overall.
  * wxdemo.cpp greatly expanded so that it renders characters at a range of sizes in several different ways so that I can test and check compatibility. line and those below, will be ignored--
  * Migrating and adapting interfaces. rlghqe returns theory as list of atoms now (was conjunction).
  * SML stull can now define some simple functions and run code. I need to keep on that path of development and in a while I may move to testing on the TeX stuff rather than tiny test cases. But for now "make smltest" is where things are at.
  * Further fixes re printing of re-entrant structures, both to make the code cleaner and to make it work properly!
  * Glitch that meant that bldmsg did not work properly with the new %q option and the old %r one.
  * Fix up the mistake I made in the previous attempt to correct this!
  * This has a re-work of printf/bldmsg so that CSL and PSL should both behave identically, in particular as regards where lines are split when the linelength is approached. It also introduces a new format option "%q" which can display looped-up structures and which displays sharing in syructures. The format for that follows what Common Lisp suggests, and uses a prefix "#NN=" (where NN is a number) to set a label and "#NN#" to refer back to it.
  * Adjustment to Makefile.am and the way that csl created dependency file tracking information that will - I hope - lead to more comfortable behaviour when files are moved, removed or renamed in the Reduce source. A few typos wrt comments and layouts patched at the same time.
  * PSL for amd64 architecture on Linux (other OS will follow):  Better logic for omission/generation of REX byte instruction  Now support all 16 registers  MMX extensions: MMX registers and some MMX/MMX2 instructions which are necessary for inline floating point operations (see testsse.sl for test cases)
  * Remove unwanted semicolon.
  * This version of the SML stuff now has font metrics for STIX fonds embedded, with functions defined in Metrics.sml that recover them from packed hash tables. My next step has to be to make trhe layout code use my new metrics instead on ones from the old TeX fonts... and (which is messier!) fix things so that variant and extended characters are identified from the new tables that I have that refer to Unicode code-points for such things.
  * Clean-up work on more wxwidges demo programs, and get character metrics set up in SML format.
  * Correct a typo so that in SML lexing mode operators made up out of a sequence of operator-like characters get processed properly. A simple typo had prevented that.
  *  Windows needs to use UTF16 to display codepoints outside the basic multilingual plane - so now I have fixed that a lot of cmmi and cmsy are simulated OK. The base-line for the square root sign is bad, and I do not even try to map cmex yet because I have not started building the translation table. Also make the top-line display use CMU Typewriter Text which now come sout looking neat.
  * A bit more work in wxdvi that STARTS (but doe snot yet finish the job) to make it use STIX fonts rather than cmr/cmmi/cmsy and cmex. Output is UGLY and unsatisfactory and incomplete at present
  * Look into mapping OLD TeX font encodings to Unicode code-points.
  * Towards a symbolic vector package implemented as an excalc application. Not complete yet.
  * Migrated further Redlog services to the new framework. Added Triplet as a Redlog type. Adapted PASF QEs with answers to pairs instead of Lists/Equations.
  * Maybe this will make it compile, but it will not make it work!
  * Having been looking at the SML TeX stuff, with the SML version being able to generate .dvi files, I wantes to see if my wxdvi utility could render them. Looking at that showed that wxWidgets had moved on a lot since I last took a snapshot (apart from anything else moving where its main repository was). So I updated that. Then many of the wxWidgets programs I had stalled while trying to activate custom fonts, so I needed to fix that. I have now tidied up some of the code there, but by no means all of it! If I want to be able to resize windows smoothly and have fonts adjust size to fit the width then I MUST used wxGraphicsContext and the support of private fonts there seems to requite my customized version of wxWidgets at least on Windows (because of how gdiplus works). The code in wxdvi is based on old computer modern fonts in ancient TeX codings. I now wish to move to using the STIX fonts for everything, and of course that will involve change. I propose to give myself a start by setting up mappings from the old font names and codepoints to various stizes of STIXMath. That may not match metrics exactly(!) but will give me something to work with - and when I have my own version of the TeX layout I will be able to use metrics applicable to STIX. I needed to patch wxWidgets to get the thread module to build under raw cygwin. so that is a second reason for needing to build by own copy of the library.
  * wxfontdemo1 is like wxfontdemo but does not use a wxGraphicsContext - hence it can only cope with integer-sized fonts, but it should work with a stock version of wxWidgets. At present I have not put in the support for my private fonts in Unix-like cases.
  * Use a (much) newer snapshot of wxWidgets and fix things so that the installation of private fonts for it does not hang on Windows. Adjust some scripts to be more tolerant of whitespace in the path.
  * Fixed a bug in lpdofactorizex by adapting lpdo to the new SM interface of rl_qea, which uses consed pairs instead of 2-element lists and equations.
  * I have now upgraded the SML grammar so that it can parse the SML module syntax, and so I am able to use the original full version of the SML. I can still run the code using "poly" ML, and I can now parse it all using the LALR parser. But I now need a load of work on semantic actions so that the parse tree is tidy and nice to use.
  * Slight clean-up on sml.red, and fix case for filename Library_Reduce.sml
  * Small fix to yylex re negative numbers in SML mode.
  * Fix a typo that hurt with %r format.
  * This is a snapshot of where I have got to in this project. Well what is it about? The files *.sml represent an implementation of the TeX maths layout algorithm coded in (S)ML. They originate from  Heckmann and Wilhelm. The versions here have had the SML module stuff removed which shortens the code and makes it simpler for me to work with just for now. If you go "make test1" or test2 or destdelims or testaccents (or sometimes testradical) and you have "poly" installed it will use the poly implementation of SML and process one of several test fragments to create a file das.dvi, which should have the layout that TeX would have created. I hope. Then "make sml" follows a quite different path. sml.red has a grammar for sml (using the fairly new Reduce "lalr" parser generator. This can now parse all of the SML code and create Lisp structures by way of parse trees. Since in some sense SML is (sort of) Lisp with fancy syntax and a clever type-checker this parse tree can be mapped onto executable Lisp "fairly easily". Well there are two areas where the transliteration will not end up direct. One is that SML support lexical scoping and higher order functions. Perhaps some idealised Lisp might, but Standrad Lisp is certainly not up to scratch on that. So lambda-lifting etc may be called for. The second issue is that SML features a form of pattern-directed de-structuring of arguments, and so SML data structures will need modelling as Lisp objects and the pattern matching mapped onto code that makes direct tests. Before getting to those there are a LOT of places where the current naive state of the parser leads to generation of unnecessarily ugly parse trees, so first I just need to clean that up. A hope is that the strong type-checking in the SML code and the fact that it is really quite concise will make the code here robust and reliable, and that the translation into Lisp will not be too hard.
  * Improve treatment of !:infix0 th !:infix9 items by getting yylex set to the symbol involved in a neat manner.
  * LALR now does some checks on the grammar it is given so that various mistakes are detected and reported right at the start. That ought to make it nicer to use. Also spport string-output-stream in CSL and use it to support printf/bldmsg. Move the CSL implementation of those to be in rlisp/rprint.red as a signal that I view that as now something I expect to use rather more.
  * Excalc: correction of a a sign in Hodge-dual's.
  * I believe that this gets rid of at least almost all the PROGN(...) instances in favour of <<...>>. There are still too many labels and goto statements, an dindentation is thoroughly inconsistent and ugly in places. But scripts/testall.sh seems to say that thing still work. I BELIEVE that the file that used to be called module-dist.red was unused and not needed. To check for that I have renamed it as unwanted-module-dist.red so that for now the file contents are easily available for anybody who needs to recover them. If there are no indications of pain then the file can be utterly deleted in a few weeks time. So IF you were using that file and still need it please raise th eissue soonish...
  * Excalc: expand Hodge-dual of an exterior product of 1-forms and a Hodge-dual even if there is no metric explicitly given.
  * A further round of removal of PROGN(...) in favour of <<...>>.
  * This checkin puts a modest number of lines of extra raw Lisp into the bootstrap parser do that EQ and = are accepted for infix use, so that << ... >> turns into PROGN and so that WHILE statements can be used. This makes it possible to write parts of the code in packages/rlisp in a much more cvilkised way. So I then start an update to the code there to remove the previous ugly PROGN(A,B,C) uses and replace some of the labels and GOTO statements with WHILE loops. That upgrade will be something I expect to keep working on in the background.
  * Make LALR more generous re end of file.
  * Change name of snapshots to have hyphens in the date. Make "procedure emb ..." (which was sort of supported in reduce4) get recognised and processed. Update LALR with further extensions/fixes/refinements.
  * I believe that this should get #if .. #else .. #endif working in yylex (in the lalr package).
  * Implement my own version of lrand48() in newhash.cpp because even though it is POSIX it is not supported everywhere - and in particular on Windows.
  * Further progress on Redlog 4. We have parametric types now. Work in progress. All test files are working.
  * Introduced ordpcar here, because I need it in Redlog now, and I did need ordpcadr previously.
  * Avoid writing of some files from running sstools.tst.
  * I believe I now have it so that (for CSL) "make package_name.fasl" will re-make just that package, and "make package_name.bootfasl" will do the same within the bootstrap image. This is merely a small Makefile hack on top of the existing "make recompile which=package_name" scheme, and no files with suffix .fasl or .bootfasl will be involved anywhere. But perhaps this will feel comfortable and memorable to those who wish to rebuild just the one package that they are working on. I still suggest that every so often a FULL recompilation should be performed so that no oddities due to oddities survining in the Reduce image file end up confusing matters.
  * Initial check in of new package sstools. This package can be used to determine evolutionary supersymmetric PDEs with higher symmetries, to compute symmetries and conservation laws for given supersymmetric PDEs, to linearize supersymmetric PDEs, to compute whether expressions are homogeneous and if so to compute their homogeneity weights, to compute Taylor expansions with respect to superfields θi and to invert such expansions. On the other hand one can do simple but lengthy manipulations of super-expressions that involve algebra and differentiations.
  * portable_print (in alg/general.red) now knows how to print vectors. The lalr lexer now understands hex numbers, deals with the various stles of comment better and behaves properly with strings. Right now it seems NOT do recognize or process "#if", so I will look at that later. support/entry.red changed because yyparse now has 1 argument and construct_parser 2.
  * Smallish corrections to lalr lexer where peeking ahead to cope with block comments messed up the next character that was processed.
  * The directive "#define" has probably never worked (!) but does now. There have been some general clean-ups of cod ein lalr, and the yylex lexical analyser has been made parameterised so that it can be adapted for use with a range of languages - eg it can be configures to handle comments that are based on "#", "%", "//", "/*" or "(*".
  * In the middle of a MAJOR revision of Redlog. Migration to a new AM-SM interface and help system is half way so that this check-in is mostly a checkpoint. All tests are running without problems.
  * Minor restructuring of the code for reimasin in compopr.red to avoid CSL compiler warning messages. The results returned are not affected.
  * There is now a CSL file newhash.cpp that runs in parallel to lisphash.cpp. It is the start of an alternative implementation for Lisp hash tables, but is at present significantly incomplete and it is certainly buggy. But by checking it it I have an easier path developing and testing it, and when it works well enough I will be able to compare performance agsinst the existing scheme. It has two major features. The first is that it offers an absolute guaranteed worst case cost for lookup in a hash table. The second is that the work that is needed when garbage collection relocates memory gets delated until a table is next used. That work is needed when hash values associated with items depend on their memory addresses, which is certainly what one needs for hash tables based on the EQ comparison. OK so when I say that hash lookup has bounded cost I accept that sometimes when you do a lookup it may be necessary to do the rehashing that the previous garbage collection rendered necessary. But as compared to the previous scheme here I only rehash USED and ACTIVE tables, not all the tables that exist. The new hash tables are also in due course intended to provide a replacement for the quite separate hashing currently used for symbol tables (ie the package syste or "object list"). As of this first checkin I believe that EQ-based tables work up until they become full, but even so they print trace messages. When they overflow and need to grow things fail or get stuck or loop. Hashing based on EQUAL or EQUALP is just not yet re-worked for the new scheme, and I have some delicate choices to make about how signed zeros and NaNs interact with EQUAL and with hashing. The new scheme should not disrupt existing code. It is made visible via a new set of functions with names like mknewhash (as distinct from mkhash). So if you do not use those names you should not see any consequences.
  * This changes the names of some C macros in the CSL sources in a way I want to see as cleaning it up and being forward looking. It also attempts to work round a case where on the RAspberry Pi optimisation level -O3 led to failure.
  * Added test for talp. talp does not switch on rlverbose anymore.
  * There were misplaced return statements.
  * Correction so that csl.tex can be processed without errors due to a stray backslash.
  * Fix to a mistake in previous checkin.
  * As further braces-and-belt I make "makeheaders,cpp" discard unwanted CR characters if any have crept into headers files where they may cause pain and confusion.
  * This checking tells subversion to keep all the files here with LF rather than CRLF line-endings. I am doing this because somebody had a set of the files where some (but not all) had ended up with CRLF line-endings and that led to almost endless confusion where in some cases a C compiler found the sequence CR and then LF and treated it as giving a blank line - with that messing up line continuation and the like. On my machine all of the files have been using just LF in all recent copies, but perhaps somewhere else there is somebody who either has old copies or who has used an editor that puts in CRLF and who is hence in a bad way. I hope and believe that for all reasonable use of these files here that NOT having the DOS conventions will not have any bad effects! To the extent that the files in this directory are really expected to be used in JUST a cygwin context I expect that to be the case.
  * Correct typo in InnoSetup file
  * Parameter "Description" can only be used in a [Run] section. And UninstallRun is like Run in every respect except - apparently - this one!
  * Trivial typo!
  * Update croncheck1.sh before using it.
  * Arrange the make-cygwin-symlinks can delete symlinks as well as create them, and put in an UnistallRun segment in reduce.iss.in to use that to tidy up /usr/local/bin properly on unistall.
  * Update the license details slightly
  * Put in windows-usable versions of redfront stuff as rdcsl.com and rfpsl.com, noting that by default Windows will execure xxx.com ahead of xxx.exe, so these will be used from a native windows command prompt while rdcsl.exe etc will be piucked up from cygwin.
  * redcsl64.sh needed changes just as redcsl.sh had...
  * A typo. Oops. Arthur
  * rfpsl is in the bin directory.
  * Change code that sorts out the dirtectory that a script is srun from so it is properly (I hope!) robist against path names with embedded whitespace. Correct cal-sanioty-check.sh wrt the package name for some font files.
  * Correction to scripts for launching csl and psl in the Windows case.
  * Update Makefiles to adapt for instroduction of the new source file lisphash.cpp
  * A couple of corrections to the Windows build process
  * Updates to Lisp disassembler for Win64 PSL
  * Move documentation of REMEMBER statement into proc.tex
  * Correct typo
  * This tried to adjust make-cygwin-symlinks so it will but a different executable in /usr/local/bin in a cygwin32 and a cygwin64 installation, so that there is a chance that redfront might be automatically available in each of those or whichever you happen to have installed.
  * Fix a bug in csl/cslbase/buildreduce.lsp
  * Continue work on transition from use of int32_t everywhere to use of size_t where that will be the right type to use in the C++ code.
  * Yet another fix to windows installer stuff re redfront.
  * Further patch to windows installer
  * A trailing space after a backslash made nohost.sh incorrect!
  * Fix building redfront for 64-bit cygwin. But note that while I build it here at present I only install it for 32-bit cygwin. Oh the misery of the thought of the installer wanting to determine of there is a 32 or 64-bit version of cygwin somweher...
  * Further fix to reduce.iss.in
  * A further adjustment re packing a Windows installer for both CSL and PSL.
  * A step towards getting the Windows build to icnlude redfront. May not work yet but I have to have it checked in before I can check it!
  * Make a correct check for floating point exception in hypotenuse calculation.
  * I believe this fixes the buf I had introduced when moving to use of size_t rather than signed types. It related to code that counted down to zero, and the fact that the test (n>=0) is always true for unsigned types.
  * This tries to get the Linux distribution to build and package up redfront, both in the .deb and .rpm and also in the .tar file version. This will need a bit of checking before it is ready for us. Note my previous check-in of unrealated changes wrecked CSL, but I have just spotted the glitch and will fix that very soon now. This will leave the windows installer to look at, perhaps tomorrow.
  * Be rather more careful and use size_t rather than int or int32_t or intptr_t or even uintptr_t in a number of places - and then try to get rid of warnings re singed/unsigned comparisons that ended up being introduced. This should make the code long-term robust against multi-gigabyte heaps. Well not yet robist but at least a move in the right direction!
  * Arrange that the Macintosh "*.dmg" file ebds up with rfcsl and rfpsl in it.
  * Move Lisp hash-table support into a different file vecause I am thinking of replacing it with a different (improved?) scheme. Make some variable have type size_t rather than intptr_t where I view that as a better reflection of the intent - and that tend sto make them unsigned so at some stage I will need to look at all case where I compare against them...
  * Script for building PDF manual: run bibtex and makeindex only if needed (as indicated by the existence of .bbl and/or .idx files)
  * Better printing of expression containing conditionals and where:  Compare the output of "showrules sin" before and after this change
  * Start to provide a fragment of documentation for LALR other than in the source files (this still needs work) and also fix the values that terminal symbols return when the default semantic action is used - so that they make rather more sense.
  * qsum: removed redfinition of select-eval.
  * Started major rework of the Redlog AM/SM interface. There is a new package rlsupport for this. Some more autoloads are required because I want to avoid explicit load!-package as much as possible in the future. The return value of rl_cad has changed from a pair to a formula. Some things had to be adapted for this.
  * Further work to make CSL and PSL output from lalr.tst match.
  * This should make LALR behave the same way on CSL and PSL apart from issues aboy how the two systems cope with line-length in the trace printing.
  * This has significant changes to the lalr parser generator packages which result in it being able to process serious-size grammars in a reasonable amount of time. It still has some problems, but I rather hope and believe that they are now mostly surface ones, so anybody keen to use it could join in and get everything sorted out without needing to immerse themselves in the full detals of how the parsing works and how tables are generated. I also see a PSL abort at present - again I expect that fixing that will not be hard, but given that the previous version could at best work with trivial grammars this is still a big step forward. Perhaps the next big challenge will be to use the LALR scheme to build a parser for at least almost all of rlisp since that will be a good exercise and may end up handy.
  * Two things here. Fix a (minor?) CSL but where the printed representation of the result of getd on a gensym that had been given a definition and compiled but not previously printed failed to allocate or include a gensym serial number. Also support going "--without-redfront" in the configure statement to avoid having the "newfront" version of that stuff build and moved into trunk/bin.
  * Fix for the problem with select reported by Kostas. Replaces the workaround 3649. The reason for the failure of the original code was an inappropriate use of formbool in select-eval.
  * PSL Reduce: do not load .reducerc file when building noncore modules
  * PSL for FreeBSD (64bit): apply a couple of pending updates
  * A couple of corrections to the Manual, courtesy of Kostas Oikonomou
  * A couple of minor changes to limits.red, improving readability
  * redfront.red: restore previous setting of "off lessspace";
  * Fetch a current version of libedit with the aim that I move to using that rather than one that is a couple of years old.
  * Redfront has clearly never been tested on FreeBSD before, because libedit would not build there for rather frivolous reasons, which should now be fixed.
  * Test runs: avoid warning message if "ulimit -c 60" fails (e.g. wenn ulimit -c 0 is already in effect)
  * Further work on newfront - on a good day the native windows version now starts to provide service. I have also liften a load of declarations that were in .c files and put them in .h files that are then included via redfront.h so that the compiler can do some checking for consistency across separate files. The native windows version uses wineditline rather than libedit and there are certainly differences in behaviour. In particular for completion rather then you being shown a list of possible completions you will find that successive use of TAB cycles through options. There is some clean-up that gets applied when things crash and some treatment of signals that is not implemented fror Windows yet, because that had previously been done using Unix-specific code - so it needs review and reinstatement. Neither the Unix-like or the Windows version will display prompts in colour in the way that thay are clearly supposed to. That appears to be a fault that was present in the previous redfront code and ought to be sorted out one way or another. At least for Windows that is liable to involve changed in wineditline. The equivalent may very well be true in the Unix-like version if libedit does not do all that is needed. But if there are not TOO many bugs remaining I may now take a breather from this.
  * Fix malformed argument for compress (trailing escape character)  (PSL is more picky than CSL here)
  * Fix for bug found by Kostas Oikonomou:  a rounded number passed as argument to an algebraic procedure and used inside said procedure in test in select operator caused a car/cdr of an atom  Cause was an !:rd!: domain element passed to form1
  * Fixed bug with numeric operators applied to a list of numbers, when noncom is used at the same time.
  * Arrange to use type "Char" not "char" in some places as reported from the ,acports activity in late 2014, and hence arrange that the code works when libedit is built with some wide character support. This restores completion to the Windows version, and I hope it will for Linxu etc. This still leaves getting the native Windows support in place as work tha is pending.
  * PSL for freeBSD64: finish support for get-image-path, get-exec-path, get-fullpath  Better hardware trap handling: find lisp function from instruction pointer
  * PSL for FreeBSD (64 bit):  add support functions get-image-path, get-exec-path, get-fullpath and dl*  Set default heap size to 1/2GB  support building with crlibm
  * PSL build process: support --no-rcfile command line parameter
  * Get rid of spurious executable status on a whole load of source files. That had arisen because for the original check-in thing shad first been unpacked on Windows...
  * On a temporary basis I have made newfront need a "--enable-windows" configuration setting before it tries to make rfcslwin and rfpslwin, since cleanups in the main body of the code (which I HOPE have fixed some previous issues and which certainly make the code shorter and simpler) mean that the native windows version needs more work again before it will even compile. Take this opportunity to check in an updated lalr log file. Next task for newfront is to get the native windows version first back to the "mostly working" state it was in a week ago and then to a state where it is actually fully usable!
  * Correct configure variable in redfront configure.ac
  * Fix re loading a 64-bit image on a 32-bit version of CSL, plus corrections to some messages displayed by "make" where a dollar had got omitted.
  * PSL for 64bit Linux: got an access violation during stack backtrace.  Text segment starts at 0x400000, so change returnaddressp to skip addresses below 0x400000.
  * Use "$(MAKE)" rather than just "make" in nested calls within Makefile so that on BSD and other systems where gmake is needed it gets used there. Fix to lexer in lalr package - more widespread updates there soon I hope. scripts/testall.sh will now filter out a couple more timing reports that otherwise lead to frivolous reports of regressions where there really are not any. Change main CSL Makefile to use -O3 and no longer to put in -fno-strict-aliasing: tests on Windows and Linux suggest that these are now safe changes and I hope they are everywhere... And on one platform it looked as if it gave me a 3% speed-up.
  * Modify output of findos.sh on FreeBSD to return the the string freebsd + release number Otherwise, CSL will try to build in all existing cslbuild/*freebsd* directories
  * Improved versions of asin, acos, asinh and acosh in crelem.red. Faster generally and better control of rounding errors in some cases
  * redfront: when the lisp system is CSL there was no definition for redfront_oblist().
  * The native windows redfront now makes a stab at doing history. The previous crash had been because it used getenv("HOME") to try to decide where to store the history list, but when that returned NULL the effects were bad. Also remove the mutex stuff from reddeb.c because it can never have worked across the fork() since the mutex itself would have needed to be in shared memory - well perhaps the RPC version as in the original code might have, but it was not at all windows or cygwin happy. And anyway that is ONLY for debugging and the child process hardly does a lot of debug printing - indeed it only does any at all right at the start before it goes execv into Reduce. Change the comment style in findself to be old-style C /*..*/ rather than newer "//...end-of-line".
  * ioto_smaprin supports "on nat" now.
  * Now just "./configure --with-csl; make" should end up putting a redfront binary in trunk/bin. I have tried enabling history in the windows version and I think that at present that utterly breaks it so it will need debugging. The Linux etc version will need more checking.
  * Fix some typos in Makefile.am
  * Better naming for the native windows binaries
  * Enable history, which had got lost before. Arrange that binaries are automatically copied to trunk/bin when you go "make". Cause rfcsl to run CSL reduce not PSL reduce (!!). Set better optimisation for C compiler resulting in much smaller exectuables, which also now get stripped. This starts to look viable now I hope.
  * Updated rltools.rlg.
  * Added ioto_smaprin.
  * More corrections to new redfront stuff.
  * Add in the filter and nohost scripts I had failed to check in last time, amd make redfront look for redcsl and redpsl adjacent to itself.
  * Get date into banner printed when redfront starts up.
  * Some corrections to redfront stuff to get it to build better on Linux
  * Added ioto_sxread.
  * This is a start at arranging the redfront can be built alongside a full build of either of the main versions of Reduce. This leads to it and libedit getting configured every time you configure Reduce, and directories for them appear in the build tree. In the future I intend to cause "make reduce.img" trigger compilation of redfront. This has (obviously) meant re-working the autoconf files associated with all these things. If redfront is to be truly generic it should run on as many platforms as possible, and so I have made changes that let it compile on cygwin for tha style of Windows use and also as a native Windows program (using a different version of libedit) so it can run under a standard Windows command prompt. The re-worked version will also need to find the copy of Reduce it needs to invoke other than by looking at some fixed path that was defined at built time, because binary disytibutions may be build in one place but installed for use somewhere else. I have the infrastructure present so that rfcsl and rfpsl (and rfcslwin and rfpslwin) can look for commans called redcsl, redpsl, redcsl.bat and redpsl.bat in the directory that that sit in. I have NOT fully hooked that up yet, so do not expect this initial check-in to work. Well it SOMETIMES will start to if you have redcsl and redpsl present in the current directory. I have purged all mention of readline from the sources (because of the license issues that were notes at length in a README file with the previous version - and hence so that this version can be distributed in a fully unemcumbered manner.
  * Correction re the argument list for the macro.
  * The changes here are to arrange that redfront collects its list of package name at BUILD time when the source tree will be in place and so a file called "package-map" is liable to exist. This information is then stored as part of the definition of redfront_send!-packages since the macro should get expanded at compile time. I have also arranged that if $reduce refers to a name such as /cygdrive/x/... that it is mapped to the form x:/... before use. The changes should start to make this more robust if the Reduce executable is distributed as part of a binary-only package that will not have package.map, or where the collection of packages actually included might differ.
  * PSL compiler for AMD64: add r8-r15 as known register names
  * Provide a !*reduce!-packages!* variable.
  * When I had enabled what was called the "testing version" as the new standard tagging scheme for CSL I had needed to disable having each symbol with a "package" field in it because of a glitch. I have now tracked down and sorted out the glitch. This should not have externally visible consequences but is part of the internal reorganisation happening to CSL. The fuke xport.pat is a private one for me so I can (more easily) test on several platforms before committing changes.
  * Minor improvements to AMD64 disassembler
  * Mostly an attempt to make stuff build on cygwin
  * Written procedure anu_approx, and added a few comments elsewhere.
  * make an m4 directory for libedit
  * Bugfix in anu_evalfR.
  * Put libedit and winlibedit (which I have not yet fully investigated!) in the libraries section so that thay may be more readily used by any part of Reduce. I believe I will need to change the winlibedit configuration files to built it using the C compilers that come with cygwin rather than the using a native mingw build environment, but this checkin is to make a start. Tidy up the archibes so that things that should be re-created bu autoconf etc not included in them.
  * Put the main manual in the tar distribution.
  * Old enough versions of g++ get upset if you have integer literals that are too large, and seem to need INT64_C() wrapped around them even though newer C++ standrards would not require this. So put in INT64_C() in a bunch of places. Put in some more braces in initialisers to get them more pedantically correct. Arrange that the soft float library can use inline functions - noting that what it says about that in its documentation applied to older versions of gcc but if you use "extern inline" now you will find that compilation FAILS with a load of multiply defined functions. I hope I have tested the changes here from the 32-bit version of Fedora 9 up to Ubuntu 15.10 and Windows 10.
  * Minor update to 'nlopt.tst'
  * Provide a --no-rcfile command line option, and get rid of a stray print statement in csl.cpp that had been put in some time I was doing some debugging.
  * correct order of nodes in GML
  * nicer and sorted GML trees
  * shapes in GML output: zerodim = rectangle, fulldim = ellipse
  * Added atree_deleteFalseLeaves.
  * Slight improvement in hardware trap handling:  print instruction address or function name where fault occured
  * Fix a couple of minor bugs in the x86_64 disassembler
  * Base float approximation with CAD Yed graphs on new procedure anu_evalfR, which in contrast to anu_evalf uses Reduce floats.
  * Specify times for timeout in seconds not minutes or hours
  * Fix typo in croncheck1.sh
  * Comments out overflowing floating point constants there were there to generate IEEE infinities. When it has been sorted out whether floating point infinite should signal an error or quietly return an infinity (and similarly for cases that might return NaN) this can be reconsidered.
  * Remove what I believe is an old "temporary" trace print statement.
  * Make macports and ubuntu setup scripts install what I hope will be all that the snapshot builder requires. Make log files from snapshot process neater.
  * Rollback incorrect change to psl/saveimage.sh
  * Tidy up reduce menus with fixes that had been requested some while ago that I had failed to get round to installing. Small changed to snapshot nuild process.
  * psl/saveimage.sh: correct a typo
  * Fix a typo that prevented compilation. It had been an accidental check-in of work in progress. Apologies.
  * Some more changes responsing to comments on the snapshot builds.
  * psl/saveimage.sh: Call set-load-directories at Reduce startup Note to myself: need to merge psl/reduce.img.sh and psl/saveimage.sh into one script
  * - Understood some if conditions in ofsf_nextcell and put them more clearly. - Print zero-dimensional cells as triangles in gml output.
  * Try to get font sizes behaving a bit better on the Mac.
  * Correction re "=" vs "==" in configure.ac
  * Separate linux snapshots into separate directories so they do not look such a complicated mess.
  * Small fixes re snapshot building.
  * Replace realpath by "readlink -m" in scripts, as the former is not part of coreutils
  * sync updated test/rlg files from crack.
  * Further typos (etc) in scripts to make snapshots.
  * Another messup making the freestanding .tar.bz2 file.
  * Make name of freestanding snapshot tar file more consistent with other names
  * Distinguish between i686 and x86_64 freestanding Linux snapshots.
  * Attempt to correct redpsl and redcsl scripts in debianbuild
  * Retrieve .tgz and .tar.bz2 files from ubuntu snapshot builds
  * Remove a spurious blank line I had accidentally inserted that wrecked things.
  * Second attemnpt at debian .ta.bz2 making...
  * An ACN attempt to get the debianbuild stuff create free-stanable tar files for those who do not have the priviledge of installing a .deb or .rpm package.
  * Fetch .tgz files from debian build in snapshot factory.
  * Create .rpm files in debianbuild directory again
  * debianbuild Makefile: build .tgz files
  * debianbuild Makefile: exclude system directories from rpm files
  * crack testfiles no longer create temporary files + various enhancements and fixes
  * Remove a quantity of trace printing from float128 reading and printing because it is getting reasonably close to being workable.
  * emove use of "alignof" from softfloademo and move forward on fixing up float128 printing.
  * Update dates in copyright statements almost everywhere.
  * Try to put set-up-snapshot-builder so it will be more generic.
  * Yet more iteration on snapshot-building scripts.
  * snapshot building work
  * nssimp: cleanup and simplification of the fix for correct handling of multiplying matrices by scalar noncom expressions.
  * Introduced fluid variable rlmaxdeg!*.
  * snapshot builder script
  * Done a few renamings and added a comment.
  * A collection of further attempts to get the snapshot building process tidy.
  * Mistaken use of "=" where I had meant "==".
  * Nodes in gml CAD tree now contain xml test point data.
  * PSL for 32bit Linux: get lisp disassembler working
  * Try harder re the float function on bignums
  * Correct a typo!
  * A script to set up a cron task that will try to do a creation of a full set of Reduce snapshots every so often.
  * Yet another type in croncheck1.sh
  * Fix re building linux32 snapshot.
  * Correct the capture of Windows installer file
  * Build 32 and 64-bit Linux snapshots, and copy files for making a debian source archive rather than trying to do "svn export" in a way that might fail.
  * Avoid double use of "svn export" in debianbuild.
  * Add a few things to the ubuntu-sanity-check.
  * correct sorting of kernels in ctx_add
  * A first try at a script ubuntu-sanity-check to get necessary packages installed on an Ubuntu Linux.
  * I believe that now all floating point work is guarded so that if trap-floating-overflow is enabled you will get an error report. At present that is the default but I still hope that in a while things will change so that the default for overflow will be to yield an IEEE infinity and the default for illegal calculations returning a floating point result will be a NaN. But I also hope that this can be synchromized and agreed with PSL sp that PSL and CSL behave at le3ast rather similarly in these edge cases!
  * Run autogen.sh on each platform before attempting the builds...
  * Fix another typo!
  * Correction to croncheck1.sh
  * Correct a type/mistake in croncheck1.sh
  * croncheck1.sh that builds things on a Mac and two VMs
  * This is to some extent expected to be a transient checkin updating the scripts that create snapshots. The versions here are based on using a directory on a host machine that is shared with virtual machines that build for other operating systems. There are multiple issues with these shared folders when using virtualbox. (a) To use symbolic links one has to do delicate setup within virtualbox that is explicitly and deliberately made obscure and awkward because the implementation of shared folders does not guarantee that paths in guest and host match, and may lead to the guest getting access to files outside the folder that was set up for sharing. Symbolic links are present in parts of the Reduce tree and are used by the steps that create .deb and .rpm packages. (b) For reasons I have not yet traced, pdflatex leaves its log file in a bad state on a shared folder with an OSX host and a windows/cygwin guest, and that causes confusion. (c) There are significant performance pains in access to the shared folders from the guest. So soon I intend to move to a model that copies files across to the guest. But this version gets checked in so that abybody who wants to look into it further can retrieve and test and investigate further.
  * Correct typo in Makefile
  * Remove old code for win64 PSL
  * Slightly better treatment of cases where pdflatex fails to converge, so that mkindex is still called and one final run of pdflatex gets run.
  * PSL for Win64: latest changes to Lisp disassembler
  * Leave log files alone in mkpdf.sh, but arrange that if the repeated runs of pflatex fail to converge on cross-references that I still return with a zero return code so that subsequent building steps do not abort.
  * Teach AM64 disassembler the x87 fpu opcodes (not completely tested)
  * At least on on cygwin installation I seem to need to remove *.log files before running pdflatex to avoid the mkpdf.sh script looping. I do not really understand!
  * Arrange that primers.tex is a copy not a symbolic link. This needs explanation since it means that anybody who now updates that file will need to update both versions, or else somebody will need to work out which one to keep and which to discard and then fix ALL relevant scripts. The issue with use of a symbolic link arises when a copy of the tree has been checke dout on one platform (in my case OSX) and then the tree is exported as a shared diredtory and picked up in a Windows/cygwin context. On the cygwin side the native symbolic link from the OSX host is not recognised and a consequence is that use of latex on it collapses in a miserable way. This happens in the "make docs.stamp" phase of building in the winbuild directory. I see that there are symbolic links elsewhere in the tree, and these too would represent a risk in any attempt to have a shared file-system between a Unix style and windows style pair of platforms. Many people will not be trying to share directories between (virtual) machines so will not care or be hit by this, but I do and have been!
  * Fix typos in macports-setup.sh
  * Fix script to cope better with cygwin32 vs cygwin64 mixed operation when paths within the cygwin directory are used.
  * Further improvements to Lisp disassembler for AMD64
  * Clean up winbuild scripts and (I hope) make them work better. Also add a function trap-floating-overflow, which at present only has an effect on times (ie multioplication).
  * Trying to get the winbuild stuff up to date both wrt cygwin changes and to allow for me now using a softfdloat library (and patching for previous typos!)
  * Discard the copy of crlibm that was in stored as a subdirectory of cslbase because now there is a version in libraries/crlibm where the code can be used by both CSL and PSL.
  * Change cygwin-sanity-check.sh, the main configure scripts and stuff in winbuild to reflect that fact that cygwin have stopped providing a full set of libraries for use of x86_64-pc-cygwin-gcc to cross-build 64-bit cygwin programs while running on 32-bit cygwin. Minor tidy-up re bytecounts in bytes1.cpp because the count field is now always 64-bits wide. A couple of spelling mistakes in comments elsewhere. Macports now encourages the use of the macports version of subversion, which at the time of writing is in the 1.9 series and is compatible with the version used with cygwin, while the default pre-installed version that comes with OSX/Xcode is the 1.7 series. -This line, and those below, will be ignored--
  * PSL for WIn64 signal handling: make sure that the interrupt handler doesn't overwrite non-volatile registers
  * Improved lisp disassembler for AMD64:  support both Intel and AT&T assembler syntax  add a lot of newer opcodes (mostly sse)
  * Bug fix to channelwritecodepointer in PSL:  Protect against invalid code pointer; occurs for compiled anonymous lambda expressions
  * PSL for Win64: better handling of floating point traps, issue more specific error message
  * Fix (quotient 0.0 0.0) In win64 PSL
  * PSL for AMD64: correctly handle (quotient 0.0 0.0)  - this raises the FE_INVALID flag, not FE_DIVBYZERO
  * Restore error on attempt to divide by 0.0 (but in the future I will probably change that to return an infinity or a NaN, so people should NOT rely on this behaviour), and commenst out a stray printf statement in print.cpp that was there to help me develop and debug printing of 128-bit floats.
  * Commit compiled version of latest patch
  * Correct error in code generation (instruction length calculated wrong in lth-sibbyte-for-indexed)
  * PSL for win64: add proper exception handling for hardware faults in lisp code, like Segmentation violation.
  * Correct comment characters in nstruct.csh (# instead of %)
  * A few corrections to 128-bit floating point reading and printing - but the code still has a lot of trace/debug printing in there. YOu can try it out using CSL and giving intput like (set!-print!-precision 35) and then (quotient 1.0l0 3.0l0). Eg at present I still need to investigate the case 1.0L-3 which comes out as 0.0009999...9998 and I believe I have not done some rounding in quite the right place...
  * Fix for left and right scalar multiplication of matrices by noncom expressions. This hopefully completes the partial fix in r3411.
  * a *HACK* that is intended to work round a problem whereby under cygwin(32) libtook seemed to be trying to link in a non-exitent libpng15 library. What I have done is to write out the link command manually for more things. This is at some level both ugly and a risk that what I have used as the linker commands may not suit everywhere. While doing that fix the dynamic loading demo where the symbol in the loadable module needed C linkage so it could be found.
  * Removed an unecessary factor from two virtual substitution procedures.
  * Added date to Symbolic Mode Primer, because we did some corrections, and we are about to do more.
  * Clean-up on softfp configuration so that its header files do not end up defining a load of things like VERSION that potentially confuse other bits of code.
  * This version now has enough support for 128-bit floats that it starts to be feasible to test them. Specifically they can be read in my CSL (at the Lisp reader level - the Reduce input code should be unchanged and can not access them easily) using a syntax like 1.23L4. I think that raeding does not round values properly, so for instance 1.0L-2 ends up returned as something with loads of 9s in its representation. Also although the low-level printing code may be getting better the way it hooks on to the code in print.cpp is bad and can give garbage. The code that reads 128-bit floats has some trace printing in.  However PLUS, TIMES and QUOTIENT can now be tried using 128-bit floats - with the start of their visibility at the Lisp level testing of everything gets easier.
  * Re bug 66, this fixes a problem that showed up as "bad argument to lessp". The bug was generic to CSL and PSL when the tmprint mdoiule was in use - in either case when using TeXmacs or in CSL when using the fancy display in the GUI. Despite not being a CSL-specific bug it was my fault, having been introduced in revision 1208 (July 2011) in what was intended to be a minor clean-up of the code in tmprint.red. It can amaze me how long issues can be present and not be spotted. Many thanks to Rainer for pinpointing the exact location of the glitch.
  * One more try at the new-embedded, following checks on cygwin32, Mac, 64-bit Ubuntu and 32-bit ARM. Go to the new-embedded directory and go make, then make proc. Then run procedural/reduce to see a demo of what the code in cslvbase/driver.cpp can do for you. You MUST have a 32-bit development environment set up, so on 64-bit Linux you MUST ensure that you have multilib stuff installed so that "g++ -m32" works smoothly. But once you have done this you may find this an easier world to use to experiment with Reduce if ytou are thinking of using it as a component in some larger piece of software or you wish to write an arms-length front-end for it. But I will KEEP stressing that this is a stater kit to get things going and a proper version suitable for general distribution and use wou;d need to go back and worry about all the things that autoconf worries about for the main-stream version!
  * Checking new-embedded on Mac and on Raspberry pi. When I have checked this version in I will go back and re-check Widnows and Linux!
  * Improve scripts/status.sh so as not to show autoconf generated files.
  * driver.cpp now illustrates how easy it is to put bits on Lisp into a string and get them evaluated via the procedural activation methods.
  * Fixes re embedded on Linux
  * I hope this gets the new-embedded files so they are now up to date and work. I have tested on cygwin32 so far and will check on Linux next. Changes were meeded to cope with the C->C++ change and to allow for the use of both the crlibm and SoftFloat-3a libraries. Also various files had been added to CSL and some changes (eg gc.c -> cslgc.cpp), and the rigid simplistic Makefiles featured in new-embedded therefore needed updating. Please read the README file in new-embedded to get some understanding of what this is all about: it is for people who wish to embed a copy of Reduce within some other C or C++ project and who are willing to work for themselves to adapt both the CSL C++ code and the sources of Reduce to their needs - perhaps using the sample code here to get them started.
  * Change where I include "softfloat.h" so it interacts with building u01.cpp etc better, because when that was included from headers.h it did not get its contents transcribed into u01.cpp, while now it is included from machine.h the "#include" statement persists and the potentially machine-specific versions of the library can get picked up.
  * arith14.cpp had been missed out from the previous checkin. Apologies.
  * This gets float128_t data representation in place and probably makes plus and times understand it. There is quite a lot of printing code in arith14.cpp but not yet coplete and not in a form that can link back to what is in print.cpp. I have not yet started work on reading. Note that these long floats will not be especially easy to access since they are present as a Common Lisp variant on the numeric data-types and Standard Lisp does not have any real concept of there being multiple flavours of floating point values!
  * some corrections in the document "REDUCE Symbolic Mode Primer"
  * ncpoly package: Correct car/cdr of nil during trace output, add a couple of extra trace outputs
  * Corrections to the softfloat setup sorted out when i tried it on 64-bit Linux as well as 32-bit cygwin. I have more platforms to try now...
  * Check in a file that I had previously failed to!
  * Put the SoftFloat-3a library into the libraries directory, adjusted so I can build it using autoconf etc. Adjust autogen script to cover it. This library provides support for 128-bit "double double" floats and I intend to use those for "long" floats in CSL, so that I eventually have short (28 bit), single (32 bit), double (64 bit) and long (128 bit). Performance will be way slower than native floating point - obviously. There is no support for elementary functions - just basic arithmetic (well there is sqrt). They way I build the library will not take advantage of system-specific opportunities, and so will not be anything like as fast as it could potentially be. The installation will need testing on machines with various byte orderings (ie big and little endian). There is a program softfloatdemo.cpp in the cslbase directory that at present is where I am working on conversion between 128-bit floats and character strings. The printing side is almost behaving - while reading has not yet been started. When I have those bits of code stable I will move them elsewhere and make the demo program do something more interesting!
  * PSL for Win64: remove superfluous files
  * PSL compiler for win64: change code generator to emit correct prefix codes for regs 8-15, copied from AMD64_ext (linux x86_64) architecture. Small improvement to compiled code.
  * Group digits for initial value of euler_gamma, so that every individual group can be read a non-bignum (for VSL)
  * Prevent redefinition of get!-image!-path if it is already defined in the kernel
  * PSL for Win64: allow cygwin paths, with /cygdrive prefix, if env. var  BPSL_CYGDRIVE_PREFIX=/cygdrive is set. This makes it easier to swithc between cygwin and native Windows while working PSL.
  * Fix type in previous checkin
  * More care with writing in the values that make_bighdr() creates when a padder entry needs to be written in during bignum arithmetic.
  * Several bug fixes. In particular, passing void pointers between C an Python is subtle, and the code is still not perfect. Containers appear to be the methods of choice.
  * Possible correction re some treatment of negative numbers with absolute values in the range 2^31 to 2^62. This might have had an impact on the (ill-documented) "indirect" function or in calling foreign functions with 64-bit integer arguments. Also many fixes to serialization code as to references to shared objects, and the code in preserve & restart now changes so that the --with-test/EXPERIMENT option replaces the old code with what will eventually be the new.
  * A more careful version of get_resource_directory(). Also add lto_substr() for this.
  * Updated test file log.
  * Added 2 modules for finding special solutions of nonlinear underdetermined algebraic system. Fixes a serious bug which came up for non-linear differential systems that involved at least one equation with only one function of all variables which in this equation occured only algebraically. Thomas Wolf
  * Remove a couple of duplicate files
  * Now the PSL version should also report a revision number, and if you use scripts/commit.sh on (say) either the CSL or PSL parts of the tree then the revision number in packages/support/revision.red will not be updated and so there will be less triggering of major rebuilds.
  * For the CSL version at least this now displays a revision number when Reduce starts up. Making the PSL one do so too would be easy and would just involve making the build job read in support/revision.red just before rlisp.red. At present following a check-in even of just CSL C++ code changes the overall revision number changes, and revision.red changing triggers a dependency that can cause re-creatin of all the files in cslbuild/generated-c. This is perhaps unnecessarily costly. Changes within the packages directory justify the bg rebuild rather better. I may want to address that issue some time, but for now it should be safe.
  * Fix a type introduced in previous checkin.
  * Two things here. I now declare my changes to the tagging in CSL to be stable enough for general use, so they move from being guarded by EXPERIMENT to being the regular versions. An effect is that Common Lisp style 28-bit short floats are not supported for  while, but they have not been wanted for Standards Lisp anyway. Also I bet that bitvectors (also not used by Reduce) need some more debugging. I have also adjusted the file scripts/commit.sh so that it upcates the CSL file version.h and the Reduce file support/revision.red to hold an updated subversion revision number. I hoep soon that I can use these saved revision numbers in banners etc and that will simplify working out exacly which version of the code anybody is using in case they report trouble.
  * If system is experimental print a banner to say that. THis change is almost as much to cause c-code to be recreated as for its own sake.
  * When I changes CSLbool to bool it turned out that one place in the code I had used CSLbool I was in fact passing a flag-word of integers with two bits of information. Thus the clean-up that passed as a C++ bool flushed this mistake out and led to trouble. Now fixed.
  * serialization code uses inthash not its own private hash table code.
  * When this code was in C rather than C++ and old versions of C did not have a boolean type I introduced a typedef CSLbool and names YES and NO. Now things are in C++ this checkin mostly replaces use of CSLbool with the C++ "bool" type. So this is changes meny files but in a way that is pretty-well just textual.
  * Wimp out from supporting a package fioeld in symbols - somehow I have not updated that well enough during garbage collectionm or the preserve and restart steps. Add a files inthash.[h,cpp] that provide a reasonably general purpose hash table schema for cases where the keys are integers. It allows for up to 80% occupancy with constant cost lookup and an amortised cost of insertion that (even including the cost of rehashing the table as it grows) seems to be about 5 times the cost of lookup. I intend to use this to replace separate hash table implementations I have elsewhere.
  * The environment variable DESTDIR has an effect on automake when set, and I had unwittingly used that as a variable on my own, leading to unwanted consequences. So here I just change me name to be DESTINATIONDIR.
  * Correction re training "/" left by "cygpath -a ."
  * Fix a typo!
  * Correct incorrect symbolic link
  * gctest (which is a temporary test fragment anyway) should not try to include serialize.cpp as a source now that serialize is starting to be serious code.
  * Fix so that it will compile on 64-bit systems (by changing an "int" to "intptr_t" in expressions ((int)x & 7) with x a pointer type. The cast to int was rejected as losing precision, regardless of that fact that the subsequent mask operation lost all but the low 3 bits, which I was wanting to inspect to enforce some alignment.
  * Further tidying up of configure scripts
  * Further work on csl-sanity-check and verification of autoconf etc version numbers, so that when using csl-sanity-check a version of autoconf or automake with a patch number (eg 1.14.1 rather than just 1.14) does not give trouble. This ought not to impact ordinary builds.
  * Mostly to correct some typos.
  * Further cleanups.
  * Serialization now starts to deal with shared structures properly. It feels as if the major parts of the code there are now sorted, and it is "just" finishing it all that needs to be done.
  * Look for libtoolize rather than libtool...
  * function unserialize that tries to read back what the most recent call to serialize generated. This even starts to work for very simple cases, and provides a debugging harness for getting more of the serialization code implemented and then debugged.
  * At least the experimental version now compiles again.
  * Moving forward on serialization code (which does not quite compile yet but shows more of the structure it is working towards).
  * Update to cygwin-sanity-check because it seems that libpng15 is needed. I think this is an ugliness that may go away in a while and is related the the main release of libpng now being 16? Anyway getting versionm 15 installed helps the build sometimes.
  * Improve cygwin-sanity-check.sh so that the command it proposed to you to install further packages is better formed and maybe even works!
  * make the script for setting up macports check that a deployment target has been set, and that everything wi8ll be compiled from source (and hence that the deployment target will have an effect).
  * A snapshot checkin to keep my working changes safe. This is not yet working but what I have here now shows the design and has sketches of the major part of the code.
  * Commit fix for PSL compiler for linux (32bit)
  * Commit fix for PSL compiler for macintel64
  * Commit PSL compiler fix for win32
  * Compile PSL compiler fix for Win64
  * I now (I hope) configure a copt of crlibm when you configure for PSL.
  * Add a directory "libraries" for externally sourced libraries to be used by both PSL and CSL, and arrange autogem.sh so that it gets processed when one runs configure.
  * Fix a bug in PSL compiler: assignment to an id with the constant? property went wrong
  * Minor bug fixes and improvements
  * Further work on especially the Windows spanshop build process
  * Small further fix re windows snapshots - which I now need to test.
  * Work towards getting the windows snapshot build working again.
  * Pass info from make-snapshot to make-snapshot1 by exporting shell vars.
  * Split make-snapshot into two so that a useful log gets created when a full build is made, and does not get clobbered by subsequent minor attempts. Bring cod eto run cygwin64 things from a cygwin32 shell up to date in winbuild, since without it the attempt to make a Windows snapshot fails, and the old code did not survice the move to Widnows 10.
  * Improve information and procedures for Macintosh.
  * Make autoconf/automake version checks more robust against 3-component version identification, such as 14.2.1 (rather than just 14.2).
  * Get the Mac distribution image closer to correct...
  * Small fix to automake verion checking
  * Win64 PSL Kernel:  Change external_unlink to return 0 on success, 1 on error  Link against crlibm
  * I had made a mistake about where I re-instated AC_OUTPUT so that Makefile conduitiosn were not properly activated...
  * First successful build of win32 PSL kernel with mingw gcc
  * Correction to a mistake I had made when editing cslbase/configure.ac, and better decisions about just what needs rebuilding bu autogen.sh. Bring scripts/configure.ac up to demandning the versions I think I now rely on.
  * I may need to get this installed to bootstrap the changes of the previous checkin.
  * Yet another attempt to defuse the issue of autoconf/automake version compatibility pain. What I do now is arrange that every time a user runs "configure" from the top-level directory it starts by checking for valid versions of autoconf and autoamek. It should stop with a report if either those programs are not installed or if they are too old. Then it uses them to regenerate all relevant files in versions suitable for the local machine, and then re-starts the original invokation of configure. The individual sub-packages then just use the default automake-provided rules for re-running autoconf and automake, on the basis that because of the radical top-level actions the versions should now all match up. This adds some cost to the initial configuration step. If this works across a wide enough range of platforms I will then be able be able to remove most of the autoconf-generated files from the subversion repository (eg m4, Makefile.in, config.h.in) because they will get created locally on the first use of the configure script. I should only need to distribute the top-level configure script - and any system dependent features of it should not matter bacsuse it will automatically replace itself before getting to rely on them... Fingers crossed, and I hope anybody who tries this and sees success where they last saw pain, or who find residual problems, will get in touch to alert me. And ideally propose ways to improve things.
  * PSL for win32: print NaN and +/-inf correctly
  * Minor lexical cleanup
  * Minor change to PSL build process:  do not expand env. variables in generated script to run bare PSL
  * Makefile for win32 bpsl with Visual Studio 2010
  * PSL Kernel for 32bit Windows:  New functions get-image-path, get-exec-path, get-fullpath
  * PSL kernel for 64bit Windows:  New functions get-imagepath, get-exec-path, get-fullpath
  * PSL build shell scripts: accept newer MacOS versions
  * Minor correction to macintel64 PSL kernel source:   Make build process more robust   Prevent compiler warnings in float.c
  * macintel64: Fixes to lshift for bignums
  * Add missing fixup.b file to macintel64 loadpath
  * PSL kernel for 64bit Mac: recompile new kernel and helper functions for  external_mkdir, external_rmdir, get-exec-path, get-image-path, and get-fullpath
  * nssimp should not reverse the order of the scalar part of its input as it may contain non commutative functions. The old code yielded for operator f; noncom f; mat((1,0),(0,0))*f 1 *f 2; mat((f(2)*f(1),0),(0,0)) whereas now we get mat((f(1)*f(2),0),(0,0)) .
  * Start on a new heap dumper. Small changes to packing of Mac distribution. A couple of fixed to Reduce menus.
  * PSL kernel for 64bit Mac: add new functions    (external_mkdir name mode)    (external_rmdir name)    (get-exec-path)         returns the absolute pathname of the PSL executable    (get-image-path)        returns the absolute pathname of the image file loaded    (get-fullpath relpath)  converts the path relpath to a standard absolute path, using the realpath library function
  * PSL kernel for 64bit Linux:   Correct an error with single character ids above char 127   Add three new functions    (get-exec-path)         returns the absolute pathname of the PSL executable    (get-image-path)        returns the absolute pathname of the image file loaded    (get-fullpath relpath)  converts the path relpath to a standard absolute path, using the realpath library function
  * Remove symlink psl/dist/kernel/AMD64_ext/externals.sl, to be replaced by a file
  * Try rebuilding Mac bpsl for Rainer. Leave the script I used in place in the PSL directory in case I (or somebody else) needs to do it again.
  * This tries to arrange that the wxWidgets build does not end up giving a binary that depends on non-system libraries, and also it tries to arrange that if somebody specified --without-gui that the linking does not look for X11 libraries. It also corrects dependencies now that on the <ac the image files are in places like reduce.app/Contents/MacOS.reduce.img rather than in just reduce.img
  * PSL for macintel64: save pointers to main parameters argc and argv in Lisp global vars of the same name
  * Correct typos in Reduce menus for CSL, and make the script to run PSL be quiet if it is unabgle to resetthe stack size, and also to try a range of stack sizes to try to get as large a one as it reasonably cam.
  * Protect against unset imagefilename!*
  * This time the attempt is to protect against version incompatibility in aclocal.
  * A yet more agressive attempt to make build process less sensitive to automake (etc) versions locally installed
  * A new attempt to arrange that autoconf-related files are re-generated in a manner that copes with cross platform and cross-version issues.
  * Allow override of PSL load path at run time via environment variables, either  REDUCE_LOADDIRECTORIES or PSL_LOADDIRECTORIES
  * Fixes that - I believe - mean that test logs when running the --with-test version pretty well match expectations. This may conclude phase 1 of that experiment, so now I am in a position to progress to more interesting aspects of it!
  * Set load path at start of Reduce system
  * Setting the load path from the imagefilename on the command line, with two new fluid variables:   imagefilename!* and loadbasedirectory!*
  * Minor change to manual
  * Now reduce gets part way through compiling avector befote it crashes. I needed to defind EXPERIMENT in CPPFLAGS because u01.cpp etc do not include "config.h" and so weher not picking up the flag. Mage the generated C++ a bit safer re the changes too.
  * Bootstrapreduce now builds and runs with the --enable-test option and most of the test run OK. SO far the full-speed Reduce is not quite going.
  * More fixes re the experiment - which can not start (but not complete) the building of bootstrapreduce. Current bug is bad tagging following a big integer multiplication. Should be easy to track down and fix!
  * Add windows specific code to PSL pathname parser
  * Add PSL specific code to extract the load directories from the image filename in the command line
  * A whole bunch of changes that mean that with the new tagging experiment I can (at least sometimes!) make csl.img. An attempt to make bootstrapreduce.img still crashes, but this still feels like progress, and the process of debugging the chaneg in tagging is still prompting clean-up and review of the existing code that (with luck) makes it more robust or easier to understand anyway.
  * Yet a further attempt to get auto-reconfiguration running smoothly.
  * Withdraw an attempt to get autoreconf done when needed because on some platforms it does not leave datestamps in the order I expected. Oh dear, Oh bother!
  * Add comments to the macbuild/Makefile noting that somebody needs to review the lines (currently commented out) that use a saveimage script to make a PSL image know something about file paths. I hope it can be made to defer the choice of path until run-time so it can be guided by an environment variable as set up by macbuild/runpsl.sh... but a PSL expert will maybe understand better.
  * Arrange that the source archive for a Macintosh contains (mostly) just Macintosh-relevant files.
  * This restores some attempt to call autoreconf when it is needed based on checking date-stanps. When you run "configure" it should check if all the relevant precursor (or related) files have been regenerated recently enough, amd if not it will trigger "autoreconf" to fix things and then re-start the call to configure with what might be an updated version of itself.
  * This checks in all the files generated by autogen.sh. I had hoped that I would not need to do this and that autoreconf would get triggered to update everything seamlessly, however several reports show otherwise. The files in this checkin have been generated on cygwin using the versions of # autoconf, automake and libtool in a current update there. But these # will not be the same releases as will be installed on (say) a stable # rather than cutting edge Linux. So I will need to check to see if the # complete set of files here survive elsewhere... and if necessary seek some # extra ideas for getting things supportable! People with a current working # install can expect a lot of file clashes between their extant versions of all these files and the ones here. I think it ought not to matter which version they end up with provided they have a reasonably self-consistent set and the expectation has been that running autogen.sh would update their local copies. I have made it a little more agressive (and hence expensive) in that direction.
  * Put a source archive in the Mac .dmg
  * Further attempts to make Macintosh applications bundled that can be moved from one machine to another happily.
  * further fix to make-snapshot.sh
  * For the Macintosh snapshot build just copy the file across rather than messing with ssh and any worries about shared keys.
  * Fix a clumsy mistake that triggers on 64-bit systems"
  * Correct a mistake I had made when trying to rationalize code in fns2.cpp. Apologies for the bug that I believe this checkin fixes.
  * Fixed a typo (duplicate of commented line) that yielded a bug
  * Correction for the macintosh version.
  * Further work towards creating a mac snapshot
  * Fixes to the treatment of BPS handles to accommodate the experimental new tagging scheme - the result is that the compiler can now mostly (but not totally) self-compile, but garbage collection and hence dumping store images still crashes. This ought not to make any differente to people who do not configure with --enable-test, but it is leading to code cleanup that perhaps benefits all.
  * Fix a typo and general moving the experimental version onwards.
  * Version with new tagging scheme can run at least some very simple code!
  * CSL now compiled with --enable-experiment. It will be a while before it works properly though! But that is still a state where I want to preserve it.
  * I believe that now the 64-bin executables can reload 32-bit iomage files just as they used to be able to. Trivial adjustments to the FOX stuff.
  * Cleanup of examples
  * Do a more enthusiastic "Forcing" autogen ahead of building a distribution
  * Corrections to typos in fwin.cpp
  * Fixed a bug in one example; added a script for automatic rerunning of a computation
  * Cleanup of the manual pages of cde
  * Alter all file Makefile.am to get rid of some previous attempts I had to adjust the standard automake rules re redoing all the autoconf stuff. My code was there to provide recovery when the local host machine did not have the same version of autoconf as the originating one, or when it did not even have autoconf/automake installed at all. It tended to lead to too many regenerations of all the autoconf files, and some levels of grief. So here I revery to somethin plainer. If anybody has trouble they may need to run "autoreconf -f -i -v" in pretty well every directory that has a file configure.ac in it. The main cases are covered by the script autogen.sh in the top level of the tree. Note that these new files will need to have automake used on them once before they impact anything! So there will certainly be one pass where autoreconf goes through....
  * I hope this version now builds even --without-gui. A messed up edit was causing that case to fail.
  * Removal of setting on __W32_WINNT that dated from the pre-Windows 2000 timescale. Arrange that autogen.sh only rebuilds the config files I know about (and in particular that it does not mess with private working copies made during debugging). make3 cygwin-sanity-check ensure that libtool is installed.
  * Minor improvements to manual
  * Reduce manual:   added documentation for listvecops and CDE packages   minor improvements
  * I believe that now a 32-bit system can load a 64-bit image again. So far having a 64-bit system load a 32-bit image is not sorted, but in practise I think that is less urgent.
  * CSL much closer to working following the chance from C to C++. There is at present (at least) a glitch in that 64-bit images can not be reloaded by a 32-bit executable. One of teh more recent problems was another case where "char *" and "const char *" need to be got right.
  * I had accidentally deleted a line with a result that csl did not find its default image file if none was specified on the command line.
  * Get Windows version back so it compiles again - but note that this and a few revisions before it do not find an image file automatically so you need to go somethig like "reduce -i-" to start up. I will fix that soon. Also loading 64-bit image with a 32-bit executable has got broken and will need sorting out. Apart from that (!) I believe that things are going in a useful direction.
  * A whole bunch of Macintosh changes that try to make things easier to package as an application bundle for distribution
  * Improved creation of application bundle
  * A whole bunch of Macintosh changes that try to make things easier to package as an application bundle for distribution
  * Yet another improvement to the Reduce manual
  * Minor improvements to manual index
  * Work to try to ge the Mac version in a state where it can be packaged in an application bundle. This is not yet complete and I run the risk of hurting other platforms as I work on it. So this checkin is in part so I can migrate when I have been doing across to Windows and Linux for testing there. IN the meanwhile if you have trouble please update your csl/cslbase directory to a slightly older revision.
  * Minor improvements to manual
  * Fix a typo in tags.h
  * Some changes to try to improve things on a Macintosh - but not yet enough to allow CSL or Reduce to run when within an application bundle. Clicking or using "open" on csl.app puts somethiing on the bar at the bottom of your screen for a very short time and then unwinds that and crashes with what appears to be a pretty unspecific "something failed" error code. Anybody got any ideas?
  * Manual: Add all switches to index, minor improvements.
  * Slight changes to move forward the csl experimental change of tagging, and improvements to the automaked snapshot scripts I am trying to get stable.
  * New package.map file for vsl
  * vsl.lsp: correct a typo (missing colon)
  * Added a couple of lisp functions so that vsl can run Reduce
  * Change to PSL build scripts: abort build after error when compiling a module
  * Mostly this is checking in a bunch of changes to CSL that are guarded by ... #ifdef EXPERIMENT ... and this is in turn enabled by configuring with the option --with-test. THese changes alter the tagging scheme for Lisp data in a way that in the shortish term will let the maximum object size double and which in a while has the scope for a further doubling. It is in preparation for a new scheme for dumping and restoring images too (serialize.cpp is a non-working file where stuff about that will grow). The new version has incremented the CSL version number because heap images will not be compatible between systems before and aftyer this change - but that just means that you meed to recompile them. Note again that the new experimental version is not yet workable and certainly is not yet ready to deliver improvements... but I am saving this so that the direction is made clear.
  * limits: return simplified argument when limit computation fails.  This makes a difference in cases like:
  * correct missing semicolon in sparse/spsvd.red
  * linalg and sparse packages: recover gracefully in singular value decomposition calculation when non-numeric matrix elements are encountered.
  * Avoid error message in PSL when OFF Fancy is used before ON FANCY
  * Fixed bugs in defint and limits packages Commit changes in test files caused by last commit (reset factor switch at end of definite integration)
  * Fixed a bug in the defint package where calling the int operator would modify global switches exp and factor
  * Latest regression test file works now in both CSL and PSL
  * Correct and improve fancy output for "on list;" and for special functions. Test file works for CSL only.
  * Package specfn2:   fixed a bug in checking parameters contain nonpositive integers   renamed listplus --> specfn!-listplus, as this is also defined in listvecops package   code cleanup
  * Happy Christmas everybody! Avoid warnings in print & fns3. LT_INIT made linking go static by default and on Linux that wrecked access to ncurses. Get serialize.c to where it will compile, but it is still a first sketch of a direction for me to go in, not useful code at all yet!
  * I now use libtool in soime cases and this seems to require ltmain.sh here. I would hope that autoreconf would install all that was needed but maybe this copy will be useful for those who do not have that in full working order. Note that on Ubunti U seem to need to install libtool-bin as well as libtool.
  * Start a file serialize.cpp that will be part of --enable-test experimentation and tidy up a bit.
  * Small fix to Makefile.am re Boehm and csl. Re-profile current system and put snapshot of profile.dat and generated files in place so that anybody who configure with csl when cslbuild is initially not present will get the latest copies.
  * Fit other.cygwin.cpp so that it avoids issues in the interaction between cygwin and Windows 10 that caused the previous version to fail. Do not ask the Boehm gc to support C++ "new" and "free" at all sincethat seems not to behave on mingw32 platforms so I wish to avoid relying on it. Patch gc.h so that Boehm behaves better on cygwin64 and make small steps with the test code for it.
  * Regression tests for cde
  * A few improvements and bug fixes to cde
  * Improved PSL compatibility for CDE
  * Add the libatomic_ops stuff, get rid of autom4te.cache
  * Initial checkin of "Cde" package - this seems not to run properly under PSL at present so that will need work, but getting the code in the try puts it where that sorting out can happen. Also refresh the pre-build *.cpp files in csl/generated-c to reflect a current version.
  * Replaced a redundant 'collect' with 'do'.
  * djustments to build scripts and fix (I hope) to termed.cpp
  * add a newer version of the Boehm gc
  * delete a version og the Boehm gc
  * A further attempt at getting cfmakeraw visible where needed.
  * Further addressing of C++ warnings, and it seems BSD need __BSD_VISIBLE (well ast least FreeBSD) before it defines cfmakeraw.
  * Add in the script I am trying to use to create snapshots on a regular basis. It will need en entry in crontab to invoke it, and the virtual machines that it launches will also need to be set up and have suitable start-up scripts installed etc etc etc!
  * Changes to Manual:  Start listing switches under a common heading in the index.  Removed a lot of visual formatting in SPARSE and LINALG documentation.
  * Corrections to make-snapshot script
  * Improvements to the make-snapshots script
  * Small fix to make-snapshot.sh
  * Provide a scrupts/commit.sh script that avoids checking in files created by the autoconf/automake tools. Start on a macbuild directory. Provide make-snapshot.sh that is a start at making it possible to create regular snapshots.
  * Linalg package: correct documentation of pseudo_inverse  Make code of svd and pseudo_inverse do what is documented
  * linalg package: correct of computation of pseudo_inverse of singular matrix
  * Removed constant!? property of symbols before assigning to them  (otherwise triggers an error in the PSL compiler)
  * restore CSL_IGNORE temporarily
  * Remove uses of CSL_IGNORE bu isng C++ scheme to have unnamed arguments where an arg is not used. Put in a structure that can build the Boehm collector and a place to put test code for it in gctest.cpp
  * Reference source copy of the Boehm garbage collector so that originators get full credit
  * Include a copy of the Boehm garbage collector, which may at a minimum be useful in implementing the GUI in a more flexible way than I do at present
  * CSL changes that should get rid of warnings about mixing signed and unsigned values, together with removal of many instances of CSL_IGNORE by removing the name of unused parameters from argument lists. Arrange that the code always uses what used to called a NILSEG_EXTERNS option.
  * minor updates plus config files regenerated
  * This is a bigish check-in for CSL, so it gets a longet than usual explanation here. It changes all of CSL so that it gets compiled using a C++ compiler rather than in C. At present the code remains pretty much idiomatically C but there is now an opportunity to gradually take advantage of more C++ features. The changes made here are: (1) Adjust all the build scripts to use C++ not C (2) Alter comments from "/* ... */" form into "//..." form almost everywhere. (3) Pass the code through astyle to impose a consistent layout. This is not     the very most default astyle format but has been adapted to be close to     the layout I have preferred to date. (4) Make changes in MANY places to put in "const char *" rather than "char *"     and a smaller number to change use on "int" into "size_t", fix issues     relating to signed vs unsigned arithmetic and generally start tidying up. (5) use "extern "C"" in enough declarations that I can build the code. A     future set of changes may change that and go to the use of C++ namespaces,     but for now I fall back to C-style linkage in places where I may wish to     export symbols (eg for if the code is used as a dynamically loadable     library) or where this helps me across namespace boundaries. (6) change the type-name Lisp_Object to LispObject (ie remove the underscore). (7) the code that compiles Lisp to C now has to generate C++ compatible code,     where the biggest pains I had there related to comments and material in     them that contained a newline of that ended in a backslash. This version has been built using FOX and using wxWidgets on Widnows, 64-bit Linux and on a Macintosh... but there could remain transition issues. If you spot one please report it to me so it can be addressed promptly.
  * Adapeted test rlg files to the new default setting of "on rlsisocx" (simplifier sorts complex subformulas).
  * Just some comments and code formatting.
  * Limits package:   Remove section about diagnostic functions from manual, as these do functions do not work.   Use simp!-sign at several places to determine whether an expression is positive   Improvement for expressions of the form (a/b)^g(x) where a and b are numbers
  * Fix minor problem in specfn test file, brought forward by recent change to alg/spcfnint.red. Undo one change to alg/spcfnint.red.
  * Avoid warning messages during build of alg package.
  * Updated test logs for mtp3.
  * Compute temporary filename more carefully, because $USER might not exist.
  * Rewritten two procedures in package matrix to avoid some deep recursion cases.
  * New reference logs for regression tests after turning on rlsisocx by default.
  * rlsisocx was not compatible with bounded quantifiers.
  * Corrected typo ellpitice in sfellipi.red
  * Try to tidy up configure stuff. Reduce chances of a buffer overflow in print.c
  * Improvement of roots chapter of Reduce manual
  * Make ids infinity, negative and positive reserved in the core
  * Replace brain-damaged version of ps!:polygamma!-crule by a simpler more efficient version.
  * hunsparse.c is unfinsihed work in progress
  * Better control of parallel search in charmetrics/create-mode
  * Added new compilation and evaluation rules to allow series expansion of gamma function and friends. Minor updates to documentation and test files.
  * Avoid some of the recursion in c:extadd and c:extmult
  * Removed module and service opt for pasf. It was a stub.
  * Further improvement to metric hash-table setup
  * little script to help people fetch from subversion
  * Typo corrected
  * Minor corrections to manual
  * Document matrix-valued procedures, minor improvement to index
  * Improved printing when expansion point is on negative real axis. First attempt at Taylor expansion of gamma function: removing shift rules   for psi function during expansion allows computation of gamma's Taylor series   via differentiation.
  * Correct update to TPS section in manual
  * Added documentation for the new operator PSTAYLOR to the tps manual
  * Added a new user level operator PSTAYLOR to produce an extendible power series object using the classic Taylor series formula.  Useful for cases such as the Gamma function when ps!:unknown!-crule recurses infinitely.
  * The algorithm used in mateigen needs rounded off to work properly.
  * Finish incomplete changes of r3124: implicit and parametric 3d plots stopped working
  * A real fix of a bug in procedure vsub!-3!-2!-leq!-3p.
  * Fixed a bug in procedure vsub!-3!-2!-leq!-3p.
  * Using getpid() instead of random() in qepcad.red.
  * Taylor package: a couple of new examples: expansion of gamma function
  * Forgot to flag autoloaded psi!:error as opfn
  * Small tidying up jobs - eg recognise raspbian as an operating system variant
  * Better fix re need for VOLATILE near SETJMP
  * Get cygwin32 version going again but tagging many things volatilr nearsetjmp - this leaves a load of moans re losing the volatile qualifier when passing args, but I will fix those later
  * Add rules for values of psi(1) and psi(1/2). Raise an error for nonpositive integer argument of psi and polygamma
  * Forgotten update to taylor.rlg file
  * Update to regression log file forgotten earlier
  * Fixed a bug in cubic leq vsub procedures.
  * Fixed the vsub procedures bug (believed to be fixed already in r3250).
  * Simplified guard computation.
  * Fixed a bug in vsub procedures.
  * Distinguish cases according to lc sign in vsub procedures.
  * Unified signatures of procedures called from vsds_applyvsts!-at!-pr.
  * Use equivalences to reduce the number of procedures in module ofsfvslist.
  * Changed the order of entries in vsub!-fnalist!*.
  * debugged charmetrics tables for building up huge delimiters out of pieces
  * can now retrieve character size variants for eg parenleft
  * corrected fix re reading floating point values
  * yet more charmetrics stuff, plus what I hope is a fix re reading floating point values
  * Taylor package: corrected handling of singularities for dilog and Ei                 improved printing when expansion point is on negative real axis
  * Make sure that package sfgamma is autoloaded when polygamma_aux is called.
  * Fixed incorrect entries in rsl!-alist!-clustering!*.
  * one version of ofsfvslists.red, which compiles for both PSL and CSL
  * Further improved character metric management
  * Written procedure vsdb_expandNode3. It is called by default.
  * improvements to cuckoo.c and charmetrics.c
  * Switch rlsisocx is now on by default.
  * allow for name of latest OSX release
  * Simplified procedure vsds_expand!-at!-eps.
  * a few renamigs and reorganizations
  * charmetrics stuff in flux and no working - but well on way to a better state
  * Using guard to update temporary theory.
  * Treat the negative semi-definite case in sfto_psrem!-sgn.
  * Fixed a bug in procedure vsds_expand!-at!-inf.
  * Simplified vsds_expand!-at!-inf.
  * Fixed a bug in vsdt_gaussposl!-or.
  * Added condition formula to VSpr data structure.
  * Print guard in vsdb_2gmln!-printe.
  * Nicer implementation of cuckoo hashing
  * fix in case pthreads is not available
  * Cleaned up printing procedures + QE tree to gml format.
  * Integrated vs_block with the rest of Redlog code.
  * Equivalently remove negation in the result of vsub_vsub.
  * a naive VSdb printing procedure
  * Do not exit after Gauss failure.
  * Fixed errors in #if statements.
  * cslSTIXMath-Regular.afm now has more maths tables in non-standard form but available for use
  * bring wxdata up to date
  * Handling "failed" in vsde_compute.
  * Handling failed during Gauss, co-Gauss, and atomic APC computations.
  * Added clustering vsub procedures for degree 3.
  * Fixed a bug in vsds_applyvsts!-at.
  * Added more vsub procedures. Extended vsub!-fnalist!* for non-PSL variants.
  * Put better character names into .afm files
  * more vsub procedures
  * Compacted and reorganized vsub procedures.
  * Added some vsub procedures.
  * Using ofsf_iparse instead of ofsfform.
  * code reorganizations
  * More moves towards using adapted STIX fonts
  * reorganizations and renamings
  * continue trying to rationalise fonts for use with wxWidgets
  * Added ofsf_iparse construct.
  * Accumulated changes
  * Updated version of STIF fonts
  * Adjust fonts for wxWidgets case to make it easier for legacy fond rendering to get at the maths characters
  * Added some ofsfform procedures.
  * Handling infinities and infinitesimals.
  * Working on procedure vsds_applyvsts!-at.
  * correct but conservative kernel reordering in ofsfvsblock module
  * no old code is called from ofsfsvs modules
  * Renamed two VS data structures: VSsu -> VSvs and VSvs -> VSts.
  * a few minor TODO-related changes
  * Removed some obselete switches.
  * In poly/compopr.red: improved cmpxsplitfn for expt to handle complex base and exponents.  In alg/elem.red: improved simpfn for atan2 to handle complex arguments and two new substitution rules added involving atan to support simplification of square roots.
  * Introduced a new data structure VSds.
  * Fixed qepcad_wd!* to ofsf_wd!*.
  * Dump cadtree into /tmp by default.
  * Enhancements and fixes across the whole CRACK package.
  * Divided module ofsfvs into modules ofsfvsblock, ofsfvseset, and ofsfvssub.
  * a minor code reorganization
  * Written guard constructing procedures.
  * Using 'failed instead of 'fail.
  * ofsfform procedure definition
  * Call ofsf_definite only when it is necessary.
  * Simpfn for atan2 updated to allow numerical evaluation for complex arguments.
  * factorization in ofsfvs
  * Candidate solutions can be 'fail.
  * Divided Gauss and co-Gauss APC computation procedures.
  * Written a printing function for candidate solutions.
  * Correction to safe!-fp!-plus in PSL for case safe!-fp!-plus(a,-a)
  * Do not always replace sign(abs(expr)) by 0, as expr may later be simplified to 0.
  * conflation of test points
  * Updated comments.
  * Written procedure lto_subset.
  * Changes to cmpxsplitfns for asinh, acosh, asin and acos to improve the handling of purely real and imaginary arguments.  Addition of cmpxsplitfns for atanh, atan and the remaining inverse functions.
  * Improvements so simp!-atan2 and minor correction to simp!-sign1
  * - Changed the definition of candidate solutions. - vscs_at2csnz uses external ALists; Clustering is done here, if needed. - very simple bound selection - conversion from APCL to test point list
  * Procedure vscs_at2cs can now generate clustered VScs.
  * computation of annotated prime constituents
  * Complex split functions added for asin, acos, asinh and acosh.
  * include arith13.c
  * Changes to safe-fp-xxx but currently with switches to preserve old behaviour while treatment of -0.0 gets considered
  * Introduced a data structure for representing parametric roots.
  * Gauss and co-Gauss prime constituents computation
  * Removed VStr and added VSde.
  * Fix to \left| and \right| from Rainer
  * Corrections to the derivative rules for acsc, acsch and asech. The previous rules had sign errors in part of the complex domain. These rules (and that for asec) currently need precise_complex to be ON to be valid for complex arguments.
  * virtual substitution for degree shift and arbitrary
  * Defined virtual substitution data types.
  * Correct TeX syntax error in display of hypergeometric.
  * Corrected invhyper rules involving acosh and derivative rules for acosh and asech.  The old rules had sign errors for some regions of the (complex) domain
  * Correctly apply chain rule to differentiation of hypergeom. functions
  * Started the development of submodule ofsfvs.
  * Corrected a typo.
  * More improved rules for trigonometric and hyperbolic functions, with additional tests.
  * Support for xml printing with switch lrxml.
  * CSL and Jlisp now agree on printing dotted pairs, and cali test is more robust against lisp system variation there
  * better support for vec8 & vec16, and update dates in java files
  * Further work on Jlisp compatibility with CSL
  * Added value for acosh(0)
  * Implement, I hope, vec8 and vec16 for Jlisp
  * Refresh the pre-built generated-c files
  * CSL had its md5 function wrong for data with length 55 mod 64. Fix more CSL vs Jlisp compatibility issues - including that one
  * Correct some rules for trigonometric and hyperbolic functions (as proposed by Alan Barnes). Previously, the rules caused incorrect simplifications like
  * Replace rules for logarithms (in alg/elem.red) by explicit simp code (in alg/simplog.red)
  * Further improvements for repart/impart of log/log10
  * Further improvement in handling of repart/impart of log
  * Regression test for previous change
  * Removed erroneous rules for repart and impart of logarithms,  changed code for repart and impart of logs.  This improves simplification of, e.g., repart(log(5)) and repart(log(-5))  to return log(5) instead of log(25)/2
  * Updated manual to reflect recent change to gnuplot package:  allow to plot more than one surface
  * Define a cmpxsplitfn for arbint so that repart(arbint(i)) = arbint(i), impart(arbint(i) = 0
  * put in some ifdefs that I had omitted
  * Bring Jlisp further into step with CSL (and vice versa)
  * Gnuplot package: do not reset hidden3d option after plotting, as it triggers a bug in gnuplot
  * Make 32 and 64-bit profile reports more compatible
  * GnuPlot package: allow to plot more than one surface, e.g.,
  * merge Jlisp stuff as between home and work machines
  * Left over fixes to CSL
  * Suppress redefined message when loading zeilberg package
  * Correct lowercase/uppercase in assert log file
  * Better handling of substitutions of the type
  * Finally correct definition of fancy!-level in alg/general.red, r3013 was incomplete, caused
  * Broken version wrt fastgets & preserve, but worth checking in I hope
  * With luck catch/trow/unwind-protect now working in Jlisp. Some more functions still need implementing
  * Further correction re interpreted unwind-protect
  * Correction re interpreted unwind-protect
  * Some incomplete steps towards support for catch and thrown in Jlisp
  * Bring Jlisp closer to being able to profile the system
  * Fix for a serious problem with matching powers that introduce new denominators. E.g. u^2 := 1/w; w^2 := w; u*(u/w); did return 1/w^2 instead of 1/w.
  * Try to make testall.sh able to cope with multiple variants
  * work on test1.sh to allow testing of more lisp variants
  * fix where I define lesspcar and lesspcdr
  * Standardisation of branch cuts for inverse trig and hyperbolic functions in line with Kahan's recommendations.
  * remove a left over trace print statement
  * Mostly making md5 and md60 match CSL behaviour as exactly as I can
  * First step towards merging in ideas from project work by Josh Treon
  * Fixes to packages/foreign/nlopt
  * in 'make testall' run the alg test twice because Java (jlisp) has a slow startup
  * Re-work Bytecodes.java to reduce size of largest method in a way that may greatly help the Java JIT
  * Fixed a bug with floats in cl_xpandlet.
  * Limits package: use simp!-sign instead of evalgreaterp to determine the sign of a subexpression:   doesn't raise an error when the subexpression is not a number
  * fix to printing of -0.0
  * .rlg files for 2015-04-07-invfn tests corrected
  * trigd.tst and trigd.rlg added.  Other .tst and .rlg files deleted
  * Arrange that printing floats detects IEEE -0.0 case
  * First attempt at a simpfn for trigonometric functions, only for testing
  * PSL kernel for Linxu x64: Use atan2 function from csl sources, seems to return slightly better results Prepare for use of crlibm
  * Protect computation of implicit_taylor against error during substitution
  * Fix re scrolling maths display by large amounts
  * Reinstate pochhammer rule for pochhammer(integer,symbolic expression)
  * Improvements to simplification of sign operator caused incorrect results with modular arithmetic,  caused by assumption that sign(integer) is always one of +1,0,-1
  * Correction to specfn test log file, after recent fix to pochhammer rules
  * let expansion with reading SMTLIB2.
  * PSL for Windows 64:  print NaN and +/-inf correctly
  * Minor improvement to manual
  * A couple of minor corrections to the pochhammer rules
  * Correct rule condition for pochhammer siplification rule.
  * Defined the ExfrData data structure. It is not really used yet.
  * trigd added to packages.map
  * 3 test files and logs added for changes in crelem.red.
  * acoth flagged non-zero. Rule added for acoth(0).
  * More uniform treatment of inverse functions  -- radian-based version now called in all cases and the result converted to degrees
  * Improved behaviour of inverse trig. and hyperbolic functions on branch-cuts. Removal of code for degree-based functions  -- now in trigd package
  * Improvements to smt interface.
  * Added simplification function for atan2.
  * Removed name clashes with taylor from packages fide and orthovec.
  * Added some missing package docs to the manual
  *  refresh clash.log for name clashe function definitions between packages
  * I believe this leaves Reduce case-clean
  * casefold and caseclash now maybe in tidy state
  * Further improvements to caseclash and casefold
  * remove debug output in runpsl.sh script
  * improve caseclash.sh behaviour
  * Remove unnecessary sign rules for special constants
  * vsub supports root expressions represented as {a,b,c,d} now.
  * Better casefold utility
  * Improved simp!-sign to include a lot of the simplifications that were previously implemented as rules
  * Matrix and linalg: allow psopfn's for matrices make sure that all linalg operators are treated as matrix operators
  * Fix MixedCase and CAPITALCASE confusion in many files
  * Fixed rlg.
  * Allow free variables in array index on right side of rules
  * Various fixes to CSL, plus testall option to use bootstrap version of CSL
  * provide casefold utility
  * Fixed ofsf_smallp to correctly hande also Lisp prefix coming from the Reduce Simplex.
  * Improvements to rules for trigonometric and hyperbolic functions,  as proposed by Alan Barnes: Rule added for asec with negative argument Rules added for sec,csc,sech,csch Rules for trigonometric and hyperbolic functions generalized to work with ON RATIONAL Improved trigquot, recognizes more cases where tan and cot are appropriate Added differentiation rule for atan2 Corrected generalized periodicity rules for trigonometric functions
  * Corrected typo
  * reduce-dump-assertions and working on read.
  * Another few case clashes
  * smtsupp.red is now smt.red. Renamed token!-number to smts_token!-number.
  * Support for '%" prompt in smt().
  * Copyright comment.
  * Global declaration of statcounter.
  * Some fixes.
  * Added max!#().
  * Use '^' for printing polynomials.
  * More adjustment to character case
  * An ad-hoc pragmatic bound on coordinate sizes.
  * Procedure pi!/2!* should return pi/2 to at least system float precision, in accordance with the rest of the arith module - previously it would return a value rounded to current precision.
  * update rlfi test log file
  * Another pass of work on case sensitivity and stone-age use of upper case issues
  * typo corrected
  * correct ordopcar/ordopcadr confusion
  * fix re ordopcadr plus some low hanging fruit on case confusion
  * more name-clashes disposed of and now a script to spot character case clashes
  * Undo changes from revision 3001. These are in a separate branch now.
  * Better support for non-finite fp values in PSL
  * Resolved discrepancy in definition of revalnuminterval
  * Corrected error in gnuplot interface for PSL
  * Catch infinities and NaN in CSL-specific definition of function fl2bf
  * Change conditions of rules for atan and atanh to check for invalid arguments (i.e. singularities)
  * Do not show errors during attempt at numerical evaluation in simpcr.
  * increase a buffer size so that larger expressions can be displayed using the GUI
  * Duplicated function definition of cracot!\* removed
  * New module TRIGD added. Support for trig functions with degree arguments and their inverses.
  * Corrected cracothelp commit --- wrong principal value range
  * Small update to tmprint First step in bringing fmprint in line with tmprint
  * Minor corrections to manual, by Kostas Oikonomou
  * corrected missing semicolons
  * move list!-to!-vector to psl.red add functions to test for IEEE NaN, infinity, -infinity
  * More improvements to the Cuba and NLopt makefiles
  * Improved Makefile for foreign/packages/cuba.  Initial version of foreign/packages/nlopt.
  * Corrected take-realpart and take-impart. Added split function for log.
  * Removed erroneous ODD flag from acotd
  * updated clash.log
  * Use a version of fancy!-level in alg/general.red that works with fmprint and tmprint
  * Fix bugs for utf8
  * corrections to add2resultbuf re utf8 support and rlisp bootstrapping issues
  * dummy geometry.red to keep dependency mechanism happy
  * Graebe explains that geometry.red has been superceded by geoprover.red so remove it. Tidy up a few more clashes.
  * Graebe explans that geometry.red has been superceded by geoprover.red so remove it. Tidy up a few more clashes
  * PSL for Linux: correct printing of special floating point values NaN, inf, -inf
  * Tidy up first 10 of 300+ function name clashes. Still plenty to deal with...
  * Add missing parens in fancy printing, most notably of gaussian integers
  * small fix to clang/gcc hack
  * If gcc-mp-4.9 (say) is installed on OSX try to use it
  * Add regression test file for logical/arithmetic shift operations
  * Added support for infeasible core computation during quantifier elimination over the reals. To be used only via SMT for now.
  * Move some system dependent code to pslrend module
  * Reorganized projection order optimization code.
  * Update to manual to include recent changes to rlfi package
  * Update of rlfi package to modern LaTeX replace \ (backslash operator) by // (slash operator)
  * more rational decision re what ends up in a log file - I hope
  * TeX maths formatting code in SML and a Reduce program that parses that code
  * Improvement of PM pattern matcher documentation, by Kostas Oikonomou
  * Make ratnump work correctly when rational is on.
  * fixes/refinements re handling IEEE oddities
  * Bring treatment of 1.0e200*1.0e200 in CSL world into step with behaviour under PSL
  * Corrections and improvements to numerical evaluation of psi function
  * Fixes re first, second etc
  * Avoid error if sfpsi is loaded before rounded mode is initialized. Rewrite of numerical aproximation for digamma function, adding code  for complex-rounded arguments (not yet tested properly).
  * Make sure to remove the lose flag before defining system specific versions of internal functions or smacros.
  * Complex split functions added for tan, tanh etc.
  * Improved handling of abs(power-series)
  * a few reorganizations and renamings
  * prettyprint some more
  * Better interface to computation of euler_gamma constant in rounded mode,  better values for first few stieltjes constants,  minor improvements in code for computing numeric values of digamma
  * Restore prettyprint
  * variable renamings and test file adjustments
  * Corrected an assert statement.
  * a little bit faster aex_psremseq
  * scripts/clash.sh should now report name-clashes in the Reduce sources in a slighly more reliable way, and scripts/clash.log is a current report of such clashes
  * Add a function quotf!-fail that raises an error when the division of standard forms fails;  in rounded mode with roundall=on, try again without conversion from rational to rounded. Call quotf!-fail instead of quotf when division can be expected to succeed, i.e. when dividing by GCD.
  * Suppress test script error message when there is no log file
  * Test case for bug report https://sourceforge.net/p/reduce-algebra/bugs/56/
  * Added experimental switch rlelimsetoptmarek. If on, smaller elimination sets are computed during QE.
  * Windows 64 PSL: do not try to handle traps that do not exists                 set rounding to nearest (instead of truncate)
  * Fixes to lshift for bignums
  * Typo in sfpsi.red: missing parens
  * Looks as if something changed rw cygwin <uname> command so I need to check for just WOW not WOW64
  * Small updates to reduce menus. Gnuplot now has a pm3d option to surface-colour 3d plots in you have a new enough gnuplot
  * Always call domain specific abs function for a domain element
  * Forgot to commit mrvlimit test output
  * fluid declarations for switches trplot and plotkeep
  * Changes in assert output due to r2891
  * A couple of improvements to mrv_limit.
  * Get the very last menu item recognised in CSL/Reduce new menus
  * A duplicate switch statement should do nothing, especially not set the value
  * (a) fix for gnuplot under cygwin/X11, (b) new snapshot of wxWidgets to try, (c) first version of some menus to drive algebraic operations for CSL/Reduce, (d) do not crossbuild wxWidgets version from cygwin32 to cygwin64
  * A second attempt to let gnuplot avoid pre-judging terminal type options
  * Minimal correction to mrvlimit to return for limits of quotients instead of given a nonsense error.
  * New switch force_gnuplot_term
  * Updated README and cuba.tex.  Other minor changes.
  * Move documentation of changevar operator from user to main part of manual.
  * changevar package: use local rules with where
  * Improvements to repart/impart, abs and sign rules.
  * Patch to Makefile in foreign/cuba to support BSD better
  * Update to notes on building Reduce
  * New support for TPS
  * Added support for TPS & Taylor
  * Added switch PSPRINTORDER.  Corrected spelling of NOTREALVALUED
  * Added switch PSPRINTORDER
  * Fixes following some testing using FreeBSD 10.1
  * Fixes to scripts/runpsl.sh to work under cygwin64
  * Updates following testing on Widnows 10 and using the cygwin64 build environment
  * Fix for UTF-8 encoded stuff in jlisp
  * fix up the use of here.sh in rd
  * Second try at getting scripts to cope with symolic links etc more neatly
  * A couple more cases where redefinitions in contributed packages are no longer necessary.
  * Package cantens: replace permp!: by permp which is now part of the Reduce core.
  * Add documentation of CANTENS package to manual.
  * Start at recovery to survive symlinks to executable scripts
  * Add extra df check to regression test
  * Remove obsolete patches to Reduce core from crack package (fixes2.red)
  * make a bit more wxWidgets stuff at least compile again
  * cuba tried to build its dynamic library on first use
  * Remove unwanted logging etc
  * Fix scripts/here.sh
  * restore here0.sh
  * fix a typo
  * __STDC_CONSTANT_MACROS defined in some places it is needed
  * check-in cubs package for linking to Cuba-4.1 numerical multidemensional intergation package
  * better shell code to detect directory a script is in and tidy up of some unwanted old duplicate scripts
  * better shell code to detect directory a script is in and tidy up of some unwanted old duplicate scripts
  * support for a --cygwin option in csl
  * explodec vs explode2
  * Allow select operator to return an empty list, add regression test file.
  * Add missing rtypefn definition for select.
  * character metrics computed more cleverly to be somewhat more compact and father faster to access
  * listvecops: Add functions for changing list elements in place.
  * Improvements to the gnuplot documentation, by Kostas Oikonomou
  * Make abs operator map over matrices
  * Introduce ligatures
  * dynamically pick offsets for character baselines
  * More care about per-platform positioning of characters
  * Compile new version of nbig32a, remove extra closing paren in btimes32.sl
  * fixed lshift for bignums
  * fixed ashift to handle all types of numbers
  * Better handling of fonts for wxshowmath
  * fixed again lshift for AMD64 PSL
  * fixed lshift for AMD64 PSL
  * typo
  * add code that maps from letters to various mathematical variants
  * Now mathtex generates output files that wxshowmath can read
  * Remove duplicate symbol name "land"
  * start at measuring text using metric tables
  * support names LOR and LNOT as well as LOGOR and LOGNOT for better PSL compatibility
  * Continue rationalising wxWidgets code to use STIX fonts - remove some old fonts no longer needed
  * Add wxshowmath as a starter towards maths display using the STIX fonts
  * Use land instead of logand, for PSL
  * add file uninames.red
  * Reduce-accessible metrics
  * STIX character metric info generated for use by C or Reduce code
  * Fix a bug with the CSL 32-bit-integer vectors
  * listvecops: To cope with aggregate functions the rtypefn for difference is changed to getrtypeor.
  * Regression test for recent improvement in simplification (r2891)
  * Add auto loading of the code for defining matrix procedures.
  * Ensure full simplification of expressions like q1 := 1/(x+3); q2 := (x**2+5*x+6)/(x**2+6*x+9); q1+q2; when the switch gcd is off (which is the default).
  * More corrections to avector
  * set svn:keywords Id on a few files
  * set svn:keywords Id on a few files
  * Extract some STIX metrics. kern/ligature issues incomplete as yet
  * zeilberg package: suppress warning message during load, remove rules for gamma and pochhammer that are part of the core
  * Correction to correction to rcons in avector
  * Repair redefinition of rcons to match rlisp/list.red
  * Remove redefinition of ^ token from avector package, as it is neither used nor documented.
  * Now use fontforge to extract metrics from wxfonts
  * Futher update of font folder for wxWidgets activity
  * Futher update of font folder for wxWidgets activity
  * Add some metrics for STIX fonts
  * Try STIX fonts rather than Latin Modern ones... for the wxWidgets code
  * Define stat property of mat operator for autoloading, so that it is parsed correctly.
  * Some old code for a 2-D representation of Reduce output
  * make rebuild-package easier to us in a development build
  * Commit changes for linux snapshot
  * Makefiles for Windows and Linux packages:   Make source directory and revision variables so that they can be overridden on the command line
  * Get access to help files even when using windows fat binaries
  * put treatment of lambda back because previous attempt broke too much
  * Adjust treatment of LAMBDA in algebraic mode
  * Adding readme, license and resolving a name clash (see the readme file)
  * Correction to primer, by Alan Barnes
  * Replace copy of primer.tex by link
  * Update to tps package by Alan Barnes
  * Include improvements to linalg documentation by Kostas Oikonomou
  * Use lower bounds of isolation intervals for verifying the side condition with real algebraic number solutions (on rlitropilp).
  * Checked in extension bei RS for reading from pipes with in().
  * First functional version of tropical root finding with side conditions.
  * Get lalr back so that CSL and PSL logs agree
  * lalr now copes with precedence. Needs a bit of work to tidy up the logs
  * This is a stable state before moving ofsf_zerop3 inside ofsf_posdir1.
  * Working on the tropical roots.
  * Reorganizing the tropical code for the next big step.
  * lalr parser generator now has semantic actions and is almost usable
  * Create clean copy of source tree for Linux package build
  * Support for reading from pipes - Thank you Rainer.
  * use getc_unlocked or _getc_nolock to speed uf IO and assume I will remain single threaded
  * saveimage.sh must be updated together with reduce.img.sh
  * Blocked heap size changes for PSL 2-heap
  * added ulimit for stack in runpsl.sh
  * Second test grammar works provided all clauses have different semantic actions
  * update xmpl logs
  * Find a temp directory in windows if via cygwin shell
  * very simple grammars now parse using either CSL or PSL
  * make list2widestring more generaous about what it supports in the list
  * Another unsatisfactory solution to the old exponent problem.
  * Had to rename iv_ to riv_ because iv_ is used by anuex.
  * Use regular float precision for ranum printing. More careful autoloading for ranum.
  * Avoid definition of ttab causing spurious difference report
  * Working on tropical decisions. The ofsf test does not fail anymore.
  * Support for linking W64 PSL against crlibm; rebuild bpsl binary with crlibm
  * Fixed bugs introduced with the new printing.
  * Bugfix: I print all strings w/o any processing now.
  * torture test for lisp-level sin/cos/tan
  * Pending changes to PSL kernel for macintel (unsigned character issue)
  * Correction to handling of high bit characters, change floating point rounding to neasrest on freebsd (32bit)
  * Improve jlisp compatibility with CSL
  * PSL for Windows32: fixes for 8bit characters
  * Psl WIndows64: fixes for 8bit characters
  * Get U01.java to U60.java integrated into system
  * Both float and ranum version for ofsftrop are working now.
  * symbolfilename\* returned psl/bpsl so need to go two up to get directory
  * some PSL fixed for utf-8, for AMD64_ext only, more later
  * A simpler interface to zeroapprox, which uses the global precision and returns rounded numbers. The result are nice now, the code not yet.
  * Fixed a bug in utf8_indexplit: prin2!* receives floats as strings, which had to be taken care of.
  * Patched redmsg() and got rid of rl_redmsg.
  * Removed switch zeropzero in favor of a function zeropapprox. work in progress ...
  * Added (quit).
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2820 2bfe0521-f11c-4a00-b80e-6202646ff360
  * PSL for 32bit Linux floating point:  use round-to-nearest instead of round-to-zero
  * Latest PDF version of the manual
  * Further work to make jlisp work - almost OK now I think
  * Correction to Jlisp re overflow in ashift
  * PSL cleanup: shell script for bare-psl and pslcomp
  * Rename internal variables of arith package to start with !!
  * Fix a typo that led to misbehaviour on compiled getv calls
  * Make sure that fasl files can be loaded from current directory when compiling PSL support module pslcompat during bootstrap.
  * linelength correction for 64 bit windows PSL
  * Minor PSL correction: make linelength complain when argument is nonpositive (was: negative)
  * PSL: minor cleanup
  * Get things so that jlisp will run again
  * make Jlisp support utf8 for list2string, string2list
  * Change internal representation of EOF in a way that will make it easier for Windows and Java using utf16 to cope
  * Slight cleanup on lalr: not yet fully there
  * Slight cleanup on lalr: not yet fully there
  * Recompile debug module for freeBSD (*comp now fluid)
  * PSL freeBSD: Add correction for symnam array (see also rev. 2722 for linux)
  * win64 PSL: recompile debug module
  * freeBSD PSL kernel:   Correct id hash function to work for strings with chars > 127
  * win32 PSL: recompile debug module since *comp is now fluid
  * A few more places where !*comp or !*raise was declared global instead of fluid
  * PSL: correction to compiler optimization for liter function.
  * Correct hash-function for 8bit chars for AMD_ext/brock
  * Force creation of PSL reduce.img if it doesn't exist
  * Correct typo (that showed up only in gentran test output)
  * More cleanup of global/fluid declarations. Make !*comp fluid instead of global
  * Correct declaration of charassoc: fluid --> global
  * This leaves CSL on Windows in step with the log files
  * Corrections to reduce.iss file
  * Inno Setup configuration: better separation of components
  * Change variable type of !*raise from global to fluid
  * Correct some missing/incorrect global/fluid declarations.
  * Further corrections...
  * Minor improvements to manual index
  * Correction to previous checkin
  * Improvements to manual: index
  * Start to review uses of COMPRESS - many of which could fail in cases where doublequotes arose in strings etc
  * Minor corrections to the manual, new credits on titlepages.
  * freeBSD64 PSL: Explicit size in move instruction to make supplied assembler happy
  * freeBSD64 PSL kernel:   Correct id hash function to work for strings with chars > 127
  * Correct a couple of errors in autoload definitions + minor cleanup
  * A bit more tracing for the groebner<->solve interface
  * residue package changed the parsing for load_package, now corrected
  * avoid unrepeatability that the hash table use led to
  * --install file for testall installe dinto xmpl too
  * Remove outdated things from xmpl directory
  * More brough to to date
  * A fresh set of log files all built on the same machine
  * Try to fix an issue with #if and #else
  * Avoid buffer overflow when reading overlong lines from stdin
  * get the variable *fancy set when fmp-switch is called
  * temporary workaround
  * Copy missing .png files into manual directory.
  * Add tex4ht configuration file
  * PSL: Set temp directory for gnuplot at runtime, not image creation time.
  * remove executable status from some .c files
  * gnuplot uses CSL tmpdir() sometimes. Mild winbuild Makefile update
  * Provide CSL with a (tmpdir) function to get a sensible directory for temp files
  * doc/misc: do not run makeindex without .idx file
  * keep logs of what making the windows installer does
  * shorten path-names to place where PSL gets built
  * CSL version checks for cygwin DLLs when necessary
  * Merge changes to reduce.img.sh into saveimage.sh
  * Installer had now worked at least once on a 64-bit machine
  * Minor clarification in manual: factor declaration
  * Move documentation files for reduce-addons from reduce-doc to reduce-addons package.
  * Move a load of rubi files from packages to contril to reduce clutter
  * Yet more progress on windows installer
  * Put copy of gnuplot where it can go into installer files
  * Winbuild: Correct 8bit characters in localized strings
  * Work on windown installer
  * Correct typo found by Mark Brethen
  * make winbuild CSL stuff more robust
  * make detection of 64-bit cygwin more robust
  * Avoid inline-defs.dat getting into dependencies files when not wanted
  * better list of cygwin packages that need installation to build Reduce
  * Try to keep generated C files identical on every run even for (function lambda...)
  * Correction to PSL build process: make sure that "red" subdir exists
  * nother correction for the manual
  * More corrections to the manual
  * fix typo: get_lisp_directory vs get-lisp-directory
  * Minor corrections to manual, better index generation
  * Removed .djvu version of the CDIFF documentation
  * Updated CDIFF manual and updated cdiffx.red to get rid of potentially dangerous shortcuts
  * Updating CDIFF section in the manual
  * Current version of manual
  * debian rules file:   make sure that x-bits are set properly   add missing png files for HTML version of manual   add dh_lintian to process (not yet existing) override files
  * Improve gnuplot identification under cygwin
  * Minor correction
  * Try to make redlog/mma and redlog/qepcad find their scripts in more portable location, and note that the code there is pretty system-specific
  * put resources in the distribution
  * Stage 1: arrange to copy .awk files to where Reduce is built
  * rename files to avoid square brackers in file name to make creation of .rpm installer packages easier
  * Workarounds for problems with tex4ht converter
  * Better handling of gnuplot if you are running a cygwin CSL version of Reduce - not perfect but better than it was
  * Manual: minor improvments
  * linux(32bit) PSL kernel   Correct id hash function for high bit characters
  * Typo
  * win64 PSL kernel   Correct id hash function for high bit characters
  * %% define .. operator so that you don't get an error when used before autoloaded
  * AMD64 PSL kernel:   Correct id hash function to work for strings with chars > 127
  * AMD64_ext PSL kernel:   Correct id hash function to work for strings with chars > 127
  * Improvements to the manual: index
  * macintel64 trap handling: do not run Lisp trap handler for SIGPIPE in C code  (SIGPIPE can happen in pclose)
  * macintel64 PSL kernel:   Correct id hash function to work for strings with chars > 127   Correct implementation of lambda link code pointer
  * Correct pipe implementation on macintel64
  * Updates for bibliographies
  * more updates for inclusion of contribute package docs
  * get 32 vs 64 bit paths better under control
  * More docs for contributed packages
  * Add a primers directory with copies of primer and SL report plus new Inside Reduce doc - all in both tex and pdf form for convenience of readers
  * Add documentation of more user contributed packages to the Reduce manual.
  * Correct id hash function to work correctly for strings with chars > 127
  * remibder that this needs further work
  * Corrections to symget on win32 PSL: forgot to dump/load symget vector
  * Add missing symget array to win32 PSL kernel
  * PSL: defining a global variable tempdir!* in the REDUCE core  started cleanup of gnuplot interface code
  * assist: Take care of special case of '1' in mkrandtabl.
  * Correct error in W64 PSL lisp code for querying the registry
  * Try to make winbuild CSL building  more robust
  * Recongnize bex(..., ..., false) and ball(..., ..., true) in cl_simpl as suggested by D. Monniaux.
  * cygwin symlinks stuff
  * Further work on making single Windows binaries
  * ACN contributions to the winbuild directory that should not hurt existing code there
  * Small wxWidgets update to get Windows build OK again. Clean up autogen.sh
  * Support for querying the registry in Win32 PSL
  * Fix a CSL bug relating to MAX_PROMPT_LENGT, and add more debugging stuff. Move to a newer wxWidgets snapshot. Do not allow change of size of CSL fastget arrays
  * Changes to support installed gnuplot on Windows
  * Use Mavericks as lowest OSX to be supported
  * avoid reconfiguring crlibm
  * various mostly minor updates
  * Correction for windows calls to get-registry-value
  * Add function find!-gnuplot to PSL support code
  * Corrections and additions to PSL for 64-bit Windows.
  * Some updates to jlisp
  * fixed version problem in AMD64_ext
  * more PSL versions
  * more PSL versions
  * more PSL versions
  * more PSL versions
  * more PSL versions
  * more PSL versions
  * more PSL versions
  * Change build process for PSL Reduce to always copy files from subversion  repository instead of contacting the ZIB server.
  * missing PSL symget .b files
  * missing PSL symget .b files
  * missing PSL symget .b files
  * Remove SDK options from configue scripts. Also remove m32/m64 options
  * More trace messages re which SDK being used on OS X
  * Update version of OSX SDK used by default
  * fixed some symget.sl in dist/util, .b will follow
  * update svn url in Mac portfile
  * Minor correction to PSL kernel build
  * PSL for macintel64: correct trap.sl (forgot to pop stack frame)  minor correction to build of PSL kernel
  * freeBSD: Modify symget.sl to use the symget table in the kernel instead of allocating in bps.
  * bpsl for macintel64:   relocate heap if necessary   avoid compiler warnings
  * Better CTRL-C handling on macintel64: do not call lisp error handler when in C-code
  * Modify symget.sl to use the symget table in the kernel instead of allocating in bps. (Old version didn't work when heap was relocated.)
  * Replace calls to sbrk by Windows heap functions HeapAlloc HeapRealloc
  * Allow for matrix-valued procedures.
  * Change name of directory where PSL build has been put to reflect current reality
  * lisvecops: Update of listvecops.rlg
  * listvecops: enable testfile, add an infix operator for accesing list elements.
  * Win64 PSL kernel: clean up code for debugging output Setting the env. var BPSL_DEBUG will cause debug output to be written to STDERR.
  * Renamed smtsupp to smt and did a lot of work on this including my own reader.
  * Next attempt to get it working on Windows 8 , extra debugging output in memory allocation
  * PSL for Win64: cleanup  Modify code to relocate heap  Save %rbp and restroe for C function calls, so that unwinding the stack works in longjmp
  * Random seed for parallel qepcad runs.
  * Added rlrndseed and datestamp.
  * Added regressions for rlqepcad.
  * Preserve value of erfg!* during numeric evaluation in plot package. Fix a segfault caused by calling prepsq on a prefix form in plot package.
  * Correct typo, discovered by Kostas Oikonomou.
  * listvecops: Allow for list valued procedures.
  * part: revalpart needs to evaluate its argument when it is a listfn.
  * fixed a typo in sys-support.sl in macintel64
  * fixed a PSL compiler problem in bpsl generation
  * guard some trace output with ifdef DEBUG
  * check in top level depcomp
  * qreduce was completely broken. This is work in progress.
  * PSL for win32: make readch convert upper to lowercase when *raise is set
  * Make survival on 32-bit windows better if 64-bit version has been cross built there even though it is not executable
  * Update for new package names as of August 2014
  * Make reautogening less agressive for csl-sanity-check.sh
  * Call procedure idomainp instead of directly checking the property list of "i". Change simpatom to convert a naked float argument according to the current domain mode.
  * A couple of minor updates to the test files and logs.
  * listvecops: Adding an initial test file.
  * listvecops: Add element wise differentiation and integration of lists.
  * Bug fix for
  * make orderp available early enough for rlisp/switch.red to use
  * Necessary changes to solve test output after recent bug fixes.
  * introduce switchstring variable
  * Update getrtype: Enable type inference for array elements.
  * getrtype: Enable type inference for array elements.
  * Moving back to the version right after fixing the SIGCHLD issue. Changes introduced a lot of bugs.
  * listvecops: Allow for nested lists.
  * Move to deal with multi-line history items
  * Add test case for limits problem in bug report
  * Correct handling of unused and free variables in algebraic solver:  Previously, they didn't appear in the solution.
  * loadable-packages and switches variables now up to date
  * Add copious debugging output for interface between solve and groebner.
  * listvecops: Associate a simpfn to ldot rather than a listfn.
  * Algebraic solver: protect against error during back substitution, e.g. x=0 in log(x)
  * New regression test file for bugs in the algebraic solver.
  * log(0) didn't raise an error
  * listvecops: Allow for a list raised to a list and a scalar raised to a list. Change name for dot product to ldot or *. .
  * typo
  * Extending listvecops with division of two lists, elementwise exponentiation and a dot product.
  * Add listvecops to package.map.
  * Provide basic vector operations on list.
  * More comprehensive TAB completion.
  * Switched to new version of editline. Minor fixes around prompts. Prompt coloring still does not work.
  * Check for EOF in read_until_prompt. This at least works around a problem in Darwin, where SIGCHLD was not received in a busy waiting siuation.
  * Do less potentially dangerous things after fork. Removed legacy code in redsig.c.
  * Removed support for Darwin universal builds. Added goal redfront-debug.
  * Removed 2009 version. Added but not using yet 2014 version.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2603 2bfe0521-f11c-4a00-b80e-6202646ff360
  * ensure second argument of \frac always has {}
  * taylor package: define default value of switches in switch statement
  * changevr version of diffp removed; functionality already merged into core
  * Update test log files.
  * Set longer linelength in 2014-06-23-prefix-operator-precendence regression test file so that differences in lisp prettyprinter margins do not show up.
  * update foreign.c and foreign.lsp to illustrate get-callback
  * provide get-callback. See proc.h and call-foreign-function for potential use
  * The concept of tagging projection polynomials with ids is now realized properly.
  * Take care of OpenSuse oddities: ncurses, lib64/.
  * Corrected the main ofsf log file.
  * Merge changes of diffp from odesolve package into the core.
  * One more update because of change to specfn
  * A number of useful references for numerical computation of special functions
  * Corrected typo in lalr package
  * another test file update because of changes in specfn
  * Remove inconsistency in solve output: use roots_of
  * Replace call to diff1sq by subtrsq (which is the same)
  * Add test case from fide test file to parser regression test.
  * Correct double plus sign in fide test file. Error triggered by recent change in parser.
  * Update of test log files, because of changes in specfn package.
  * Wrong regression test log file in last checkin
  * Fix for problem in bug report about precedence of unary minus:
  * Use list2string instead of list!-to!-string as the latter synonym is defined in CSL only.
  * Adding a regression test file for the bug report about precedence of unary minus:
  * Remove .tex files that have been included into other files.
  * Corrected redlog regression files.
  * Fixed a bug in aex_tgpairwiseprime1. Added a few comments on caddata.
  * Fixed cl_rename!-vars: Variables are renamed properly during PNF construction.
  * Restore availability of the BaKoMa-based fonts
  * further attempt re thread support on the mac
  * Try use of sem_open not sem_init
  * ofsfcadproj: Deleted more redundant procedures.
  * ofsfcadproj: Rewritten and reorganized almost all projection-related procedures.
  * ofsfcadproj: Deleted a few redundant procedures. Optimized ofsf_projcored1.
  * more on PSL fcomp for Linux 32 bit
  * more on PSL fcomp for Linux 32 bit
  * fixed plot for 386 **very** hard to explain
  * Remove obsolete documentation that was used for the old Windows help system
  * ofsfcadproj: Fixed a bug in ofsf_projmccoeffs. Improved verbose output.
  * Output variables in the correct order in procedure qepcad_qepcad1.
  * Set environment variable  in runpsl.sh so that package-remake works with PSL.
  * bugfix: ofsf_projopcohogen and ofsf_projopcoho are now called with correct args
  * small adjustments - nothing too important
  * in AMD64_ext the trampoline concept (by Herbert Melenk) was missing
  * ofsfcadproj: Renamed and simplified a few procedures computing projection sets.
  * - Removed redundant arguments of a few ofsfcadproj procedures. - Removed unused switches rlcadaproj and rlcadaprojalways. - Removed unused jj field from caddata. - Caddata fields aa and aaplus are now used properly.
  * module ofsfcadproj: more asserts and further reorganizations
  * Cleaning up the ofsfcadproj module.
  * ofsfcadproj: added more assertions; deleted some redundant procedures
  * Added some asserts into module ofsfcadproj.
  * texmacs plugin needs redfront_mode turned on.
  * Make the texmacs plugin work without any special entry in .reducerc .
  * Merge change from reduce.img.sh into saveimage.sh
  * tmprint autoload for redpsl --texmacs
  * various small CSL improvements
  * restore ashift as being flagged as LOSE
  * correction to some bad used of FIND
  * Add a TeXmacs plugin that works with CSL and PSL.
  * put CONST in a few more places for CSL
  * ofsf_pbfvs: Children are discarded when rlcadtrimtree is on.
  * ofsfcad module: simplifications and comments in Atree print code and SSFC code
  * some more arm v6
  * Next round in resolving different definitions of diffp
  * #if/#else/#endif do not need exclamation marks any more except perhaps in some bootstrap contexts
  * Put an INTERN in tok.red where it was needed, and start to look harder at where there are duplicated function definitions
  * One more typ0, pdf rebuilt
  * Remove temp files from subversion
  * Correct typo
  * specfn2 package:  more comprehensive test file  remove duplicate smacro definitions  add code for differentiation of hypergeometric functions  clarify documentation
  * ofsfcad module: further simplifications and rewrites, redundant switches removed
  * First go at a test file for the specfn2 package (hypergeometric and MeijerG)
  * Remove load_package solve from test
  * Yet further places where I make things iterative rather than recursive
  * more conversion of recursion to iteration to save stack
  * improve crlibm autoreconf stuff
  * Ignore some variable crack messages when comparing logs
  * correction to a typo in csl
  * more CSL debugging aids and safety measures
  * Rebuild PSL kernel for 64bit FreeBSD:  - align stack frames on multiples of 64 bytes (necessary for SSE instructions, I believe)  - cleanup C code  - correct a couple of minor problems
  * Align stack frames on 64bit FreeBSD to multiples of 64 - necessary for FreeBSD 10.
  * Correct kernel build for 32 bit linux
  * some placeholders fgor armv6 files
  * remove a debug print line that I hope I do not need any more
  * Reduce stack use in a bunch of cases, and upgrade stack investigation code in CSL
  * Removed redundant switch rlcadtv. Added procedure ofsf_pbfvs.
  * ofsfcad: deleted redundant switches, more precise verbose output
  * Simplified rlcadnum and related procedures.
  * Renamed and reorganized atree procedures. Fixed a bug in acell_tvasstring.
  * Fixed a bug in ofsf_nextcell.
  * Update of system type mapping for FreeBSD 10. Better error message when system type is unknown
  * copy linux 32bit binaries from psl directories, not via xport/download mechanism
  * allow tmprint to cope with some native greek letters
  * linux32 kernel: Clear 0x08000000 bit in symnam pointers that point to text segment
  * Some attempt at input for utf-8 files, plus compress on wide chars
  * more comments, simplifications, and rewritten procedures in ofsfcad
  * Documenting the new mathematical operators defined in the Reduce core
  * Correct rule for integers powers of root_of(p,x,tg) when p is a polynomial in x Reset !*mcd during rule definition so that solve can be loaded when mcd is off.
  * ofsfexfr: Renamed aex_freeidl to aex_fvarl.
  * ofsfcad entry point procedures: simpler control flow, enhanced verbose output
  * fixed a problem in PSL backtrace for AMD64_ext
  * Changes to laplace: gamma is now known to the code  load solve before running test file to circumvent problems with algebraic mode code
  * more comments and reorganizations in ofsfcad
  * Yet more progress on CSL support for utf-8 encoded strings and symbols
  * Correction of defint regression test file
  * Do not use predefined operator beta in dfpart test file.
  * deal with a few more name clashes
  * -Removed redundant information from CadData. -more detailed CadData verbose printing
  * Added more assertions and deleted redundant procedures from ofsfcad module.
  * Correct application of local rules and log file for fps package  Note missing rule for dilog
  * Some ofsfcad procedures are now asserted.
  * Moved basic struct declarations from ofsfanuex to ofsf.
  * Fixed a bug in rl_simp1, where true and (x => 1) caused an infinite recursion.
  * More steps along CSL path towards utf-8 support
  * Fixes to name-clash stuff in cali and new logs where they have changed
  * More name clashes: remove special handling for operator gamma in physop module  (only used in test file anyway)
  * Tidy up by removing some name clashes, eg bc_prod and friends. Re-profile for CSL
  * some bits for armv6
  * some bits for armv6
  * some bits for armv6
  * test environ
  * fixed a hack in pslextras.c iun dist/kernel/AMD64
  * some bits for the arm v6 kernel (PSL)
  * error in linux garbage collector (seen in Ubuntu only
  * error in linux garbage collector
  * fix a glitch in previous update to autoreconf stuff
  * Hope to fix use of CSL version under emacs and improve re-autoconf behaviour
  * starting point for arm  PSL
  * Proper interface for computation of Catalan's constant: use standard arith hooks
  * Minor corrections and improvements to specfn package Use arith interface for euler_gamma computation Add constants to specfn test file
  * Improve fancy printing for a couple of functions from the specfn package:   Gamma, euler_gamma, polylog, ChebyshevU, ChebyshevT
  * Fixed a bug in aex_bind.
  * Remove redefinition of function subst for PSL (now in support/pslrend.red)
  * Set !*rounded to t when rounded mode switched on, to be on the safe side.
  * Added comments to vsl_analyze.
  * More special functions:   erfc and erfi moved to alg/elem.red   polylog, Lerch_phi and assorted rules now known to core   Rules for formal power series of dilog and polylog moved to fps package   Taking advantage of local rules (with when) in fps package   Added test cases for polylog and Lerch_phi to specfn test file.
  * FPS package:  Slight improvement of trace printing  Allow rules for FPS operator to be specified  Correct detection of logarithmic singularity
  * Move more special functions into the core:  igamma, psi, polygamma, ibeta, zeta Add tests for incomplete gamma and beta functions
  * Added verbose output: computation time of the standard answer computation.
  * All variables from the outermost block appear in the answer computed by rlqea. An "arbitrary" tag here means that any real number can be substituted for a variable. This fixes a bug in ofsf_qemkstdans.
  * some typos detected by testing on 32-bit XP
  * get rid of a couple of trace print statements
  * changes to support fat binary stuff
  * fat binary creation possibly now working
  * Specfn package: hide some internal procedures by giving them names with non-alphanumeric characters                 first go at avoiding algebraic mode code in autoloaded files
  * Further work on fat-target windown build
  * Move definitions of mathematical function and constants from specfn to core:   gamma,beta,euler,bernoulli,pochhammer   CATALAN, EULER_GAMMA, GOLDEN_RATIO, Khinchin (numeric computations still done in specfn module)
  * almost enough for today by way of getting this close to work
  * almost enough for today by way of getting this close to work
  * Start at a windows speciality build scheme
  * The new incremental root isolation submodule is now called from the CAD code.
  * Fixed a bug in ra_minusp.
  * Added documentation for the specfn2 package to the manual.
  * Specfn package: hide some internal procedures by giving them names with non-alphanumeric characters  Slight improvement of specfn documentation
  * Fewer troubles with end of file in new token reader - I hope
  * A new incremental root isolation submodule. The submodule is not yet used by the ofsfcad module.
  * Added test for ranum.
  * Added isolatingivl.
  * Switch rahidepoly. Bug fix in ra_onep0.
  * Some simplification and checking of AM input.
  * Lots of fixed. Hope the have the AM interfact somewhat cleaner.
  * AM interface dprpart. Bug fix in sfto_floorq.
  * fixing bpsl for macintel64
  * Replace errorset by errorset!* in taylor module
  * Fixes and a better wrapper.
  * Correct win64 pathname
  * Compatibility update for 64 bit Windows version
  * Consistently name the build directory for 64bit versions under cygwin:   x68_64-w64-windows --> x68_64-pc-windows
  * Fixed a bug in ranum module: sfto substitution is used.
  * Lots of fixes. Systematic wrapping via a macro now.
  * Added ranum.
  * max, min, and avg for SQ. Some fixes, in particular sfto_fsub was calling sfto_qsub1.
  * Essentially everything there now.
  * further reorganizations of the ofsfanuex module: RIP submodule is clearly divided from the rest of the module now.
  * Work on support for utf-8 stuff
  * Use irootn for root computation in sfto_lmq. sfto_lmq returns an SQ instead of an Integer now.
  * Implemented Local-Max Quadratic Bound, an algorithm due to Akritas, which computes an upper bound on positive roots of a polynomial with integer coefficients.
  * Try to make PSL reautoconf things more reliably
  * Temporary solution for redpsl.bar script, until directory naming is sorted out.
  * correct pslver.sh script for cygwin64
  * Correct broken type-conver.b fasl file for win32
  * a small optimization in aex_inv and a few reorganizations in ofsfanuex
  * Added experimental ranum module for real algebraic numbers.
  * Experimental modification to pslver.sh to detect cygwin64
  * Optimization for functions:   boundp (alg/simp.red)   subst  (PSL nonkernel)
  * get rid of clash with PSL built-in function list2string
  * Done a few further reorganizations in the ofsfanuex module.
  * Written a more efficient version of aex_psrem.
  * More fixes relating to '#' characters
  * Fix relating to # immediately followed by ;
  * Correction so that previous code works with PSL too
  * Can now use #if rather than needing !#if, and other experimental # syntax
  * Rewritten procedure aex_psquotrem.
  * Yet more Makefile.am updates
  * Further fix to Mqakefile.am
  * Automatic variable renaming in aex_bind: bindings to variables can be done in an arbitrary order, regardless of ordop.
  * Worked around a problem with exploding and compressing negative integers.
  * Put more dependencies on crlibm.h
  * updated CHANGED file so FOX will get rebuilt for people
  * ignore SIGTTOU signal so that background processes do not hang
  * enhanced trace capability for bootstrapreduce
  * Context in an aex binds only variables really present in the aex.
  * Aex contexts are sorted with respect to ordop.
  * Removed ratpoly_ and a few other redundant functions from the ofsfanuex module.
  * added to sfto module: substition using Horner's scheme
  * Added sfto_qsub and sfto_fsub in an attempt to unify and centralize lots of substitution procedures.
  * Deleted redundant ratpoly functions from ofsfanuex module.
  * Added a few functions working on SQ to sfto module.
  * ratpoly_ functions are called exclusively from the ofsfanuex module.
  * Removed lcnttag and reducedtag tags from aex. Fixed an assertion in aex_reduce.
  * Further attempts to refine to 'autogen.sh' automation stuff
  * Re-implement traceset. It should now report assigmnets to fluids/globals in bytecoded as well as interpreted stuff
  * Attempt to fix the autoconf-version issue with soem messy changes in Makefile.am files
  * small fix to autogen.sh
  * Further attempt to make autogen.sh robust, and clean up crlibm configure.ac/Makefile.am to avoid autoconf warnings
  * Try to improve autogen.sh
  * This set of changes arranges that tmprint puts an 'off nat' version of output in the stuff that goes to the CSL gui. In due course that is so that it can be used for COPY (as in and PASTE) operations. The csl/FOX side has to have a bunch of matching updates to cope. Yet further refinements to FOX configure scripts as well
  * Fix a typo that means that UNTR did not work properly
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2385 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2384 2bfe0521-f11c-4a00-b80e-6202646ff360
  * temporarily changed more the con file names
  * temporarily changes the con file names
  * Attrmpt to fix a FOX build problem
  * Correct typo in comment
  * Bring files in csl/cslbase and csl/fox back into step
  * A further FOX configuration fixup
  * changes missed on last checkin
  * Further work to get new version of FOX etc to build OK on a Mac
  * standard answers changes: 1) more efficient version of ofsf_qemkstdansaexpe 2) using previous results in ofsf_qemkstdans 3) "nice" standard answers for quotients and root expressions 4) fixed ofsf_mirror
  * Fix typo that hurt Mac version
  * update version of FOX used with CSL GUI to be in step with 1.6.49. Copy & paste will be broken until I fix it, but this represents a step towards Unicode support and ought to be good for stability. Please report glitches
  * Added sfto_ceilq procedure to sfto module.
  * Bug fix for liepde: force re-evaluation of final result before analysing it.
  * Fixed argument order in cl_updans.
  * Extended the structure of container elements for future projects. Extnded the structure of answers to contain the originating formula.
  * Added fluid declaration for !*rlqestdans.
  * Ongoing work on the tropical zeros. Some fixes, which also affect the test file.
  * Work around Segmentation violation in PSL version caused by CRACK trying to open the file nil (the identifier, not the string)
  * added documentation fpr the totaldeg operator.
  * Add a totaldeg operator
  * Standard answers for virtual substitution: Answer terms containing infinitesimals are correctly replaced by rational numbers.
  * Added checking procedures aex_badp and anu_badp.
  * Added new and deleted useless assertions in ofsfanuex module.
  * Fixed a bug in ctx_union.
  * Changed printing of aex and anu expressions.
  * Renamed aex_freeids to aex_freeidl in the ofsfexfr module.
  * Fixed simple bugs in a few lto and sfto procedures.
  * Stable, but incomplete standard answers for infinitesimals.
  * Fixed assertions in procedures aex_containment and ratpoly_xtothen.
  * Added a few new sfto and lto procedures. Fixed a bug in sfto_cauchyf.
  * Undo recent broken changes to FOX
  * Reorganized answer code a bit. Do not sort answers when rlqebacksub is off.
  * Utterly break CUT/COPY in csl-GUI but move towards better treatment of less common characters, and hopefully provide a better base for mending COPY. Also provide a more recent wxWidgets snapshot
  * Introduced service rlsign with blackbox rlsignat for ofsf: reval sign applied to the left hand sides of all atomic formulas. The idea is that we want to be able to determine truth values after substituting ugly algebraic stuff, in particular, numbers containing nested roots and fractions in exponents. The algebraic evaluation of sign appears to be quite powerful for this.
  * Correction re argument order to cilk support in arith02.c
  * Moved switches to redlog.red, where they belong. ofsfqebacksub must be on by default.
  * Standard answers for virtual substitution of infinities are correct now.
  * More messing with fonts for wxWidgets build
  * Working on standard answers for virtual substitution.
  * Added procedure sfto_renamef.
  * wxfontdemo now seems OK on windows
  * Debugging ...
  * move new version of wxfontdemo to be the main version
  * Working on standard answers for virtual substitution. First version for infinities appears to work.
  * Added a function computing Cauchy bound into sfto module.
  * Glyph coverage information for fonts, and extra care wrt license information about them
  * Updated ofsfvsl testfile.
  * Added switch vslgreaterplem.
  * Bugfix: 'inconsistent tag is set to nil in vsl_etermi.
  * Seem to need .ttf versions of Latin Modern fonts to survive with wxWidgets on Windows. I do not know why
  * Ensure that .ttf files are tagged executable, as is necessary on Widnows
  * Add a copy of the Latin Modern Fonts so I can experiment with use of them
  * Stronger lemmas are learned.
  * There was some debugging output in ofsf.rlg by mistake.
  * Added tests for rlvsl.
  * Fixed vsl_stat.
  * Handled empty list input case in a few lto procedures.
  * No more alpha for kgeq0.
  * Some more statistics. Globally modifying the trprinter!* was not a good idea.
  * Average and median of a list.
  * Some experimental modufications and statistics.
  * Update profile information for benefit of fully fresh builds
  * Added variable selection heuristic for vsl.
  * There are stack-local lemmas now.
  * Added sfto_kmemberf.
  * Removed infrastructure for positive lemmas. Negative lemmas are (disjunctive) lists now.
  * Lots of fixes. Stack element is a data structure now; a field for substituted negative lemmas is prepared but not used.
  * Test learning in testfile.
  * Less verbosity in procedures vsl_fail and vsl_succeed.
  * Separated conflict and backtrack operations. Added switches rlvsllog and rlvsllearn.
  * Reinstate maths display of matrices in CSL fancy mode - broken first in November 2012, and again in a different way rather recently
  * Intermediate check-in. This is quite stable.
  * A typo corrected.
  * In ioto_form2str omit "+" in front of negative summands.
  * Fancier verbose output.
  * First version of ioto_form2str, a printer transforming LP into a string.
  * Added sfto_lreorder.
  * Written function vsl_analyze. Added switch vsllearn.
  * Avoid generation of session files in crack test runs.
  * In a debug build with CSL make more unwinds show a backtrace regardless of errorset. In CSL terminal mode cope better with characters such as UK pounds. Sort of support pounds symbol in tmprint and FXShowMath
  * Fix for depend problem in liepde.
  * Keep track of substitutions inside the stack. Compute elimination sets in vsl_decide. Gauss elimination in vsl_decide.
  * Arrange that TeX backslash-underscore is rendered, ao that names wit underscores in them come out a bit better, and improve spacing for blanks
  * Further work on virtual substitution with learning for the linear case.
  * Function vsl_eterm rewritten.
  * Provide lisp variable ulimitci packages/alg -m Fix
  * Fix to an EQCAR where EQUAL test was needed
  * Working on virtual substitution with learning (linear case).
  * Move inline-defs.dat into generated-c. Make setcrackflags a symbolic opertaor in entry.red
  * Working towards virtual substitution with learning for the linear case.
  * New hopefully correct set of regression reference logs and timings.
  * Try to cope with missing inline-defs.dat file
  * again fix prettyprint-related glitch in PSL builds
  * Fix case of write "#"; in fancy mode output
  * This might fix blank characters in fancy mode output
  * Further adjustments to dependencies to try to cope with inline-defs etc
  * Try to arrange that FOX or wxWidgets gets rebuild when necessary
  * New timings after switching off turbo on alfred.
  * At least the first small test of LALR works, with some PSL compatibility to support that as well
  * Try to get CSL dependencies for windows builds a bit better
  * PSL does not have a prettyprint function defined by default
  * try to be more cautious wrt inline-defs.dat. Remove a file not needed by anybody but me
  * fix a clash in defs in first, second, third as inlines
  * touch inline-defs.dat to make empty version after deteting it for clean start
  * report on file-name if C-code version is wrong
  * remove junk characters that had crept in to arith01.c
  * Use subversion Id keyword everywhere
  * Put in CILK option in arith02.c. Make svn deal with Id keyword everywhere
  * add lalr.log in whatever broken state it currently is
  * Add comments to lalr parser code, and work on PSL compatibility
  * small updates - soma may move towards PSL compatibility
  * Newer wxWidgets snapshot to survive latest mingw32, plus first draft of an LALR parser generator
  * make package-remake autoload and control location of inline-defs.dat file
  * comments and timings on threaded integer multiplication
  * correct some dependencies
  * Forward looking changes to be ready to survice future versions of automake
  * Use threads to speed up multiplication when over 1000 digits. Measure thread time
  * remove foreign library information messages as well as disgnostics
  * make open-foreigh-library quieter when it fails
  * some fixes for PSL dynload support
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2263 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Incomplete and at present disabled move to multi-thread long integer multiplication
  * Corrected rlbvarl and added rlqvarl.
  * Fix in fancy printing.
  * Fix a glitch noted by Thomas on Christmas Day
  * Comments on Intel vs ARM performance today
  * Checkin precompiled spy.b for AMD64_ext Remove extra fasl files in wrong directory Remove -x flag from bootstrap.sh
  * Dyn load for PSL not yet debugged
  * Re-work autogen script to make it more reliable - I hope
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2254 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Checkin of OCCAL - a mixed symbolic numeric Optimal Control CALculator
  * reference or initial versions of what I hope are mended C code files
  * Fix - I hope - a longstanding bug in Lisp to C compilation
  * Small changes to the manual's title page.
  * Try to make measurements of width a bit better so tmprint splits line more realistically. Still work in progress
  * Attempt to fix \not collapse in fancy output
  * Fix to a glitch that was visible on a Raspberry Pi
  * More Redlog regressions (integers).
  * New logs and timings for redlog regressions.
  * More Redlog regressions.
  * Fix a bug relating to autoloading clashing with C-code optimisations
  * Further Mac-related fixes. Note need various macports stuff to build
  * Try to bring Mac configure more up to date
  * Switch to new libedit for Mavericks.
  * More entrypoints to allow rltools to build, plus fudge to C code generation ditto
  * Tidy up several places where there were undeclared fluids - several of which where actually errors
  * Make autoload stub moan clearly if it fails to load the function it is supposed to
  * Correct pathname generation for reducerc/redcue.ini file
  * Correct typo
  * Add delete!-file and delete!-file!-wildcard functions to PSL support code.
  * Add "win32" to system_list!* / listsystem!* on Win32 PSL
  * delete!-file function for Win32 PSL
  * delete-file function for Win64 PSL
  * Add a delete-file function to PSL for Linux, FreeBSD, and Windows.
  * Exponentiation is now handled correctly by function z3_form2ast.
  * Added simple testfile for gurobi interface.
  * Added function pasf_elimcongat2 which equivalently removes (in)congruences from Presburger formulas in lisp prefix.
  * Added interface to function z3_mk_solver.
  * There was a !#fi instead of !#endif in lto.red.
  * Function z3_form2ast extended.
  * Use symbol!-name for converting identifiers to strings.
  * Done reorganizations of module pasfresolve. Introduced rlelimmod and rlelimcong.
  * Developing ...
  * refresh profile info and make crack use lisp-based file management not shell based
  * Tidy up the CSL compiler a bit
  * check in the fix to fwin.c in the FOX directory...
  * bring wxfwin.c up to date and fix a glitch in scripts/test1.sh
  * delete-wildcard and better throw in CSL
  * remove trash from crack reference log files
  * Support rlbrkcxk for pasf.
  * Added Z3 foreign foreign function interface.
  * Adjust exactly what internal checking is done in CSL debug builds
  * do not remove mkinstalldirs in autogen.sh
  * Update config files, make CSL try 64-bit versions on windows properly, minor fixes to testall & test1.sh
  * Congruence resolving procedure added.
  * Operators modc and divc have correct precedence now.
  * Correction re display total test times at the end of testall
  * Display total test times at the end of testall
  * protect against eg HOME being set to an empty string
  * Correct error with sum operator, reported to developers' list
  * multiple definitions hack should no longer be needed on windows targets
  * New contributed package vas.
  * Corrected error in redlog texinfo file that caused the makeinfo program to abort.
  * fix a cygwin-64 cygpath messup I had put in
  * Try to make parallel make behave at the top level
  * set svn:executable property on bin/reduce
  * PSL Win32 Port: Correct ASM code generator, rebuild bare psl executable.
  * PSL Win32 port compiled C files
  * PSL Win32: Correct missing comment characters
  * PSL Win32 Port: improved Floating point for transcendental functions.
  * Fix error due to redefinition of ordp in the noncom2 package.
  * Correction of typo (extra right paren)
  * Minor typo corrected
  * Have svn ignore more generated files
  * Minor improvements to test scripts.
  * Make sure that backsubstitution of 'noint by 'int doesn't create non-unique kernels.
  * Win32 Port:   Add external functions popen, pclose.   Correct names of numeric functions.
  * Add "gentoo" as known vendor (courtesy of Petrov Alexander)
  * More regressions for Redlog.
  * Use 4GB with PSL.
  * Deleted a few redundant ratpoly procedures.
  * Procedure aex_psremseq using pseudo division introduced. Procedure aex_sturmchain uses aex_psremseq. Switch rlanuexpsremseq removed.
  * More Redlog regression tests.
  * More regression tests for Redlog.
  * Introduced alarm markers.
  * initial check-in
  * Updated reference logs from alfred.
  * Switching to a directory structure for Redlog regressions.
  * Use a directory structure.
  * Test file for bug http://sourceforge.net/p/reduce-algebra/bugs/38/
  * Reference times taken on alfred.
  * Further cleanup of module ofsfanuex. Rewritten procedures aex_reduce and aex_psrem.
  * Add a marker !_file!_ that is replaced by the name of the current file during input (or the string "Terminal").
  * Better printing of syntax errors: tokens are now shown in correct order.
  * More Redlog regression tests.
  * Build file for regression logs.
  * Working on Redlog regression tests.
  * Further reorganizations and small optimizations in module ofsfanuex.
  * Final fixes for a first test run with cron.
  * Regression tests for Redlog.
  * Use rm with "-f" in the beginning.
  * timer.tmp was another filename that clashed with parellelization.
  * Fixed a bug with fallback QE in rlgqe.
  * It is safer to explicitly use bash since there are functions.
  * Updated comment.
  * More precise type definitions in module ofsfanuex.
  * Updated test file and log for assert.
  * A parallel version of testall.sh as a proof-of-concept. If people like this, then this should be integrated with testall.sh at some point.
  * Autoload for assert.
  * Cleaning up assertions.
  * Typo.
  * Procedure aex_subrp now uses ratpoly_subrp instead of ratpoly_sub. This saves conversion SF -> Lisp prefix -> SF.
  * Switch rlanuexdebug replaced with assertions.
  * The was a quoting error so that assert could not be switched off. There are nicer diagnostic messages with assert() now.
  * Use SF instead of SQ in procedure ratpoly_subrat1.
  * Some nicer error printing for assert().
  * assert() processes its argument with formc(), which I learned from forstat. I hope that this way all sorts of macro expansion are done properly.
  * Done more reorganizations in module ofsfanuex. The following procedures were rewritten: ratpoly_gcd, ctx_get, ctx_free and ctx_union.
  * Arrange that wxWidgets can be built despite recent changes to w64-cygwin32 headers and libraries. Make 'make' from top level stop if any sub-target fails
  * Done some reorganizations in ofsfanuex module. Procedures are now asserted.
  * Assert checking function for Atom is atom.
  * rename regression tests so that they end up sorted in date order
  * more careful crlibm dependencies
  * Some new externals (dyn load)
  * cope with mac version of uname
  * include log file for fp tests
  * Further work to let CSL use crlibm for sin/cos/exp/log
  * Autoload Redlog on rlset.
  * Fixed a bug in ofsf_mkgtagq, due to which the lpdo test failed.
  * ex(m*x+b=0) crashed. Use !*strict_argcount for argnochk now.
  * correct a typo
  * Make csl use crlibm for correctly rounded double precision elementary functions
  * Changed test file for rltools to make it work with default setting of !*allfac.
  * Better test file and new rlg. Gatermann was too slow for the standard test file. Added tests rlpdep and the tropical stuff.
  * Decision procedure for linear exponential problems.
  * Supress some debugging output.
  * Steiner-Lehmus did not work properly anymore. I had messed up the Gauss after discussions in Dagstuhl.
  * Correct handling of case when f and g have integer gcd in sfto_resf2.
  * Use new fast resultant.
  * Renamed sfto_res to sfto_resf etc. Process switch fastresexpand already on the Lisp level.
  * Amendment of last commit.
  * A slightly faster resultant.
  * Fixed a bug in procedure assert_procstat.
  * fox to doc/Makefile.am to remove duplicate widgets.html entry
  * Fixed a bug in the (factoring) Bezout resultant code.
  * crack needs subst to preserve EQ on unchanged parts of the input expression
  * code that can be extended to check FP effects that might influence numeric results
  * add an autoload entrypoint to make liepde test run better
  * fresh set of reference logs + some code cleanups
  * Correction for incorrect handling of general dependency of df rule on free variable
  * Correction for bug in trigsimp, plus improved printing of error message, see
  * Fixed a bug in procedure aex_findroots.
  * Make fontdemo work again on X11
  * remove some temp tracing print statements from run.sh
  * fix a typo in Makefile.am
  * 32- and 64-bit cygwin builds now more carefully separated
  * Add Makefile target "force" for PSL, to remake bootstrap.img
  * More tuning to cygwin vs cygwin-64 support
  * yet more fixes re 64-bit cygwin
  * Further attempts to support 64-bit cygwin gracefully
  * Correction of directory for chmod
  * added an independent oblist function
  * Turn on utf8exp by default. Print negative numerical exponents.
  * Fixes.
  * Be more flexible and tolerant towards weird ideas of gcc 4.6 on argument order.
  * correction to cygwin check script
  * A script that tries to see if all necessary cygwin packages have been installed
  * make scripts/testall.sh behave better if /usr/bin/time does not exist
  * better XP compatibility, especially for find_gnuplot that caused disaster there
  * Remove zero by default.
  * A small step that will encourage me or somebody else to work on compilation from Lisp into Java
  * I hope that dyndemo works in the cygwin cases as well as all others
  * typo in pslcompat.sl
  * Discover definiteness again.
  * lp_newmodel has got 2 args now.
  * Cleaner solution re using floats vs. ints. Integer solving is working now with the Gurobi file interface, too.
  * Removed a mkquote that was left over from an attempt to use errorset.
  * get host name correct for some cygwin 64-bit and related cases
  * Avoid compiletime problems when libredgurobi.so does not exist. Semantically ofsftrop is under construction at the moment. It is using integer solving with the FFI but not otherwise.
  * Work on autoconf stuff to get CSL building for windows better sorted wrt eg 64-bit cygwin
  * fix for pslcompat.sl
  * A step to making csl build cygwin64 support in properly. Note you now need x86_64-pc-cygwin-gcc and friends installed under cygwin when you build
  * Fix bug I had introduced that caused poly.tst to loop
  * Support inline keyword in emacs TAGS file generation
  * Fixes.
  * Typo.
  * Linux compilation.
  * Added syntax coloring for inline keyword.
  * Added README.txt, comment in Makefile, and Header in redgurobi.c.
  * A foreign fucntion interface to gurobi (CSL only).
  * Thoroughly revised pzerop() and friends including an FFI with CSL.
  * use unwind-protect in a number of places where it seems called for since it is available in both CSL and PSL and it protects against throw as well as error. Fix up compilation into C to allow for that. Add ACN-projects.txt
  * Initial step towards allowing for compilation of Reduce into Java to boost performance
  * typo in crack/crutil.red code
  * Add test for incorrect integration rule fixed in r2066
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@2068 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Make rubi test happier if env variables give cygwin style paths
  * fix an integration rule bug spotted by the rubi-red tests and keep trying to make rubi tetsing more robust and portable
  * Merge latest changes to reduce.img.sh into saveimage.sh
  * fixed bootstrap for PSL
  * Make broken conlaw.tst run again
  * bug fix in restart.c to allow cygwin64 build to work. slight fix in crack
  * rework timeout scheme, make throws go through errorset in CSL and update rubi code to exploit all this
  * Improved indirect separation in crack
  * setprintprecison to be PSL compatible and fix a bug wrt eror checkin in Rubi
  * rubi_red tests now run under PSL, except for warning re use of catch
  * more work on rubi_red
  * Improve rubi compatibility with psl
  * added unglobal to PSL file tree
  * Add integration tests from the Rubi system from Albert Rich
  * Check in additional files of new version of crack.
  * Check in of new version.
  * provide a sort of cons-counter work-alike
  * improve configure.ac test for ncurses
  * moved crack further to the end to satisfy its dependencies
  * remove some of the trace printing in the FFI code
  * mark call-foreign-function variadic to prevent warnings
  * moves towards getting dyndemo/dynmodule to build again
  * fix typos in fns1.c and start thoughts on cygwin64
  * Make more cases of 3-arg foreign functions behave
  * more cases of FFI work - albeit noisily with trace printing
  * (check-sat) did not expect rl_qea to possibly return nil.
  * make dyndemo code a bit less extreme so that gcc can survive it
  * Put in demo scripts for foreign function stuff as foreign.tar, rest still buggy but getting there
  * foreign functions without args or result maybe work
  * Make sure that bpsl binary has the executable bit set during configure.
  * Added services rl_fvarl and rl_pnf.
  * Removed evil redirection from system() call.
  * Some start at a foreign function interface
  * more reconstruction of dyndemo
  * update dyndemo.c and dynmodule.c
  * Removed macros pop and push in favor of new implementations by ACN.
  * A first non-poritive version of tropsat and friends.
  * A frist non-positive version.
  * Reinistate dyndemo build sequences, but they no longer work on Windows
  * Removed change for % as a letter in tok.red
  * Kill gnuplot window when Reduce exists on Windows
  * Working on tropsat.
  * Use rerror instead of rederr for errorset.
  * Further fixes re gnuplot from windows
  * On CSL search for gnuplot in a better way
  * typo in comment
  * Gnuplot interface for PSL on 64-bit Windows.
  * Forgot to commit linalg.rlg for changes in error messages
  * remove unwanted files
  * avoid some linelength delicacies
  * beuuer versions of PUSH and POP
  * Recompiled putd-getd.sl for AMD64, as old putd-getd.b was wrong (probably compiled from from generic source instead of machine specific)
  * provide push and pop macros... first version that I will update sometime, and I am not certain that this is where they belong
  * pzerop uses fs_simplex2 by now. There is a switch rlgurobi for still using gurobi.
  * Autoload lto_sconcat instead of lto_sconcatn. This was a typo.
  * Pass 'infeasible up the tree and throw an error late. This way fs_simplex 2 can be used from the SM with 'infeasible as a possible result.
  * linalg: Same error messages for simplex and fsimplex modules.
  * Added optional bounds argument to the (fast) simplex. Adapted documentation. Updated tst and rlg files.
  * Improved handling of terminal interrupt in PSL for AMD64_ext
  * allow % as letter, if needed
  * PSL for 64-bit Windows: recompile sys-consts.b for proper value of system_list*
  * PSL for 32-bit Windows: a couple of forgotten updates
  * PSL for Windows updates:
  * Support win64 for gnuplot interface in CSL
  * 64-bit Windows PSL: Give sensible error message when not enough memory available
  * Make two digit exponent the default in floating point output.
  * Improvements to build process for Windows installable package.
  * yet more inline function fixups
  * more fixes re use of inline functions
  * fix a typo and tidy up files in support
  * get rid of some more name clashes
  * removal of more name-clashes across modules + better debuggin in bootstrapreduce
  * avoid name clash on mod*: remove all file called inline-defs.dat after this change
  * Corrections to PSL for 64-bit Windows
  * A couple of changes to support SPL build on 64bit Windows
  * Fix to backtrace in 64bit Windows.
  * A couple of fixes. Use my own prompt. Errorset.
  * get-model continued in case of error.
  * Added smt support module to redlog.
  * Windows batch files: run 64bit version if available
  * Windows .bat files for PSL REDUCE: use start to avoid annoying batch file prompt after CTRL-C.
  * PSL for 32-bit Windows: Enlarge character arrays for pathnames.
  * Correct handler for terminal interrupts in 32-bit Windows PSL
  * Module pasfresolve rewritten.
  * Omit timing info from comparison in checkall code.
  * Updates to odesolve/odepatch for current version of Reduce
  * Improve script to generate TAGS file.
  * Fix for scope bug
  * Fixed a bug in function pasf_smt2Print.
  * Make sure to build 32-bit and 64-bit Windows versions.
  * Support for building 32-bit and 64-bit installer on Windows.
  * Support french installations of Windows.
  * Better support for building PSL on Windows
  * PSL build for Windows:  Correct PSL build directory name for 64bit Windows.  Allow 32bit PSL build on 64bit Windows (--with-m32)
  * Add PDF versions of the DjVu documents for the cdiff package.
  * Rename procedure ZETA_function to JacobiZeta!:numeric to hide its name and make its purpose clear.
  * use correct print name for internally mapped names
  * Moved basic rules for Ei, Ci, Si and Erf from specfn package into alg/elem.red,  renamed procedure compute_int_functions to compute!:int!:functions and made it autoloadable,  so that an attemtp to evaulate these functions numerically causes package specfn to be loaded.
  * Build xport utility only if xport.pat exists and env. var DONT_USE_XPORT is unset or empty.
  * Documents of the fsimplex project (German).
  * The faster simplex from a project in Passau. fsimplex.red is a submodule containing an improved copy of simplex.red. The improvements are mostly improvements of coding in contrast to mathematical improvements.
  * Remove old psl/psl-amd directory (conflicts with psl/psl-AMD64).
  * Update list of supported PSL MACHINE types.
  * PSL for brock (a.k.a. large AMD64_ext):  Force proper stack alignment to a multiple of 64 bytes when calling C from  Lisp, as required for SSE intructions.  Otherwise, bad things may happen during  loading of dynamic libraries. (Fix courtesy of Winfried Neun.)  A couple of C code lines cleaned up.
  * Fix and test case for
  * Shortcut for certain cases of log(1) --> 0, e.g.
  * Functions translating PASF formulas to SMT-LIB2 format added.
  * Make AMD64_ext default build architecture for PSL on Linux 64bit Intel, mingw-w64 for Windows64.
  * Recompile backtrace.b for AMD64_ext.
  * argc and argv now saved properly for future use.
  * Cleanup (typos and unnecessary repetition). Add rule for exp(n*i*pi*arbint(k)).
  * Minor improvements to REDUCE manual.
  * PSL subversion housekeeping.
  * Use function prin1 instead on prin in remake.red, as prin is unknown to PSL. During bootstrap of PSL Reduce, call savesystem with 3 arguments instead of 2. Modified support/psl.red to suppress spurious warnings about incorrect number of arguments.
  * make-psl.sh script:  Correct error found by Nelson Beebe.  Make AMD_ext default für 64bit Intel Linux
  * resolve clashes that show up with INLINE stuff
  * Complete change from AMD64 to AMD64_ext for 64bit Intel Linux. Take psl files from psl/dist subtree if there is no xport.pat file.
  * create a fine inline-defs.dat while building
  * Add support for PSL 64bit Windows build (called mingw-w64). Re-add missing rds-wrs.b for mingw-w64. Add correct handling of program arguments (a.k.a. argc/argv) for mingw-w64.
  * Correctly set environment variables for Windows (32/64bit) build.
  * make.sh script should honor arguments "psl" and "csl".
  * pident module for parameter identifiability. Baustelle.
  * Added variable selection heuristic in pasf.
  * fix bug in shell script
  * routine update of profile data
  * use printf rather than echo in various places
  * If DC is installed then scripts/testall.sh tries to display a psl to csl time ratio
  * introduce ACCESSORS and INLINE PROCDURE to work towards replacement for most SMACROS. See posting on mailing list
  * Print the point of the Newton polytope with pzerop.
  * Increased sysmaxbuffer.
  * Added pzerop.
  * PSL for AMD64_ext:  Force proper stack alignment to a multiple of 64 bytes when calling C from  Lisp, as required for SSE intructions.  Otherwise, a segfault during dynamic  loading of libraries may occur. (Fix courtesy of Winfried Neun.)
  * PSL for AMD64:  Force proper stack alignment to a multiple of 64 bytes when calling C from  Lisp, as required for SSE intructions.  Otherwise, a segfault during dynamic  loading of libraries may occur. (Fix courtesy of Winfried Neun.)
  * Correction for incorrect handling of certain inequalities in simplex algorithm of linalg package: those where both sides are negative
  * Test of mri package: OK.
  * Fixed a bug in procedure pasf_brng1.
  * meminfo, and entry points for meminfo, other rltools functions, and qhull.
  * Added package qhull.
  * Add PSL support for FreeBSD on 64bit Intel processors
  * Code of rlmdres cleaned up and switch rlpasfintern introduced.
  * Corrected indentation of conditionals in csh-script make-bare-psl. Recompiled allocators.b for AMD64 to remove spurious debugging message.
  * Allow copy of base PSL files from psl subtree, instead of downloading from ZIB,  by setting the environment variable
  * fix to FLAGP related to recent one to GET
  * Fix bug in compilation of GET. In debug mode record sizes of vectors that are allocated
  * Recompiled two fasl files for win32
  * Rename forgotten short win32 name wfloat-w.* --> wfloat-woco.*
  * fix re sleep
  * Fixed bug in pasf_rxffn!-divc.
  * Rlresolve in PASF context can handle modc and divc symbols correctly.
  * Resolved pgauss/ofsf compilation order issues using autoload.
  * add a SLEEP function
  * Term rewriting can be done before resolving modc divc symbols. Switch rlpasfdotrw introduced for this.
  * Correct ordering in package.map:  ofsf depends on pgauss, so pgauss must come before ofsf
  * Remove spurious fasl files, correct load-psl for win32
  * Fixed bug in the fancy print procedure. Bounds are now printed correctly using 'leq or 'geq symbols only.
  * Bounded quantifier is now used for resolving modc operator in pasf_mdres.
  * Mod div resolving transformation made available in algebraic mode under operator rlmdres.
  * Constant division and modulo operators - divc and modc can be used in PASF now. First translation procedure equivalently removing these symbols written.
  * Change short filenames in win32 build of PSL to long names, bringing it in sync with the rest of PSL.
  * Hopefully fixed mutual loading issues between pgauss and ofsf.
  * Fixed quantification order in dfgprint.
  * vsub.
  * Use asserted procedures.
  * Service rlstruct works now in pasf context too.
  * Construct a nicer absolute path to trunk.
  * Functions for writing acell data structure to file added. Support for following formats added: - TGF (Trivial Graph Format) - GML (Graph Modelling Language)
  * Fixed bug in procedure anu_refine. Anu with degenerated isolating interval is now handled correctly.
  * Added improvements and bug fixes to the taylor package, so that all examples from the limits package run correctly with "on usetaylor".
  * Temporary fix for
  * Fixed bug #33 and some issues around it: true and false are not evaluated to SQ anymore but to logicals. Beyond that, there is a new switch !*rlgetrtypecar, which is off by default, so that issues like hugo() and a>0 for algebraic procedures hugo() are avoided.
  * Updated test files for fix of bug #46.
  * avoid resetting simpfn property on sqrt during integration
  * Fixed bug #46.
  * better 'make recompile' etc
  * support blanks in file-names inserted into dependency files
  * define a variable testdirectory when running test scripts so that know where they come from
  * Updated tst and rlg.
  * complete the fix to fastgets
  * Fix a CSL problem with flagging things noncom, make names using in defint less liable to clash, make non-gui builds start more smoothly
  * Add a script to check if enough cygwin modules are installed to allow CSL-reduce fetching and building
  * Forgotten submodules ...
  * instrument code in CSL debug builds to record sizes of vectors allocated
  * correct typo
  * avoid unknown-unknown=>0 causing so much mess in definite integration
  * Latest versions of Win32 kernel files.
  * Checked in forgotten assertproc.red.
  * scripts/pslmem64.sh is a hook for altering the 64 bit psl heapsize on the file system level.
  * Corrected floating point functions for win32.
  * Compiled fasl files for the .sl files checked in four weeks ago (r1861).
  * Rename nonkernel/win32/386-spec.sl since 386-spec.sl is part of compiler
  * rldima is a first prototype of Girgoriev's quadratic map algorithm.
  * sfto_fctrf and lto_zip are some useful tools.
  * Use "asserted" instead of "checked" in declare statements.
  * I am checking in the last CVS revision of pgauss in order to keep this status in the SVN. I will modify it soon. It is functional though.
  * Asserted procedures.
  * Support for asserted procedures.
  * baby-reduce now OK on windows & Raspberry pi
  * getting termed version working better
  * extend new-embedded with baby-reduce
  * Arrange to create data for in-code image file
  * Minor fixes in code. Cleaned up test files.
  * Bugfix: Defining polynomial must be square-free in aex_inv.
  * Color (new) assert.
  * There was an extra eval in assert_assert.
  * Work in progress: debugging aex_inv.
  * Added a second example with two variables.
  * Changes to go with new win32 bpsl  - allocate 64bit for time_t buffer  - use processor fp arithmetic unit  - better handling of hardware exceptions, esp. floating point excexptions  - do not try to access first 64k memory when looking for a return     address during backtrace (first 64k are inaccessible in win32)
  * Modernize PSL kernel for win32:  - changes for Visual Studio 2010  - remove 8+3 restriction for filenames  - support for floating point exceptions
  * A couple of changes around fullscreen.
  * Reflect changes in assert.
  * Ask for dist when it cannot be derived from the file name.
  * Migration to the new tree.
  * Improve implementation of GET so fastget works, and profile to check where to use it
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1854 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Move section list to the end of the chapter HTML page
  * General cleanup of the Reduce manual:  - move to current LaTeX conventions  - better layout for PDF and HTML versions  - include missing bits and pieces
  * Printing of preamble to cl_smt2Print added. Changes to the service smt2Print made.
  * Switch to control calls to DNF procedure from pasf_qeexblock added.
  * Set keyword property for Id.
  * Started new special procedure for the existential fragment of the reals.
  * Added comment.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1846 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Quick fix in ofsf gauss.
  * Tests and logs reflecting recent modifications.
  * At the extraction of atl from theo we perform substitution of constants and check positivity a second time.
  * Exploit !*rlpos for side selection in ofsf translat. Gauss and translat construct a theory of atomic formulas not containing the current variable. This is a generalization if !*rlpos.
  * Added sfto_varp and sfto_varIsNumP
  * Fixed badly escaped underscore in ofsf_ffji.
  * Degree shift learns a theory in order to exploit conditons in terms not containing the current variable. This is a generalization of !*rlpos.
  * Moved file IO to cl. Made script a bit more flexible.
  * cl_smt2Read reads a file now. rl_smt2read is available in AM.
  * Add two new switches to the integrator:  trintsubst - trace substitution attempts only  nointsubst - disable substitutions otuside the integrator proper
  * Make rtags recognize algebraic procedures.
  * Forgot to remove property from symbol (becasue of the wrong assumption that the symbol was never intern'ed)
  * Fixed an ofsf_xopt bug discovered by Eddy Westbrook.
  * Add a couple of integration rules for exponentials containing powers.
  * Add solvetab entries for solution of exponential equations, see
  * New log file output for various odesolve tests.
  * Add one test for expansion via df chain rule.
  * Improvements to driver for integration code:  Try substitutions for exponentials with powers of the integration variable  Use integrator's own gensyms for substituted integration variable  Speed up backsubstitution for trigonometric and hyperbolic substitutions  Call simpint1 on some unintegrated terms after substitution, to apply rules  Reject substitution if substituted integrand cannot be integrated at all  Remove df rules for ei,si,ci which are now included in the alg package.
  * Complete listing of identifiers in appendix.
  * Ignore generated files in svn status display in debianbuild tree.
  * Remove old logfiles prior to running all tests.
  * Move declaration of si and ci operators, so that they are defined when Redcue starts.
  * Rename toplevel file for Reduce manual: manual-pdf --> manual
  * Fix bug
  * List all reserved identifiers of solve package in the appendix, plus some minor changes.
  * Replaced a prog w/o variables by a progn.
  * Add dependency on gnuplot-x11 to debain/ubuntu packages, so that gnuplot is installed together with Reduce.
  * Streamlining the container.
  * Updated rlg-file. I suspect that that change is due to the bugfix with the answer transformation in ofsf.
  * drop back to old-style display when showing a big matrix using the CSL GUI
  * Fixed an eternal bug with backsubstitution in combination with degree shifts. In that course, the "answer translation" has been removed from answers as well as from container elements, where they were cotained once more directly. I now understand that these direct [atr] in the container came from an older stage, and it could never work this way. The interface to rl_transform has considerably changed, rl_updans does not exist anymore.
  * There is a new test in mri_lemma33k that causes a rederr in certain situations. I do not quite remember the problem anymore. I check in this version to be on the safe side for now.
  * Minor fixes.
  * Accept binary "-" in smt2Read.
  * Handle case sensitivity.
  * Test for existence of file TAGS before removal. Correctly recognize macro procedures.
  * First version of rtags for creating an emacs TAGS file for the Reduce sources in the current directory.
  * Toplevel Makefile: make csl and psl targets work with make script
  * tag many more fonts as executable
  * Add Directory for Windows GUI back, with better name
  * better wrapping for circular buffer of processed TeX lines
  * Undo bug introduced into psl Makefile during one of the recent updates.
  * .ttf files must be executable on windows
  * fix re divide(-2^27,2^27) on 64-bit machines
  * Rename old xr binaries
  * Updated rlg files.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1799 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1798 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Fixed a bug where an explicit call to rlexpand took place outside of the pasf context such that some back boxes were not defined.
  * Fixed a bug with the expansion of bounded quantifiers. The recursion must be "unnatural," and pasf_sisub() did not substitute into bounds.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1795 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Merge latest change to psl/reduce.img.sh into saveimage.sh
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1793 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1792 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1791 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1790 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Correction for an obscure error occuring in PSL only:  solve and odesolve generated gensyms with the same name, messing up  variable ordering in expressions. Changed solve!-gensym to use a specific prefix.
  * Generate also libreduce.so.
  * Replace tab characters by blanks in LaTeX input files, otherwise lines in verbatim environment are not properly lined up. (verbatim treats TABs as blanks)
  * Protect against errors when domain mode is modular,  during surd simplification,  during definite integration (by switching off modular mode).
  * try to make3 subs2f1 recurse less depply, and refresh all generated C code for CSL
  * Created a service rl_smt2Read for ofsf. This considerably reduces mkrlsmt. rl_ex and rl_all sorts variables wrt. ordp now.
  * Fixed bug in the procedure cl_smt2Print1. Only formulas without free variables are now printed.
  * Try to include gnuplot in Windows build
  * Find the path to bpsl in rlsmt.
  * Fixed a bug in procedure ofsf_dfgPrintAt(f). Added service rl_smt2Print.
  * Written rlsmt using Redlog as a standalone SMT solver on *.smt2 files.
  * Add generation of reduce.iss file for Windows build
  * Update for building Windows package
  * Add Batch files for Running PSL Reduce under WIndows
  * more batch file corrections
  * Remove extra whitespace in Windows batch file, which caused incorrect variable settings
  * Update dskin.b for Windows; not recompiled since last source file change.
  * Correct last correction (r1771).
  * Correct bug fix in r1729:  symbolic procedure operator is not defined during bootstrap
  * Typo in experimental switch declaration.
  * In pasf_exprng there was the lazy evaluation of bex and ball missing. Fixed a bug in pasf_sisub, where two returns were mising.
  * Add documentation to winbdows build, correct some paths. First attempt at Makefile for Windows.
  * Minor corrections in scripts for building documentation files
  * Introduced pasf_exprng as a clean alternative to pasf_exprng1 and pasf_exprng2. This means most of the code below pasf_expand is rewritten and more efficient now.
  * Check for pure conjunctions and disjunctions in pasf_dnf and pasf_cnf, resp.
  * Do not load utf8.
  * First attempt at creating a Windows Installer, using InnoSetup.
  * Slightly improved fix to freeof-dfl, to handle decimal, domain elements and standard forms
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1761 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Some gaussian integral give erf(infinity) when specfn is loaded, spotted by Andrey G. Grozin
  * Follow-up to the previous bugfix: generally catch variable-free formulas.
  * Do not pass truth values to qepcad.
  * rlgsn, rlgsd, rlgsc can process quantified formulas now. rlpnf is implicitly applied if !*rlpnf is on, which is the default.
  * Run rm command with -f option, necessary when the files to remove are readonly (happened with cygwin and a samba server).
  * Add FreeBSD.
  * Minor correction for FreeBSD
  * Change turtle LaTeX input ot LaTeX2e using the graphics package, convert example plots to PDF so that PDFLaTeX can be used to directly write a PDF version.
  * Add forgotten svn:eol-style property for test files.
  * Bug fix for linalg package:  vandermonde reported 0**0 when one of the arguments is zero:
  * Bug fix for problem reported on Reduce-algebra-developers mailing list that caused a car/cdr of nil during a call to groesolve (see regression test sep-13-2012-groesolve).
  * remove building of dyndemo from Makefile
  * Bug fix for incorrect values of zeta function of negative integer argument:
  * fix to freeof-dfl when expression is something like a float
  * Correct use of set-small-integer in jlisp (for factorization).
  * One more integral evaluated in int test, because of the additional integration rules for asin of revisions 1733:1734
  * One more integral evaluated in algint test, because of the additional integration rules for asin of revisions 1733:1734
  * Update svn:ignore property to ignore testlogs subdirectory
  * see *used-space* and *avail-space* after a garbage collection
  * provide a getpid() function. beware jlisp etc will not have this
  * Buxfix in the smart simplification of (in)congruences.
  * further attempt at wxWidgets configuration for Mountainlion
  * try FOX configure for mountainlion
  * tests for SDK to use -e not -f test
  * further attempt at mountainlion support
  * Try to detect mountainlion SDK if --use-mountainlionSDK is specified
  * A couple of additional integration rules for asin(h) and acos(h)
  * Fix for bug
  * Bring up to date as regards @reduce and preserve changes in main system
  * change to preserve and removal of checkpoint function
  * cygin support for bootstrapreduce
  * Bug fix  for
  * Bug fix for
  * Better user interface.
  * Better policy about proreset(). prorefresh() is not needed anymore.
  * An attempt to profile an id without a function definition crashed.
  * There was an extra eval inside errorset.
  * New package profile for profiling functions calls.
  * Next attempt to get invocation of time command right.
  * make joption.sh more robust
  * Further attempts to get my wxWidgets patches correct and tidy
  * fix typo in previous checkin of termed.c
  * fix typo in previous checkin of termed.c
  * fix up term.h inclusion rules to make things behave better on soilaris
  * a fix re reloading image file from opposite byte-ordering
  * do not set debugging options in restart.c for people other than me
  * improvements, but not total fix, to loading 64-bit big-endian images on 32-bit little endian machines etc
  * Dynamic programming, hashing, sorting of complex subformulas, reversed order of sorting of atomic subformulas, private ofsf_subf, changed verbose output, switch rlqeheu if off by default now. Container access functions have been renamed; hopefully also pasf is completely adapted to this. Fixed a bug in pasf; where lessp and minus was used on domain elements.
  * Restore accidentally overwritten files for AMD64
  * use printf rather than echo -n
  * By using cp instead of "svn cp" I managed to create two copies of the same svn repository subtree, but with different names. This will correct the mess.
  * More forgotten updates
  * Restore accidentally overwritten files for AMD64
  * Add PSL implementation for freeBSD on i386 and x86_64
  * continued adjustments re wxWidgets
  * try for better PSL vs CSL compatibility on arithmetic
  * Add code for Android platform from Ahmad Akra
  * allow scripts makefox.sh and makewx.sh to do parallel builds
  * update wxdvi.cpp
  * fix directory name to make CSL rebuild scripts work smoothly
  * set svn:executable for csh script
  * improvements to wxWidgets version, eg re access to private fonts, raw cygwin building etc
  * Some more property changes: svn:ignore svn:executable
  * More Bourne shell compatibility fixes.
  * Minor corrections to test1.sh script, to correctly generate *.time files.
  * Compatibility: Make testall.sh and test1.sh scripts run with Bourne shell and standard time command. PSL: Do not try to run xport -fetch if there is no xport.pat file
  * Two improvements for differentiation:  1. (originally from odesolve/odepatch.red, by F.J. Wright):     Differentiation of a parameter-dependent integral must not omit     differentiation of the upper limit. E.g.
  * even more patterns in svn:ignore
  * More svn:ignore patterns
  * Add creation of "reduce-addons" package for redfront, breduce and reduce-mode for emacs
  * a typo in configure.ac led to the cygwin version geting configured much too often
  * fix re cygwin and dyndemo
  * script to run make in all FOX directories
  * try to rationalise termed.c
  * make bin/redcsl use new scheme to select a version
  * More svn:ignore
  * try to implement policy as in cslbase/gui-or-not.txt
  * mountain lion is the name for 10.8
  * maybe complete explanation
  * further fun re startup
  * more explantion of what I am trying to do for windows
  * starting to thing re4ally carefully about cygwin terminal issues
  * small binary I will use soon
  * Patches for FreeBSD (see r1604)
  * add scrap of explanation re starting reduce
  * Make gcref script in gcref package executable again. Correct incorrect calls to rederr in noncom2
  * Correct missing TAB char in Makefile
  * Forgot to remove limits.tex from packages/misc. Update citation in trigint docu.
  * Add generation of documents in doc/misc to debian build. Move documentation of limits package into manual.
  * Set svn:ignore property to exclude TeX-generated files from svn listings.
  * Fix and regression test for failure to define certain rules.
  * Add a few test cases for the improved exponential integration rules committed in r1453.
  * Detect integer powers of exponentials in findzvars; this avoids a simplication error in some cases like
  * yet more svn:executable cases
  * remove some spurious svn:executable tagging
  * further removal of spurious svn:exectuable tags
  * remove svn:executable in a load of places where I was not sensible
  * remove svn:executable in a load of places where I was not sensible
  * remove svn:executable
  * another place where strings got damaged
  * fix a bug that mainly hurt on 64-bit big-endian but that was a bug always
  * ignore temp files in svn
  * Update title page of manual, make sure manual is rebuilt if necessary
  * Debian build: check for existence of build dir before calling make
  * Fix and regression test for loading int package when combineexpt is on.
  * Reset svn:executable property for .red files.
  * NULL out a previously dangerously uninitialised field in directory structure
  * Ignore exit code of "make (dist)clean"
  * Start merging documentation of contributed packages into main manual.
  * Remove _all_ .aux files
  * Run "make clean" for doc/manual as well.
  * fix mangled edit in FXWorker.cpp
  * improve, but not perfectly, initial default window size
  * Updates to build process for the Reduce manual
  * smacros.red had the executable bit set
  * Minor update
  * Create index.html for help index, Makefile correction
  * add browser options in another place
  * add more possible browsers to the list
  * correct typos in Makefile
  * script in debianbuild Makefile that can create .tar.bz2 source archives
  * remove a couple of files from support-packages to reduce size
  * Updaet debianbuild Makefile: replace incorrect pipeline
  * Fix for an alglist!* caching problem. The following exhibit the problem
  * AUtomatically update changelog (at most once per day).
  * New snapshot number
  * Do not run toplevel make
  * Try to skip PSL build for unknown architectures.
  * detect and report arm platform
  * Minor updates to docs.
  * Small changes to formatting macros and fonts.
  * Split debian/ubuntu package.
  * Support PSL for freeBSD on Intel x32 and x64 platforms
  * fix typo
  * Removed user-specific paths from the README files.
  * Updates README
  * Add Makefile for building packages; minor corrections.
  * Introduce extra directory for debian build,  minor adjustments
  * Correct description of script parameters.
  * retain wxWidgets 2.8 compatibility in build scripts for wx varient of CSL
  * avoid use of c99 variadic macros
  * Ensure documentation files are generated during package build.
  * Simple Makefile for producing PDF and HTML version of the manual.
  * Add missing \begin{document} line in reduce.cfg
  * manual-pdf.pdf made using mkpdf.sh
  * a more proper version of this file
  * add files needed for debian build - not manual-pdf.css is a dummy at present
  * fix shell scripts for sed compatibility
  * add support for --version
  * Added missing file to debian build tree.
  * Add README to debianbuild subtree.
  * Extract version from source file header. Add menu option to REDUCE Run to show version.
  * Fixes with VW in SB.
  * Added formula printer for DFG syntax (SPASS).
  * Cover the case of quantifier-free formulas in cl_split().
  * Default rule in toplevel Makefile doesn't pass @@@ to make.sh as expected. Issue warning that "make install" doesn't work.
  * Patches for FreeBSD port of CSL:   - Do not use the conditional operator ( ... ? ... : ...) in /bin/sh scripts   - Always include sys/time.h if present   - Check for existence of RLIM_SAVED_CUR and RLIM_SAVED_MAX   - Check that RLIM_SAVED_CUR and RLIM_SAVED_MAX are != RLIM_INFINITY       (as they are on Linux!)
  * Do not build universal binaries on the Mac, since this is not supported on Lion anymore.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1602 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Remove extra space in -L library_path for FOX
  * rllqe did not work anymore due to some changes a few months ago. Added a test for rllqe to ofsf.tst.
  * correct a typo
  * more things to make vsl happy
  * vsl now runs a lot more of Reduce, and has bignums
  * precompute fewer bernoulli values if on vsl
  * changes in CSL-specific code to support vsl
  * display values computed at compile time as useful log on slower systems or when debugging
  * tidy up and add some debug code to hash stuff in cslbase/fns3.c
  * limit size of alglist hash tables
  * improve settings of svn properties
  * add a missing file
  * Can now build almost all of Reduce
  * copy mma.awk and qepcad.awk to reduce.resources
  * Less problematic reference to $trunk in rltools_trunk() as suggested by ACN.
  * incomplete work to support bigger primes in modular factorisation code
  * further fixes to support vsl and other limited Lisps
  * fixes that make things better on vsl
  * avoid hashing things appearing in smacros
  * start to relax limit on modular arithmetic range, work to help with vsl compatibility, small amount work on documentation
  * invtempbasis needed to be that name
  * Allow running more than one test file per package directory, e.g.
  * Another case of protecting pathnames against whitespace and punctuation characters
  * Toplevel file of HTML manual is now called index.html
  * Separate configuration files to produce the HTML version of the manual with and without the SourceForge logo.
  * Protect pathnames in toplevel configure.ac against whitespace and punctuation chars.
  * Correct location of log files in saveimage.sh script
  * Add quotes around pathnames, to protect against whitespace and punctuation chars.
  * tiny change to manual
  * reinstate building of invbase
  * rename many fluids to avoid potential clashes with user code
  * fixes for some places where packages clashed
  * preserve reduce image
  * general small improvements
  * fixes to make vsl port behave better
  * get restart function working in vsl
  * integration and factorzation start to work
  * provide gctime
  * improved manual
  * improved manual
  * add the start of a manual
  * reconcile earlier fixes
  * adjustments to help with vsl
  * initial checkin of vsl
  * Support Emacs 24 package installer. Other minor tidying up.
  * Rename option reduce-comment-region to reduce-comment-region-string. Improve code, mainly function docstrings, to follow Emacs coding standards better. Make fluid not-eof into an argument.
  * Initial update for Emacs 23/24. Now compiles properly. Remove use of fluid variables in reduce-mode. Minor cosmetic enhancements.
  * ensure libX11 is scanned on Mac even if MacPort case
  * do not even try dyndemo on a mac because macports is not clever enough to cope with required build flags
  * -lX11 -lXext on mac regardless
  * more careful use of AC_LONG_CONFTEST for test code
  * fix sense of some mac-specific tests
  * fix a typo relevant on the Mac
  * Add reference to web release of documentation.
  * Updated contact info prior to web release of documentation.
  * fix a typo in configure.ac
  * if a user of configure sets CC or CXX avoid any expectation that gcc is useful
  * Initial check-in of reduce-run.el, reduce-ide.texinfo and README. Minor update of reduce-mode.el comments to match the other files.
  * Enhance \begin{reduce}, i686-w64-mingw32 fixes re vsscanf
  * Allow for decimal numbers in physop expressions.
  * First attempt to fix physopapply - it looped in nested applications and dropped factors.
  * scripts to maintain xmpl directory
  * add a collected set of test scripts
  * EOL handling corrected
  * MacPorts Portfile (by Mark Brethen)
  * various minor changes
  * Improved saveimage.sh script that can be run from any directory by passing the build directory path.
  * Latest changes to debian/ubuntu build process
  * Make sure the target directories exist when saving a psl image
  * Add simple script to save a PSL image at a specific location,  with specific load paths
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1531 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Small clean up in statemult of physop package.
  * Calculating matrix elements did not work when states were id's.
  * try to make code recurse less deep
  * still trying to show willing over documentation
  * further small incremental additions to the documentation
  * avoid an over-long line
  * further documentation stuff
  * CSL documentation has index, even though it has little real content
  * provide a factorize-mod-p function
  * correct some typos introduced when my local svn checkout got mangled and my recovery was imperfect
  * improve layout for documentation of functions
  * (very) gradual work on documentation
  * include /usr/include/w32api so that gdiplus.h can be picked up
  * mend scripts/csl-sanity-check.sh where a typo had broken it
  * mostly to fix a typo that made csl.c fail to compile
  * can not extract some doc from lisp/reduce sources too.
  * Try to make progress on CSL documentation
  * Last patch didn't reset !*mcd properly to its previous value.
  * When combineexpt is on it can happen that gcd's are calculated with mcd off. This can have disasterous effects, e.g. the product of two non-zero quotients could yield zero.
  * Added missing return
  * correction to previous checkin
  * add in in_tex command and understand \end{reduce} as comment
  * adjustment to comments
  * correction for libedit version confusion
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1506 2bfe0521-f11c-4a00-b80e-6202646ff360
  * kill app with prejudice when window is closed to help XP
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1504 2bfe0521-f11c-4a00-b80e-6202646ff360
  * update local font handling in wxfontdemo1
  * More special cases for dilog.
  * improved reliability when window size changes, I hope
  * re-create fixed pitch font every time...
  * sometimes scales to fit window, but then crashes
  * Get better antialiasing on cmex10 extended chars under windows
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1497 2bfe0521-f11c-4a00-b80e-6202646ff360
  * improve code that adds custom fonts
  * fix mistake boolean->bool
  * mostly now using wxGraphicsContext and my patched wxWidgets
  * jacobian --> mat_jacobian
  * attempt to make this robust against paths that contain whitespace
  * More error checks against misuse of t and nil:  - as formal parameters in functions  - as local variables in a block  - as local variables in lambda or (symbolic) where expression Check for empty variable list in declaration.
  * prevent rebinding of nil and t in interpreted code
  * Improved rule for error function definite integrals.
  * Somehow forgot to checkin these updates.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1487 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Undo most of the changes in the last revision, as many of the contributed packages need updates for the mapping of identifiers to work correctly.
  * Add code for mapping reserved identifiers to internal names, right now  only used for "t" as a free variable in a rule in algebraic mode  (see bug reported in     https://sourceforge.net/tracker/?func=detail&aid=3426364&group_id=248416&atid=1126256 )
  * Correct typo in variable name varlis(t)
  * move historical archive out of the trunk
  * use my new patches to wxWidgets to access fonts
  * svn:eol-style, svn:executable and line endings for files  in historical/r36 tree
  * a patched wxWidgets that provides wxFont::wxAddPrivateFont
  * temp file while I move to using wxGraphicsContext
  * Fix error in fancy printing, triggered by the following input in CSL:
  * gethash in CSL sometimes 2, sometimes 3 args
  * arg order to CSL hash function
  * correct typos in comments
  * further fixes to CSL compatibility. Eg add remob
  * forcing in -I/usr/incoude/w32api had been a mistake after all
  * for CSL on windows go -I/usr/include/w32api
  * an arguments can say which gcc to report about
  * remove a temporary provision wrt arg-count checking
  * Some fixes to bring into line with recent CSL updates
  * correct some conditional compilation
  * remove programs that I do not wish to distribute
  * svn property svn:eol-style updates for historical/r35 tree.
  * svn property updates for historica tree:  svn:eol-style svn:executable
  * Forget to checking the changes.tex appendix
  * Documentation updates / cleanup.
  * Updates to debian/Ubuntu build process
  * reset svn properties
  * Update package copyright: gpl2 -> BSD2
  * Make libedit the default for redfront, use system libedit if found.
  * Add debian/Ubuntu build, plus a very simple man page for breduce.
  * redfront: remove explicit dependency on absolute path to editlib,            adapt Makefile accordingly
  * Improvements to redfront:  - corrected a few errors in C code  - make redfront build with GNU readline library  - add completion for GNU readline library  - additional configuration variables for configure,  e.g., pathnames     for Reduce executables and images     (necessary for building .deb and .rpm packages)  - make redfront build with libedit 2.x (as supplied in Ubuntu natty)
  * Reset svn specific properties for historical/r33 subtree
  * Improve rules for integrator:  - previously supposed constants could match subexpressions depending on the integration variable.  - A few generalizations for exponentials
  * Forgot to checkin during last revision
  * Protect loading of int and defint packages against unusual domain modes  (like modular).
  * Main make.sh script: exit with highest return code of all make runs.
  * Improved debian build script: make sure that configure and build targets  run the toplevel configure and make
  * Correction to runcsl script.
  * First version of a debian/ubuntu build area.
  * Fixed bug in iterate1 and added corresponding test case.
  * activity on wxfontdemo to move to using better 2D graphics
  * try to get embedded version working again
  * For completeness: treat sech and csch like other hyperbolic functions.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1442 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1441 2bfe0521-f11c-4a00-b80e-6202646ff360
  * make fitting more deterministic by avoiding gensym uncertainties
  * Integrator:   better tracing output for substitutions   run inferior calls to integratesq in errorset
  * Minor test file updates. Run taylor test in rounded mode with slightly higher precision,  in order to avoid very small coefficients taht should be zero.
  * set up a formde to handle (de ...)
  * set up a formde to handle (de ...)
  * adjust safe-fp-plus in psl.acn.red
  * detect test in lispsystemdiff packages/support/remake.red and use test-packages rather than packages
  * make safe-fp-plus give zero if there are at least 44 bits cancellation
  * check arg-counts more carefully and notice names that could have embedded colons
  * Hopefully completed bugfix in sfpx1.
  * provide a makeunbound function for use by Rainer
  * minor change re autoconf stuff
  * tiny script fro an action I perform fairly often
  * Fixed number of args in sfpx1. Replaced "assertion" by "declaration" in message/error. New rlg.
  * This is the second and final step in changing the GZIP library that jlisp uses. Version bump.
  * This is the first step in changing the GZIP library that jlisp uses because the existing library has bugs in it.
  * fix code that checks for test version
  * Added a close() method to the generated ReduceImageInputStream.java file. Also, added a method which tests the base64 version of an image against the image it was derived from.
  * This copy of the packages is not needed for jslisp. Eventually, the ability to build jslisp using the main copy of the packages will be created.
  * correction re --with-test and regressions processing
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1420 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1419 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Add rules for polylog. Do not try to compute polylog series approximation outside its  circle of convergence, ie. only for abs(z)<1 .
  * Integrator:  - More consistent tracing output when substituting  - Forgotten factor in backtransformation of badpart
  * Reinstate nested comment.
  * Reinstate nested comments - sorry
  * put --enable-test info into target directory name
  * fix a typo in a comment
  * allow for filenames of the form $/xxx where '$' denotes the directory that the current input files comes from
  * Integrator:   Protect against (car nil) in function squashconstants.
  * defint fix: the defint code somtimes returns the symbol fail instead of unknown
  * move TEST marker into lispsystem\* and make --enable-test use test-packages directory
  * Fixes for package defint:  - call setdmode on dmode name instead of onoff, as not all dmodes have     a switch associated with them  - do not let/clear rules for log with complex arguments when complex is on  - fix errors triggered by symbolic (not numeric) factors in exponents  - fix a number of car/cdr of nil in defint_reform and friends  - fixes for handling of prefix forms and other minor cleanups  - regression test file for defint
  * Suppressed warning messages in last checkin.
  * Suppress warning about already defined operators when loading specfn and int together (really this time!)
  * Merge changes to diffp (in poly/diff.red) into odesolve patch
  * redlog:   pasf and ofsf use some smacros from clqer that have recently been renamed
  * Merge necessary changes into assert.rlg
  * In the process of restructuring clqe.
  * New names for the SL structs.
  * Observe !*nat more carefully.
  * Fixed a couple of bugs.
  * Corrections
  * more nested comments
  * Correct grouping error in procedure diffp. More correct test cases for differentiation of dependent operators.
  * More double comment symbols
  * Some more test cases for differentiation via chain rule.
  * Replaced comment block by #if 0 .. #endif to avoid nested comments.
  * Fixed Bug #3406806.
  * Minor corrections:  - configure: Use mkdir -p to avoid error message if directory exists  - csl/cslbase/restart.c: remove extra /* in comment
  * linux32: Add -lm to linker cmdline, add rebuilt bpsl.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1389 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Protect against car/cdr of nil with invalid arguments to the operators input, ws, and part.
  * Corrections and improvements to differentation with expanddf switch set to on. In particular, try to detect inconsistent dependencies.
  * Protect findhost script against whitespace in path of current dir.
  * Corrections to differentation routine
  * Improvements to differentiation with switch expanddf set to on:  - protect against cdr of nil when there is no explicit dependency  - apply chain rule for general kernels (not only variables)  - slight improvement in code readability
  * back off from -fwhole-program while --with-lto is tried
  * arrange that NaN != NaN in eqn
  * getting rounded arithmetic better
  * do not include historical versions in a source release
  * discard some files that are probably not especially useful
  * discard some files that are probably not especially useful
  * discard some files that are probably not especially useful
  * discard some files that are probably not especially useful
  * Some historical releases purely for archival purposes
  * Document new switches for DF, _LINE_. Correct printout of underscores in text.
  * option when testing to keep the temp file of complete raw log output
  * some test code for safe-fp-times and friends
  * getting numerics cleaner
  * fix a typo
  * Document special symbol _LINE_.
  * make _line_ read in as current line number
  * Fix for error when "off cref" is executed before rcref package is loaded.
  * adopt PSL style display of dotted pairs
  * Fix CSL print re dotted pairs and linebreaks
  * update linelength test
  * compare CSL and PSL linelength enforcement
  * change largest-small-modulus to match PSL
  * force random sequences in CSL and PSL tests to match
  * Replaced symbols from gensym() by consistently generated variable names.
  * Calling rerror instead of rederr to get a sensible error message out of the substitution code.
  * restore corrupted linalg.tst
  * improve specrd:sqrt
  * provide function (hexfloat) for showing hex data of native floats for debugging purposes
  * fix sin/cos calculation on windows to get test logs all happy
  * get print format for floats right even on windows
  * yet further work on log comparison
  * Get CSL and PSL logs closer together
  * Fix floating point print format to match PSL
  * change floating point display format to match PSL behaviour
  * change floating point display format to match PSL behaviour
  * avoid assist needing to redefine a function in hephys by putting the updated definition in hephys itself
  * Add a directory packages/regressions and make testing scripts understand it
  * doc update
  * reinstate extraction of gc times to go in times.log
  * Further improvement in scripts/testall and make checkall to make them compatible
  * Make make-release get PSL version in the right place
  * Fix a typo
  * see scripts/make-release.sh for an attempt to automate release-building
  * Make sure that resetting a switch to its default value executes its associated simpfg code only if the switch is actually toggled.
  * improve machine type detection for cross compilation to 64-bit windows
  * Fresh set of logs, closer to style generated by new scripts/testall.sh
  * Add procedure for resetting a switch to its default value.
  * Added forgotten doublequote, slightly nicer output
  * Replace unnecessary redefinition of core procedure onoff in mathml package.
  * test scripts:  generate diff file if csl and psl produce different results
  * Turn plot/turtle.red into a package of its own.
  * hack test file so as not to rely on a variable $reduce
  * fix a type that has been fixed in the .tst file
  * because comb now deliveres result in different order
  * filter out another timing report
  * remove more timing lines from logs before comparing, and clear status | grep ^Mredefmsg when comparing within main CSL scripts. Create xsl-times/y.time as well as .rlg
  * Scripts for test runs (test1.sh and testall.sh):  Write diff output to files and show only progress report  Print list of differing tests at end
  * Correction: forgot to remove debug statement
  * Allow specification of default values for switches, as
  * Add missing parens.
  * Try to get CSL and PSL floating point closer together in behaviour by altering CSL
  * set svn:eol-style property on shell scripts
  * record CPU time for tests via script/test1.sh in nicer way
  * Added gcref.
  * Initial check-in here. This is our latest CVS version modified to produce TGF instead of UDGi for uDrawGraph aka daVinci. UDG is still available via a switch "gcrefudg".
  * test both CSL and PSL versions
  * general update
  * put -fwhole-program in LDFLAGS after --with-lto
  * a start to making prep, unplus etc sane - but as yet the job is not finished
  * update on general grounds
  * it is ages since I last refreshed these files
  * Corrections for reset package:  - Default value of int switch was wrong  - Global variables were declared fluid  - an atom in inputbuflis!+ in symbolic mode caused a car of nil
  * give name reversip2 to existing 2 arg reversip
  * nicer code to list all combinations, but note ordering of output changed
  * use new reversip2 function in place of nconc(reversip a,b)
  * remove reduce of aconc to in way that should improve performance when many pattern-match rules are in play
  * add function reversip2 to combins nconc & reversip functionality
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1306 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1305 2bfe0521-f11c-4a00-b80e-6202646ff360
  * use errorp to avoid error if _temp_ does not exist, and err_catch_gcd has maybe always failed, but with glitch hidden by errorset. Hope new version is better
  * remove old socket-server option and tidy up to remove some gcc warning messages
  * provide --with-lto for those who wish to risk gcc link-time optimisation and -O3
  * whitespace
  * Prevent NullPointerException in cleanup code when startup is called with standAloneFlag=false.
  * fixes to make the version in new-embedded work again
  * minor typos etc
  * LOGB and LOG10 updates.
  * Correction...
  * remove temporary trace on resource-limit while testing
  * Always simplify log10 with arguments that are a power of 10.
  * Add numerical computation for log10 in mode complex-rounded;
  * Manual update: describe effect of switch PRECISE on EXPANDLOGS and COMBINELOGS.
  * improve behaviour with make -j (parallel make) I hope
  * Add simplification for log10 and logb.
  * further array initialisation to keep valgrind memcheck quiet
  * explicitly clear allmost all stack-allocated arrays just to be super-clean
  * fix typo wrt stack limit code
  * further fixes to stack limit checks
  * deal with getrlimit returning UNLIMITED
  * Attempt at further improvement at stack checking
  * revert a chance in preserve.c and use cross ocmpiler not gcc-3 under cygwin
  * put in some necessary parens. Apologies...
  * Add basic simplication rules for log10 and logb.
  * do not compress within image file, and update makefile wrt image as directory for csl.img
  * Attempt to get parallel make to work properly
  * Added clprl.
  * Initial check-in here. Compared to the latest CVS version form Passau I haved fixed issues with explode/compressin clprl_stapart and with (ab)using prog as a variable name.
  * Added test for mri.
  * Do load!-package using loadtime where possible.
  * Adapted test to new syntax.
  * Provide countall and count1 targets in Makefile if valgrind is installed
  * Removed debugging print statements.
  * Renamed typedef -> struct, assert -> declare to avoid misunderstandings.
  * Support for !*rlbrkcxk.
  * Renamed typedef -> struct, assert -> declare to avoid misunderstandings. Declares are now preceding the procedure definition. Experimentally checking also  addf, multf, negf. Support for !*rlbrkcxk. Comments.
  * Renamed typedef -> struct, assert -> declare to avoid misunderstandings.
  * Restructured cl_qevar, which was way too long. Support for rlaqe (experimental). Comments.
  * Copyright.
  * Support for rlaqe (experimental).
  * Copyright.
  * Support for rlaqe (experimental).
  * Support for !*rlbrkcxk. Support for rlaqe (experimental).
  * Support for !*rlbrkcxk.
  * Removed trailing whitespace.
  * Moved degree decreaser from ofsfqe to ofsfdecdeg. Support for !*rlbrkcxk.
  * Fixed bugs introduced with adding positivity conditions to the theory for variants of positive QE. Support for !*rlbrkcxk (in progress). Moved degree decreaser from ofsfqe to ofsfdecdeg.
  * Removed trailing whitespace.
  * Support for !*rlbrkcxk in ofsf_varlat.
  * Comments.
  * optimise detection of noncom items a bit
  * assoc message now guarded under DEBUG_ASSOC
  * Better hashed alglist\* support
  * lots of changes to avoid problems with hashed alglist\*
  * Fix a spelling mistake/typo in a comment
  * fix typo in Makefile.am
  * fix typo in Makefile.am
  * cpulimit=nnn and conslimit=nnn options in make testall and make test1
  * another correction re hash tables and bignums
  * fixes to hashing - eg +0.0 and -0.0 must hash the same
  * use hash tables for alglist* when on CSL to scale better for large calculations
  * test on Development Version outdated...
  * hash tables hash symbols based on memory address not pname chars
  * start to re-indent and clean up the code
  * new switch (off anygcd;) can prevent all attempts at GCD and for big cases saves costs from num-exponents
  * fixup a typo in previous revision
  * (enable-erroset min max) to get more refined control of backtraces
  * reduce stack use in heap validation code
  * reclaim-trap can force halt at given gc. Count byte stats in hundreds to delay overflow. Remove junk logging code from sysfwin.c
  * remove some use of NCONC in favour of code that is cleaner and probably faster
  * fix type re display with HOLD
  * slight compiler updates plus further attempt re stack overflow
  * reduce depth of recursion for SUBST etc and ensure result shared with input where possible
  * name substq clash resolved
  * put LOSE tag on substq if defined in base system
  * refine stack overflow checking reports
  * refine stack overflow checking reports
  * make ALT trump CTRL
  * Fix "Zero divisor" messages in integrator.
  * fix up typo in previous checkin
  * Try to improve makefile deps when somebody has multiple build in one file-space so generated-c is shared in the CSL world
  * fix some types
  * further work on config files mainly to help the Mac
  * newer snapshot of wxWidgets
  * more fixes to support Lion
  * syntax fix in configure script
  * bring foxtests configure up to date wrt MacOSX Lion
  * These patches fix bugs in the integrator in conjunction with algint.
  * cause make.sh to behave properly on a Mac
  * withdraw support for Mac prior to 10.6
  * try to detect Lion sdk on the Mac
  * only build systems relevant to current computer - I hope
  * MacOSX Lion now released
  * Correct printing of domain elements when switch pri is off.
  * use *hold not Hold to avoid clash with pm package
  * Modify expt rule for logb to not interfere with hephys simplification
  * an experimental 'hold' and 'unhold' capability plus flag 'prephold'
  * Add rules for simplification of log10/logb, as well as for their derivatives. (As the manual claims they are already known.)
  * put more quotes in configure scripts to protect file-name parts
  * filter out various odd chars from host descriptors
  * Added two more GWT .jar files to the classpath in compile.bat and compile.sh. The .jar files are needed to fix the validation-related errors that are currently being generated when the CAS is compiled into JavaScript. Also updated README to reflect this change.
  * move jlisp up a level and add jslisp
  * Add positivity conditions to the theory.
  * Build for PSL only on the current architecture.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1200 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1199 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1198 2bfe0521-f11c-4a00-b80e-6202646ff360
  * On the Mac set term to aqua if this exists.
  * Renamed fluid l to redfront_l!* in oblist().
  * fix re parens needed in expt(quotient...
  * improvements mostly to do with package and switch menus in the CSL version
  * fix bug relating to location program was installed
  * fix relating to BINDIR etc, esp for embedded version
  * correct some typos in comments in the Makefiles
  * arrange that numerical results are more consistent across platforms wrt x^(0.5) evaluation - gets linalg test logs to agree between linux & windows
  * re-simplify after you switch on revalp
  * provide an on/off revalp flag
  * update the test log file
  * update configure scripts
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1185 2bfe0521-f11c-4a00-b80e-6202646ff360
  * typical C correction: = vs. ==
  * make safe against rece in creation of text vd resizing it
  * fix to make this code more Linux (etc) friendly
  * make multi-line TeX a bit nicer in wxWidgets CSL case
  * movement towards wx branch using tex to render output
  * bug-fix wrt vertical movement in dvi file
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1178 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1177 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1176 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1175 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1174 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Use uname -m in favour of depricated arch. Pass instance names as strings.
  * move Jlisp into a package
  * remove reference to LSTAT_EMPTY_STRING_BUG
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1170 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1169 2bfe0521-f11c-4a00-b80e-6202646ff360
  * remove smacros for tmprint.red so that changes there are easier to make without wrecking things
  * vector-to-list needs def in PSL case
  * get Computer Modern metric in for that Reduce can use
  * table of character widths in CMR10 etc to encourage use of same
  * long comment by fancy-prin2* related to line breaking
  * Load redlog because there are smacros used.
  * Linebreak before return code for some Linux situations. Safer \verb formatting of uname and arch.
  * mainly jlisp/reduce.jar build with an old groebner/buchbg.red
  * Use ulimit -S because Linux would send SIGKILL rather than SIGXCPU when reaching the hard limit.
  * Initial check-in.
  * Pass absolute path as @cslbase when building
  * rlresolve was incompatible with the resolution of denominators.
  * more wx adjustment re maths display
  * make left to right evaluation order the default
  * resource-limit further improved to trap time too
  * minor fixes re resource-limit
  * put <throws ResourceException> almost everywhere so that resource-limit can do something
  * extras note re requirements for wxWidgets branch
  * wx variant pretends fancy maths display is present even though it is not yet - so I can work towards putting it there
  * Arrange that --without-gcc3 --enable-debug behaves the way I expected it to
  * first step at getting math display into wx version
  * move to a newer snapshot of wxWidgets so as not to get left too far behind
  * update BUIDLING to reflect 6 months of progress
  * make on/off fort switch off and restore fancy mode
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1144 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1143 2bfe0521-f11c-4a00-b80e-6202646ff360
  * correction re --with-cygwin and start to move to more standard install location support
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1141 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1140 2bfe0521-f11c-4a00-b80e-6202646ff360
  * typo in csl-sanity-check autoconf stuff that caused it to behave badly on some systems, eg Fedora
  * With luck this fixes aborts on testing EOF characters
  * further fixes re --with-cygwin build option in CSL case
  * corrections to messed up checkin wrt minireduce option
  * initial checkin
  * give option to create a minireduce
  * Install a full new set of log files run on an Intel i7 2600K
  * change order of evaluation of args to interprete duse of LIST to be properly sequential
  * initial checkin
  * make gensyms collect a name when printed rather than on creation
  * improve GETD a bit
  * All but cdiff and cali tests now appear OK
  * fixed to COMPRESS so that mathmlom.tst runs
  * Further fixes make more tests run successfully
  * now crack works - but see Bytecode.java for unimplemented byte ops
  * provide a test1 target to test one package, and make EQUAL exit eqrly when lists are EQ
  * run testall in lots of memory to be safe and fix things so it gets a lot further
  * make testall now supported, but gets stuck very early on
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1121 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fix an issue with errorset
  * Provide a minireduce with a 2MB .jar file rather then the 3.3MB full version
  * Provide a minireduce with a 2MB .jar file rather then the 3.3MB full version
  * make it easier to create a cut-down system
  * updare the README file
  * Explicit BSD license added to jlisp source files
  * jlisp/reduce.jar is now a current reduce (almost working) and jlisp.jar just a lisp
  * make the reported date be the date that the image file was created rather than leaving it stuck as 2008
  * I *believe* the lastest Reduce now at least mostly works. Please try it
  * correct type in an ifdef
  * withdraw most support for the patch-file update mechanism now all sources are public
  * spelling corrections in comments
  * move towards supporting sourceforge version - not working yet
  * new-embedded is a fresh attempt to make it easy to build small or custom varients of CSL/Reduce
  * update config files some more
  * update config files
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1104 2bfe0521-f11c-4a00-b80e-6202646ff360
  * experimental switch 'on acn' to test fiox re 'on list'
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1102 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1101 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1100 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1099 2bfe0521-f11c-4a00-b80e-6202646ff360
  * experimental change in cslbase/cslread.c to try to cope better with redefined functions
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1097 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1096 2bfe0521-f11c-4a00-b80e-6202646ff360
  * remove forcible definition of TEST
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1094 2bfe0521-f11c-4a00-b80e-6202646ff360
  * some progress wrt printing, at least under Windows
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1092 2bfe0521-f11c-4a00-b80e-6202646ff360
  * some menus, toolbar, status bar. Not fully plumbed in but present
  * further fixex re termination, plus scroll-window virtual size OK
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1089 2bfe0521-f11c-4a00-b80e-6202646ff360
  * cleaner termination of wx windows stuff
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1087 2bfe0521-f11c-4a00-b80e-6202646ff360
  * update descriptions etc
  * wxpsl starting to do things on Linux as well as win32
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1084 2bfe0521-f11c-4a00-b80e-6202646ff360
  * cleaner screen refresh in wxterminal, better IO in termed.c
  * avoid copying unnecessary files from font dircectories
  * get Mac keyboard handling better behaved
  * correction re name of variable holding the long file handle
  * Fixed noncommutative multiplication routines to avoid an infinite loop occuring under certain circumstances.
  * Removed redefinition of multf already present in physop.red
  * fix re flush_line_buffer
  * scrolling starts to work
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1075 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1074 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Include DejaVu fonts and keep working towards Unicode support
  * Windows version of wxpsl now starts to run PSL
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1071 2bfe0521-f11c-4a00-b80e-6202646ff360
  * conin$ needs r+ access rights. Plus more sketch code into wxpsl.cpp
  * first experimental checkin on a 100% non-working wxpsl.cpp
  * spacing for CJK characters now fixed
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1067 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Fixed path to awk file for slfq.
  * continued progress on extended character sets
  * wxterminal and hence wx version of fwindemo start to cope with unicode
  * termdemo can do unicode/utf expansion in ALT-x. See the file termed.c for commentary and explanation
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1062 2bfe0521-f11c-4a00-b80e-6202646ff360
  * open CONOUT$ in w+ mode
  * open CONOUT$ with GENERIC_READ access so cursour addressability works better
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1059 2bfe0521-f11c-4a00-b80e-6202646ff360
  * progress on CJK fonts, and restore an accidentally clobbered file
  * CJK fonts available to wxfontdemo
  * README file to go with fonts
  * Some CJK fonts I may wish to use
  * A slightly more general fix for the infinite loop problem with noxpnd d.
  * Fixed infinite loop with noxpnd d.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1052 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1051 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Very first interaction with Reduce via wxterminal code works. Hoorah
  * Updated installation hints.
  * Support environment variable RLMMA.
  * Improved the interfacing to QEPCAD and Mathematica for real qe.
  * Added service rlqesil.
  * "mat" was a bad variable name.
  * provide --with-gcc3 option to avoid use of i686-w64-mingw32. Incremental develoment of wxterminal.cpp & friends
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1043 2bfe0521-f11c-4a00-b80e-6202646ff360
  * merely fix a typo in a comment
  * wxterminal can now (sometimes) handle fwin_printf
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1040 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fwindemo depends on fonts in the wx case
  * only try -mno-cygwin etc under windows, and in that case warn if mingw cross not available
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1037 2bfe0521-f11c-4a00-b80e-6202646ff360
  * see lengthy comment in top-level configure.ac re --with-mingw64 and building 32-bit code on Windows properly
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1035 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1034 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1033 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1032 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1031 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1030 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1029 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1028 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1027 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1026 2bfe0521-f11c-4a00-b80e-6202646ff360
  * wxterminal now has a caret
  * can now insert characters, cope with tabs
  * Optionally use slfq in qepcad fallback QE.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1022 2bfe0521-f11c-4a00-b80e-6202646ff360
  * lots of unreconstructed non-working framework code into wxterminal.cpp
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1020 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Set symchar!* = t.
  * Support slfq. Better processing of qepcad/slfq output. Add random numbers to the names of the temporary files.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1017 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1016 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1015 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1014 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1013 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Continue qepcad computations in ofsf_fbqepcad() in case of qepcad failures.
  * Locally unset !*utf8. Fix a bug where prin2!* was called with a list, which does not work in CSL. Do not throw a rederr but use lprim in case of failure.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1010 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Divide formulas when using Qepcad as a fallback QE.
  * The psopfns created by rl_mkserv now use rtypepart as their rtypefn. Otherwise formulas ex(x,rlsimpl(x=0)) were not be recognized as logical anymore.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1007 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1006 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1005 2bfe0521-f11c-4a00-b80e-6202646ff360
  * correction to name to copy a readme file to
  * improve font coverage in wxterminal
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@1002 2bfe0521-f11c-4a00-b80e-6202646ff360
  * make LOG use varargs (correctly)
  * Note revision number 1000
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@999 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@998 2bfe0521-f11c-4a00-b80e-6202646ff360
  * improve termination when windowed app creates a new console to use
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@996 2bfe0521-f11c-4a00-b80e-6202646ff360
  * debugging wxterminal development
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@994 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@993 2bfe0521-f11c-4a00-b80e-6202646ff360
  * incremental changes to wxterminal.cpp
  * make safe-modular-reciprocal call itseld not just modular-reciprocal
  * wxterminal starts to accept characters. Use variadic macros for FWIN_LOG
  * correction to factoriser re treatment of division when modulus is a prime power but not a prime
  * add safe-modular-reciprocal
  * Set the application icon in contrast to the main window icon. Enable fullscreen also on the Mac in a safe way. There is still an artefact.
  * Work around a PySide/Qt bug with connecting the aboutToShow signal of the recentFileMenu.
  * Fixed missing call to superclass constructor in QtReduceComputation. Fixed access to a non-existent attribute computation.error in run().
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@984 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@983 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@982 2bfe0521-f11c-4a00-b80e-6202646ff360
  * QE based on ENF. Work in progress.
  * Support both the +N and the +L argument of QEPCAD.
  * Fixed a comment.
  * Fixed a typo.
  * Support for functions w/o arguments.
  * New option for forced compilation.
  * fwin apps now activate wxdvi to show that they can create  a window
  * get things so that --with-wx versions build, albeit only for console mode so far
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@973 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Optionally use qepcad as fallback qe. New rlqepcadcells for specifying the +N argument of qepcad.
  * Compatibility with QEPCAD B version 1.54.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@970 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@969 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fix location for log file to go to
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@967 2bfe0521-f11c-4a00-b80e-6202646ff360
  * log file location on mac
  * correction re location of default image directory
  * use appropriate (wx)fwin.h for wx builds
  * insert a necessary string quote
  * insert a necessary string quote
  * pass --host to sub-configures with view to get better consistency
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@960 2bfe0521-f11c-4a00-b80e-6202646ff360
  * try to normalise after config.guess inconsistent behaviour
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@958 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@957 2bfe0521-f11c-4a00-b80e-6202646ff360
  * update Makefile.in to match Makefile.am
  * put FWIN_LOG into fwin as well as wxfwin version. More subtle placement of image directory in wx/Mac case
  * do not use reduce.wxfonts directory with wx version and the Mac
  * remove semicolon in FWIN_DEBUG macro
  * wxfwin startup on the mac improved
  * fix to --without-gui configure option & dir to build things in
  * fixes re FWIN_LOG
  * fix a typo
  * Proper handling of TAB keys.
  * Removed accidentally checked in .DS_Store files.
  * Obsolete.
  * Various improvements including queued processing of computations.
  * one step towards getting the Mac system alive with fwindeo/wxWidgets
  * checkin of wxfwin.c so I can more easily test it on Mac and Linux
  * wxfwin.c and hence (wx)fwindemo.c build but without any windowed support
  * small updates to configuration files
  * improve behaviour of (rdf)/(rdf nil)
  * review autoconf & automake version requirements
  * Fixed two memory leaks.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@937 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@936 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@935 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fixes to Mac bundle creation
  * work on fwindemo.c still incomplete
  * Support for --args, lispargs* and full-lispargs*
  * restore accidentally clobbered version of Makefile
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@930 2bfe0521-f11c-4a00-b80e-6202646ff360
  * update all config files just to be certain they are all consistent
  * starting work on wxfwin/wxterminbal replacement for FOX-based stuff
  * Brackets!
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@926 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@925 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@924 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@923 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Some work on Selection. Working on paint event for brackets.
  * now allows screen resize and adjusts display to suit. tested on Windows, Linux and Mac\!
  * correct the license statement
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@919 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@918 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@917 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@916 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@915 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@914 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@913 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@912 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@911 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@910 2bfe0521-f11c-4a00-b80e-6202646ff360
  * better treatment of screen resolution in wxdvi
  * get wxdvi to work on the Mac as well as Windows
  * ha ha ha - wxdvi working quite nicely now
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@906 2bfe0521-f11c-4a00-b80e-6202646ff360
  * better example in wxdvi and fonts etc mostly working. spacing still dodgy
  * wxdvi now starts to display dvi. No font selection or size control yet
  * scan dvi data on every repaint
  * fix unix re const char and windows re font emumeration flag
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@901 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@900 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@899 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@898 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@897 2bfe0521-f11c-4a00-b80e-6202646ff360
  * bring wxdvi.cpp up to date wrt wxfont.cpp. Put const in cmfont-widths
  * get wxfontdemo to run under 64-bit windows, eg by -static linking it
  * now wxfontdemo can get keyboard events
  * update test code to reflect new font names
  * change TeX fonts eg cmr10 to csl-cmr10 to avoid any possible confusion
  * change TeX fonts eg cmr10 to csl-cmr10 to avoid any possible confusion
  * make adjusted versions of the BaKoMa fonts
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@889 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@888 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@887 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@886 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@885 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@884 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@883 2bfe0521-f11c-4a00-b80e-6202646ff360
  * use wxWidgets in Unicode mode after all
  * widths of various Tex fonts
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@880 2bfe0521-f11c-4a00-b80e-6202646ff360
  * make these work under X11
  * Fixed font issues apparent only on Linux (missing conversion to int of some QSettings).
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@877 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@876 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@875 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@874 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Improved Raw Model View access.
  * Use a mutex in class Reduce.
  * Load and Save.
  * a start at wxdvi, a dvi renderer using wxWidgets
  * Major rewrite using MVC. Some files are obsolete but not yet removed.
  * continued work on wxfontdemo
  * continued work on wxfontdemo
  * provide local fonts for Macintosh application bundle
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@865 2bfe0521-f11c-4a00-b80e-6202646ff360
  * add local fonts under X11
  * fixes re FOX and WX and Xft etc
  * let it compile under X11
  * no unicode, but possibly debug for wxWidgets
  * wxfontdemo much improved on Windows
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@859 2bfe0521-f11c-4a00-b80e-6202646ff360
  * finding application dircetory now OK on Linux
  * start more serious development on wxfontdemo.cpp
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@856 2bfe0521-f11c-4a00-b80e-6202646ff360
  * the free-to-redistribute BaKoMa truetype TeX fonts
  * Mac resource fork stuff
  * minor changes
  * work on Mac config options
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@851 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@850 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@849 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@848 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@847 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@846 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@845 2bfe0521-f11c-4a00-b80e-6202646ff360
  * correct detection of MacOSX for wx build
  * put back amd64-cross as a regular file not a symbolic link
  * trying to tidy up amd64-cross
  * check in amd64-cross as a regular file not a symbolic link
  * temporarily delete amd64-cross, which clashed with AMD64-cross
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@839 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@838 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@837 2bfe0521-f11c-4a00-b80e-6202646ff360
  * initial checking of wxfwin.c
  * --with-wx=builtin handled better
  * more support for experimental start at use of wxWidgets
  * change for private reasons
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@832 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fix to previous checkin
  * further refinement to config scripts re mingw64 & future wxWidgets use
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@829 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@828 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@827 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@826 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@825 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@824 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@823 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@822 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@821 2bfe0521-f11c-4a00-b80e-6202646ff360
  * preparation for an experiment using wxWidgets for the GUI rather than FOX
  * Fixed domain name.
  * Determine locale.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@817 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Use parent() method instead of class variable.
  * Implemented "Recent Files" menu.
  * Minor fixes and tuning.
  * Save location within preferences in QSettings.
  * Minor fixes.
  * Use QSettings to save and keep track of preferences and settings.
  * ... and an absolute path to the localization file.
  * Absolute path to windowIcon.
  * Make DejaVu Sans the default if present, and filter out the lethal fonts on the Mac for now.
  * Insisting on exectMatch kicked all fonts on Ubuntu.
  * Working ...
  * Toolbar and many fixes.
  * Minor fixes.
  * Improvements in window titles.
  * Localization.
  * Readded "Untitled" and a trailing slash in the initialization.
  * Doing window titles the Qt way.
  * No explicit font size in status bar for now.
  * Renamed class Reduce to QtReduce and extracted a new class Reduce from it.
  * Logging.
  * Temporary patch to make it work with the current transition version.
  * Created new classes for ReduceBlockFormat.
  * Look and Feel, Menus, ...
  * Added Quit to the File Menu. Minor formatting corrections. Commented out some debugging output.
  * Working on Preferences. Hopefully stable.
  * update of documentation
  * update of documentation
  * update of documentation
  * Improved meminfo().
  * fix typo in configure.ac
  * fix a typo in my latest fix that wrecked PSL building
  * prevent people configuring CSL and PSL versions at the same time
  * Splitted initialization of worksheet. Moved Reduce specific initialization to Reduce class. Changed behaviour of stats bar.
  * Renamed signals. Fixed readOnly bug. Fixed cursor position after computation.
  * Some basic information.
  * Abortion of computations.
  * improved script (newdist.sh) for making a full distribution snapshot
  * re-profile & update C code
  * Minor tweaks.
  * Better initialization and signals.
  * - created an own class for the menu bar - changed menu bar signals to new style scheme
  * Turned colors into class variables and capitalized to indicate constants.
  * Fixed saveAs dialog.
  * Straightify is constructive and 20 times faster now. Some fixes in printing SLPs.
  * Encapsulated the external straight line variables in this module.
  * Optional experimental dynamic mode and some bug fixes discovered when implementing this.
  * No assertions.
  * Started support for straight line programs and externals.
  * Started support for straight line programs and externals.
  * change to csl/configure.ac needed by file layout adjustment
  * Added (c) Zengler to About.
  * Replaced endsWith (Qt) with endswith (Python). Baustelle in saveAs.
  * Experimenting with QReduceBlockUserData.
  * Added  touch of red/bootstrap.img in case it is not freshly made.
  * Add a first release of the cdiff package
  * trying userData.
  * Added an own class for reduce computations
  * Reorganizing the code wrt. OO. Work in progress but working currently.
  * fix treatment of image files in cross-compilation case
  * Get cross compilation better sorted out
  * add a README file
  * Removed references to QtCore.QString.
  * Measurements relating to CSL performance as options are changed
  * Initial check-in. This version uses API 1, which is the next thing to change.
  * Rename some things in the CSL compiler to remove name-clashes with elsewhere
  * minor changes to recompile facility
  * Add a make recompile option. See mailing list archive for commentary
  * add smacros0.red file
  * fix typos in comments
  * Further adjustments re 64-bit windows building
  * Many more things can now be smacros, for possihble speed gain
  * Support make test1 which=modulename
  * A variety of fixes so now I can once again build using MinGW64 (for 64-bit windows). Nothing very exciting really.
  * Fix glitches that prevented compilation in 64-bit worlds
  * foxtests directory now configures better for mingw64 64-bit windows build
  * get fontdemo & showmathdemo to work under 64-bit windows
  * increase absolute memory limit on 64-bit machines to 512G
  * Implement special fkernfn for Taylor kernels.
  * New subdirectory "contrib". First piece: contrib/exptsimp
  * Change behaviour of BOUNDP, perhaps to agree better with PSL
  * mend bug relating to explicit request for > 4G of memory
  * trying to fix bugs wrt huge memory calculations
  * Provide a function to force copying vs sliding garbage collection
  * allow heav validation in DEBUG mode to survive 64-bit world
  * fix re padding strings with zero at end
  * All tests now seem to run with smacros as generated by this
  * Added a fluid declaration in the definition of oblist() for PSL.
  * Check !*nat switch in utf8_exptpri.
  * Do not test dcfsf at this stage.
  * Support assertions.
  * Commented the code.
  * Some bug fixes.
  * Use stat functions instead of a macro.
  * Switch assertcheck does not exist anymore.
  * correct the termination of a comment
  * fixups to embedded system wrt IO handles etc
  * add get-definitions.red
  * correction re integer-decode-float 0.0
  * make decode-float hand back a list
  * keep in step with main version
  * correction to RATIONAL function so that (rational <float>) works OK
  * fix re log2 function
  * provide integer-decode-float and some friends
  * Removed generated class files. Set svn:eol-style for text files to native.
  * keep in step with embedded directory
  * Adjust Makefile so it can build reduce.img. Related fixes
  * Add escape so that procedural model can do EVAL
  * add embedcsl.c, keep up to date with embedded code
  * add embedcsl.c, fix errors in driver.c
  * fixup for procedural interface to embedded version
  * testing mode via Makefile.proc
  * testing mode via Makefile.proc
  * Do not dynamically check assertions.
  * Added assertions.
  * sync main and embedded versions
  * experimental RPN interface as per proc.h
  * flush stdout before asking for input
  * Updated reference log file.
  * Improved statistics (sum line).
  * Initial check-in.
  * Bugfix in error message on result.
  * Reference log for assert.
  * New package assert.
  * Fixes that will make use of many more smacros work better
  * add support for (IF a b c) as well as (COND (a b) (t c))
  * permit a smacro after FUNCTION since I want some things to be botha  real procedure AND an smacro
  * avoid use of gensyms when expanding for loop so that expansion is always exactly the same
  * rename difflist which was a name-clash with elsewhere
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@688 2bfe0521-f11c-4a00-b80e-6202646ff360
  * place to put smacros... at present all commented out
  * Many CSL changes to get much more compiled into C for speed and fix bugs found along the way
  * Initial checkin of unmaintained old code
  * make COPY TEXT copy fancy maths as TeX-like stuff
  * Provide a 'Copy Text' command
  * Fixes so that CSL can compile more stuff into C
  * Fixes so that CSL can compile more stuff into C
  * rename m1 to pm_m1 to avoid clash with cvit
  * to reflect name change jacobian -> mat_jacobian
  * Rename procedures k and jacobian to avoid clashed with other packages
  * having a procedure named delta kills the cantens package - so rename it here
  * Fixed wrong exponent in a product of functions in case the function is orderd ahead of expt. E.g. on combineexpt; b(x)*b(x)**p; gave an erroneous result.
  * Correction re printing strings with a double-quote within them
  * comment re string that has an embedded newline
  * change printing of strings with tabs and newlines within them
  * fix related to exit_reason on 64-bit machines
  * Many changes mainly to make compilation from Lisp into C more robust
  * increase maximum potential heap size on 64-bit machines
  * correction re %< format not using up an argument
  * more conservative decison re GC type
  * correction to my_free when > 2G memory allocated at the start
  * provide a test_package command
  * report memory size in Kbytes not bytes if -v is specified
  * move towards being able to compile many more things into C
  * adjust to work for win64 with tdm-gcc.tdragon.net compiler
  * adjust to work for win64 with tdm-gcc.tdragon.net compiler
  * bug fixes wrt improvements to symbol table hash management to cope with huge numbers of symbols
  * add a *full-oblist flag as per comments
  * change hash table size limits and growth strategt for oblist
  * Do load!-package for ofsf in addition to rl_set for loading smacros at compiletime.
  * update to show new ABS that resulted from change in treatment of ON PRECISE
  * change the string NOT FOUND to symbol not_found
  * avoid re-allocating stack segment on a restart
  * support a testslow target
  * Give allocate_page an arg to help debugging
  * do not even try to build native code
  * introduce a debug-print function to help me debug stuff
  * merely change date
  * make EQUAL string literals share
  * when comparing strings do not compare any padder word
  * when comparing strings do not compare any padder word
  * make -g option force backtrace even more unconditionally
  * correct code that pads strings with zero bytes when loaded
  * slightly more elaborate diagnostic from bad setq
  * Fancy printing for dcfsf derivative as a prime. Declared !*nat fluid.
  * cgb is compiled (immediately) after redlog now, because it used smacros defined in redlog.red. Note that it must be compiled before the domains acfsf, ofsf, etc.
  * Load redlog (at compiletime) for smacros.
  * Changed one pasf_op into car. Still dirty ...
  * Smacros for constructors and access functions.
  * Smacros for constructors and access functions.
  * Smacros for constructors and access functions.
  * Moved cartprod from clbnf to lto.
  * support make testslow better
  * Added tst and rlg for qqe_ofsf.
  * Fixed number of arguments in qqe_ofsf_qe(). Removed some algebraic operator declarations. Set !*msg=nil for newtok().
  * Added blackbox rl_betterp!* = cl_betterp for cl_qevar.
  * Added approximate factorisation example.
  * Fixed printing with "on fancy;".
  * Removed header. Do not use "***" (lpdotimes).
  * The hopefully appropriate norms. Aboid the use of lpdotimes in both input and output.
  * Removed header and "load_package redlog;".
  * Cleaning up test files. Added ofsf and pasf. Cut down ibalp.
  * more issues about what may be compile dinto C without hurting the bootstrap
  * make module-to-file protected
  * yet another update to profile.dat
  * fix a typo
  * avoid csl/embedded/*.o files
  * make status | grep ^Mutf8 fluid before trying to use it
  * Use sigaltstack if possible. Move to 60 not 12 files for generated C code
  * prevent line-break in printf output using new escape %<
  * flag putc as LOSE to cope with conflict in rlisp/rsupport.red
  * use stdint.h rather than guessing re intptr_t
  * yet another attempt at profile.dat
  * add reference log for ibalp
  * d ist not infix anymore.
  * Misspelled fluid.
  * new profile.dat based on running profile 14 May 2010
  * include even today's redlog changes
  * new profile.dat based on running profile 14 May 2010
  * Added pasf_enf and pasf_1equation. The latter will disappear. Done a lot of commenting and several bugfixes. The entire original qe is baustelle and will be based on pasf_enf soon.
  * Resolved a problem with deeply nested (bound) formulas, which caused deep recursions in cl_simpl. This had been reported by David Monniaux. Implemented pasf_ssmk2 for this. Also did a lot of code formatting.
  * Trailing whitespace.
  * Added rl_depth!*.
  * Added some functions and AM interfaces.
  * Trailing whitespace.
  * Added rldepth/cl_depth.
  * Fixed a bug reported by David Monniaux.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@600 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@599 2bfe0521-f11c-4a00-b80e-6202646ff360
  * fix re bad use of free in fwin.c, messy shift in restart.c
  * fix bug re detection of stdint.h and calculation of sizeof(int) etc
  * Bring embedded version up to date
  * Improvements and bugfix in dcfsf_plugtheo.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@594 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@593 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@592 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@591 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@590 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@589 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@588 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@587 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@586 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@585 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Allow for symbolic links to the startup scripts
  * Attempt to fix bug relating to junk chars at end of startup banner
  * abother few fixes relating to word-length conversion
  * further fix re conversion of 32 bit image to 64 bits
  * remove some debugging print statements
  * The changes here SHOULD make 32 and 64-bit and the two byte orders all interchangable in image files
  * with luck all conversions re word length and byte order are now functional
  * remove some debugging code that had been in on a temporary basis
  * allow for case when converting 32 to 64 bit image and codevec uses over 32 bits
  * minor adjustment to layout and comments
  * fixes so 32-bit executable can load 64-bit image from other byte ordering
  * Add the old Reduce Lessons
  * make fancy display of symbols with odd chars in better and cause some diagnostics to appear in that mode
  * better treatment on strings in tmprint.red
  * support \textbackslash etc
  * Added ex2 and rlex2.
  * Bugfix: ofsf_gsd must not use positive simplification due to implicit negation.
  * fuller support for running the --without-fox variant
  * get rid of compiler warning re r0,r1 etc in resource_limit
  * further correction to --without-fox handling
  * correct to --without-fox handling
  * It should now be possible to ./configure --with-csl --without-fox to get a non-GUI version
  * Flag << as GO so that <<;;;>> becomes legal syntax
  * Allow a 32-bit system to reaload from aq 64-bit image file. You may need to recreata all your image files
  * elaborate a comment relating to Solaris support
  * partial support for user-defined fexprs
  * partial support for user-defined fexprs
  * remove archaic comment re Macintosh support
  * update version number
  * remove the concept of registration of the product
  * partial support for user-defined fexprs
  * tidy up readme files etc
  * tidy up readme files etc
  * An old file, now no longer wanted
  * Switch off lpdocoeffnorm by default. Migrated parts of the code from AM to SM. Fixed a bug with a non-parametric epsilon.
  * cmex10.ttf MUST be executable in a windows world
  * make csl-sanity-check.sh work better under windows
  * Improved smart simplifiaction for dcfsf.
  * Temporarily added modulep for 32 bit PSL.
  * Print d operator for redlog differential qe as prime.
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@544 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@543 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@542 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Change rounding in mid-way case of gidivide:
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@540 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@539 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@538 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@537 2bfe0521-f11c-4a00-b80e-6202646ff360
  * Put meminfo() here for the time being.
  * Switch off cgbverbose by default.
  * Use modulep instead of filestatus also in PSL.
  * Update autoconf stuff, make Mac ppc, i386 and x86_64
  * Update autoconf stuff, make Mac ppc, i386 and x86_64
  * Total degree for the AM.
  * Linebreak after verbose output was missing.
  * - added distinction between PQSAT and PSAT - fixed some minor bugs in PSAT
  * Use isqrt in sfto_sqrtf, since fix(sqrt()) could cause a FLOAT overflow.
  * - introduced a new local search algorithm for PQSAT - introduced a new branching strategy for free variables in PQSAT - added some additional logging and statistics in verbose mode - fixed some typos in comments
  * Support (pseudo-)threading.
  * support OSX10.6 better
  * Added KEY BINDINGS and TAB COMPLETION.
  * Update to fix problem defining an object flagged LOSE
  * 64 bit Ubuntu requires -fPIC for linking with libpython, and this appears to do not harm on Snow-Leo.
  * Autoconf support for Python.
  * Added support for Python.
  * Bugfix.
  * Avioid trying to install gnuplot files unless on windows
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@517 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@516 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@515 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@514 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@513 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@512 2bfe0521-f11c-4a00-b80e-6202646ff360
  * git-svn-id: https://svn.code.sf.net/p/reduce-algebra/code/trunk@511 2bfe0521-f11c-4a00-b80e-6202646ff360
  * remove reliance on def_shell_mode and friends
  * More PSL
  * Initial check-in of AMD64 obtained from WN.
  * precedence error in compiler.red led to bug
  * On ubuntu basename yielded a pointer into its argument such that the free came too early. This is a really careful version of det_dist now, which hopefully works everywhere.
  * Fixed PSL amd64 problem by explicitly compiling oblist.
  * fix fluid status of input-libraries and output-library
  * Changed the overall directory structure. There is a single binary for both CSL and PSL now. Added completion for packages and modules. There is a known big that redfront_send_switches will nor work on PSL amd64.
  * fix a spelling mistake in a comment
  * Smarter memory management: check for psl/64.
  * 2D printing of matrices and the integral sign.
  * Introduced 'mat!-mid!-l and 'mat!-mid!-r as symbols for printing matrices. Previously 'math!-low!-* had been used, which was obviously a quick hack for stopping using 'vbar. The behaviour of the core Reduce is unchanged but I can use the new symbols as a hook in utf8.
  * Did a lot for the completion. This is Version 3.1 now.
  * Started restructuring cl_qe1 and used new syntax (formsetq).
  * Tangent half-angle formula.
  * Push and Pop.
  * Solid bars in fractions.
  * Moved the HP disclaimer to the root. Created trunk/psl/dist/distrib and put two files obtained from WN in there, viz. psl-names.bat and mkbare.bat.
  * Created the trunk/psl/bin sub-hierarchy and put one file obtained from WN in there, viz. bin/win32/bare-psl.bat.
  * Set eol-style to native.
  * Initial check-in of files obtained from WN.
  * Updated date.
  * Merged from a different branchthe option to pass after "--" options to be passed directly to CSL-Reduce/bpsl.
  * Support readline5 a little bit.
  * Considerably improved filename completion.
  * On OSX build non-universal by default and thus use my local libedit.
  * Some function names in function calls had not been renamed yet.
  * Initial check-in of PSL binary files obtained from WN. This should be suffiecient for compiling PSL for win32.
  * Created dist/kernel and moved win32 there. That is there was an intermediate directory level missing.
  * Intiial check-in of the files obtained by Winfried. There are some binaries among them, which should not be deleted at present. I did my best to repair CRLF on all files and to set svn:eol-native appropriately.
  * I think CSL had some problems digesting a while loop in formsetq1 at bootstrapping. Also the literal resu was a bug.
  * set svn:eol-style native on all .txt files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * set svn:eol-style native on all .tst and .rlg files
  * Initial check-in.
  * correct typo in stuff that copies gnuplot into place
  * sqrt((1+a)^2) returns now abs(1+a). This was a regression. Additonally the switch precise_complex is added, which causes to leave expressions like sqrt(b*(1+a)^2) unchanged, which is all one can do when a,b are general complex-valued variables.
  * With the switch precise_complex turned on,sign(x^2) is now returned unchanged.
  * Fixed "***** unknown callback mode: (16 0 0 0)" in redpslw.
  * There was "q;" instead of "q" used on CTRL-D for exiting the PSL break loop.
  * Use .com instead of .exe for CSL.
  * Temporary workaround for building on Windows.
  * Bugfix avoiding setminus on a branch condition that is true.
  * Implemented improved LSCOLOR-like color specification.
  * Major revision.
  * Switch to newer version of libedit.
  * Fix an issue when gnuplot in needed from a version fetched using svn
  * install a fresh and up to date set of reference log files
  * fix a number of problems with this script
  * put some debugging print statements in
  * put some debugging print statements in
  * do not mention image width unless it is changing
  * initial incomplete steps towards loading heap images across word-size
  * Bump linelength to 32 bit max to avoid linebreaks with PSL. Make redefs silent.
  * Added evalf and evalnum.
  * Fix for a let rule communicated by Winfried.
  * Implemented asignments like {one,two} := {1,2} for the symbolic mode. Consed pairs work as well. Code is by Winfried.
  * Dynamically check for 64 bit with Darwin (in the style of and copied from SGI).
  * guardian package added
  * correct display for kappa. Make bakoma-fix only apply to cmsy and cmmi
  * character code 14 in Bakoma Truetype fonts seems to be at 0x2219
  * Added customization reduce-indent-line-conservative. declared  which-func-mode, which-func-format, and imenu-space-replacement before their first use. Disable highlighting of procedure names in comments for now. Extended initialization code for reduce-font-lock-level to handle the case that font-lock-maximum-decoration is an alist. Locally initialize font-lock-maximum-decoration to 4 overriding the user's choice for now since there appears to be an issue.
  * Fix so that --texmacs option does not cause warning message
  * just fix a typo in a comment
  * provide some --help information
  * Initial check-in. This initial version of reduce-mode.el is identical to $Id: reduce-mode.el,v 1.36 2001-08-13 20:43:30+01 fjw Exp $ obtained from http://centaur.maths.qmul.ac.uk/Emacs/REDUCE_IDE/files/reduce-mode.el
  * Uncommented hashing in lto_setequalq and added added a switch. The version before was buggy because it did not check for equal lengths.
  * corrected a bug in ibalp_var!-mkid
  * But #ifdefs for signals that do not exist everywhere.
  * Added an extra path over the folded powers to convert negative exponents to reciprocals. The problem before was that e.g. 1/a did yield ((((a . -1) . 1)) . 1).
  * Set empty date in guardian.tex and fixed some minor things in guardian.txt.
  * Derived guardian.tex from CVS Revision 1.1 of the MIP/ISSAC 97 Paper.
  * Set the Id keyword.
  * Added package Guardian. Compared to the latest CVS version, I split it into three files reflecting the module structure and fixed a bug in a call to gdmkguarded where there was "<>" used instead of "neq".
  * lto_setequalq (used for ibalpqsat) does hashing.
  * Correctly handle truth values in the input formula. Efficient procedures for checking for list length 1. Optimized repeated nconc in ibalp_unitprop. Mostly rewritten ibalp_readform. Bugfix: variables in DIMACS files are converted to identifiers now.
  * Fixed incorrect uses of member for cyclic forms. Handle truth values as input for ibalp_qsat. Implemented correct test for CNF. The code works with both vectors and lists in both PSL and CSL. It is fixed to lists for both Lisps.
  * Changed exptchk to only use kernels which are not flagged noncom. Without this noncom x; on combineexpt; x 1**2*x 2*x 1;fails.
  * a script to use the nsis installer. contributed by Jim Michaels
  * XIM related patch for compsed character input
  * initial checkin
  * fix bad capitalisation
  * fix bad capitalisation
  * misc updates and use --with-xim for FOX
  * Merge changes from FOX 1.6.36 back into this version
  * check for Snow Leopard SDK
  * check for Snow Leopard SDK
  * check for Snow Leopard SDK
  * attempt to detect Snow Leopard SDK
  * Fix re NET_WM_PING
  * Bugfix: truth values were not considered in procedure cl_subvarsubstat.
  * make wedge symbol from excalc a symbolic name not a raw character code
  * make fancy display more robust against excalc oddity
  * Added service rlposresolve. Implemented special resolve for min, max, abs as a preprocessing step in OFSF. Generalized ofsf_posqe!-prep to ofsf_posprep.
  * Preserve type during mri_simplat1.
  * Renamed sfto_varf to sfto_idvarf and introduced new sfto_varf, which also returns composite kernels.
  * Bugfix: Fancy printing could fail for formulas in assignments.
  * let a single (-) on command line indicate terminal input
  * let a single (-) on command line indicate terminal input
  * Admit abs in differential polynomials. This is possibly returned by rlqea due to shifts.
  * Use lto_setminus instead of setminus.
  * Use lto_setminus instead of setminus.
  * ensure that files fwin and termed get eg the -g debug option when compiled if that is wanted
  * initial checkin
  * double length of terminal input buffer to 500+
  * remove some LGPL mess, open console if -w mode and none present
  * changed so that CSL is happy with several reduce files on command line
  * allow CSL when used as Lisp to read several input files if given on command line
  * remove scheme that caused run scripts to update themselves on first use
  * remove scheme that caused run scripts to update themselves on first use
  * fix a typo in the non-fwin case
  * remove defunct support for a restricted demo version
  * add a new section to help people make an embedded version
  * switch off the native code option
  * This version let me build tolerably cleanly on Solaris
  * more removal of bash-isms from scripts
  * remove (or at least reduce) bash-isms in scripts
  * configure updates to help with Solaris
  * remove LGPLMANIFEST
  * check for Xrandr
  * remove -I m4 from Makefile.am
  * remove -I m4 from Makefile.am
  * initial checkin
  * more deletion of libtool-related files
  * more deletion of libtool-related files
  * remove use of libtool, which had given me portability problems
  * fix a typo
  * ACN special
  * ACN special
  * used by ACN for his private testing
  * fix libtool detection code
  * fixes re libtool detection
  * fix typo
  * Added test file for redlog/ibalp.
  * Prepared introduction of vectors. Fixed a minor bug with a missing cdr in ibalp_qsat!-mom. Use lto_setequalq in ibalp_readclause.
  * Added lto_setequalq.
  * Support $. Guard some PSL stuff via preprocessor.
  * New switches utf8expall and utf8pad.
  * Use redcsl instead of reduce, which does not exist anymore.
  * Support for pipes.
  * Admit more characters in output (utf8) and prune leading and trailing newlines. More carefully distinguish char vs. unsigned char.
  * Support pipes. Handle SIGCHLD more carefully.
  * Added mma an interface to Mathematica's "Reduce" function for real qe.
  * Added test file for lpdo.
  * New package lpdo for linear partial differential operators and their (approximate) factorization. Under development.
  * The dot for multiplication was not the correct one. Added support for lpdo.
  * Support for simultaneous compilation "-csl -psl".
  * Bugfix: missing semicolon.
  * Better instructions.
  * Correctly treat symbolic links for (un)install. Avoid redundant building with install.
  * Removed some old code.
  * Fixed tyo for PSL, which could not count UTF characters properly.
  * Bugfixes: Congruences were not solved correctly when expanding bounds. The smart simplification possibly introduced atomic formulas that got factorized during initial simplification, which broke the syntax of SUSIPRG. I have introduced !*rlsifac as a workaround.
  * fix type in a couple of scripts
  * do not even look for glibtoolize
  * remove whitespace in case pattern
  * Try to make configuration survive Mac non-GNU program called libtool
  * initial check-in
  * updates to configure that should not cause any real change
  * update signature records to show modification date
  * update signature records to show modification date
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * yet further attempt at getting autoconf etc safe
  * Suppressed false warnings during compilation. Introduced switch rlpcprintall. Bugfix: check rl_cid!* in ibalp_priequal. Print even nicer.
  * Fixed a bug in ibalp_varsel.
  * preserve workiing directory
  * more care to specify required versions in autoxxx files
  * typo in reautogen.sh
  * typo in reautogen.sh
  * if libtool is out of date touch aclocal.m4 etc
  * fix typos in sanity check script
  * check libtool version
  * make correction to call to find
  * be more carefull about insisting on autoconf 2.61
  * If a computer does not have a new enough autoconf just stamp the files
  * change way that reautogening is done to avoid trouble when configure file updates itself
  * newer autoconf stuff to try to make it regenerate itself better
  * tidy up lgplfiles stuff
  * fixed autoconf files
  * AC_SERACH_LIBS not AC_CHECK_LIBS
  * document, or at least explain, recent changes
  * look for fallback case if no exact OS match is available
  * fix test syntax
  * provide a '--short' option
  * detect snowleopard and provide a 'short' option
  * Do not compile rd for now.
  * Commented out doubly defined procedure w/o changing the semantics.
  * Do not unnecessarily define operators. And carfully supress some warning during compilation.
  * There was a fluid declaration missing for breaklevel!*.
  * Added rd script for compilation and support for this.
  * check for libXrandr
  * update MANIFEST to reflect recently added files
  * use AC_LINK_IFELSE not AC_COMPILE_IFELSE to check for -m32 etc
  * Reduce memory request on 64-bit systems to allow builds on smaller computers
  * use AC_LINK_IFELSE not AC_COMPILE_IFELSE to check for -m32
  * further Solaris tuning library
  * further Solaris tuning wrt curses library
  * further Solaris tuning wrt curses library
  * to make test script survive solaris a bit better
  * to make test script survive solaris a bit better
  * to make test script survive solaris a bit better
  * update to survive freeBSD
  * update to survive freeBSD
  * try to put libtool stuff in csl/m4
  * upgrade unix CSL sanity test script
  * make sanity check work at least on ubuntu
  * initial checkin
  * add target to test if CSL version is liabel to build
  * more thorough testing of Windows prerequisites
  * remove older and hence unwanted version of libedit
  * code to test system configuration in csl directory
  * autogen.sh does autoreconf in csl directory for test code there
  * tiny and raw windowed test program for use as sanity check
  * improve test re Xft
  * start at a configuration script just to check build context suitability
  * fix up runpsl.sh to be noisy if no binary found
  * fix up run.sh to be noisy if no binary found
  * fix archive name for make save on unix
  * fix archive name for make save on unix
  * ignore SIGPIPE exceptions
  * upgrade the save target in Makefile.am
  * Added install and uninstall targets.
  * Created reddeb for debugging output. Did some systematic renaming.
  * Created reddeb for debugging output. Did some systematic renaming. Worked on signal handling.
  * fix display of very tall open braces
  * fix char codes for single-height braces
  * fix char codes for single-height braces
  * Bugfix: Use maprin instead of prin2!* in utf8_priabs.
  * Some utf8 support for pasf and bounded quantifiers. Smart prining of bounds.
  * fix tab in a call to sed
  * fix scripts/dist.sh
  * fix re amd64 vs x86_64 that will help on FreeBSD
  * adjust banners when system starts up
  * fix a couple of typos
  * Encapsulated printing of debugging messages in a function.
  * With SIGINT wait for the literal CSL string instead of playing games with non-blocking read().
  * Unicode copyright with -u.
  * Fixed missing $ after Id tag.
  * Source editrc and bump the version to 3.0.
  * C-c is working now for CSL REDUCE. Added "bind" on [f2] as help.
  * Worked around a bug with long integers that are split into digits.
  * Use libedit directly in contrast to editline wrapper. Considerably improved signal handling and color management.
  * more fixes re psl launch scripts
  * add redpslw and redpslw-s
  * remove a verbose debugging aid and give ln the -f option
  * fixups to BINARY-LICENSE and mended config files
  * restore README when refreshing the bin directory
  * make runcsl update the source script in bin
  * include xxx-s versions too and a README
  * create xxx-s versions too
  * add license files to documentation directory
  * add license files to documentation directory
  * add alert to depracated scripts
  * non-cached but maybe starting to work
  * non-cached but maybe starting to work
  * cope with rename from reduce to redcsl
  * cope with .exe as well as .com files
  * move towards proper un scripts for PSL
  * reduce -> redcsl and redpsl
  * remove a spurious echh that had been useful while debugging
  * change name from eg reduce.csl to redcsl
  * arrange to be able to reset PSL scripts
  * fix up PSL batch files
  * fix to pass image file
  * windows script to launch PSL Reduce on win32
  * windows script to launch PSL Reduce on win32
  * add more scripts
  * reduce.psl NOT WORKING YET
  * start to move towards having bin/reduce.psl and bin/reduce.csl
  * restore inclusion of gnuplot binary in windows version
  * add gnuplot stuff again
  * Added option "-c" for choosing colors.
  * Made verbose banner output less talkative but yet more informative.
  * Improved options and help messages. On Windows use static linking by default.
  * Missing "test".
  * Do not set rpath for Windows and Darwin.
  * Include string.h instead of strings.h. According to the autoconf manual this conforms ANSI C89 (ISO C90).
  * Added -rpath for the local libedit. This is necessary at least on fc5.
  * Fixed Makefiles.
  * Build using local editline except for universal binaries on Apple.
  * New version. I am going to use this one for redlog. I have got it from http://www.thrysoee.dk/editline/
  * On the way to using libedit. Known Problems: prompt/input coloring (disabled for now), signal handling. History files for readline and edit are incompatible.
  * Banner message. Package name etc. now via AC_INIT. Fixed and moved the test for EXEEXT.
  * Fixed some bugs (test with "==") in configure.ac. First steps toward universal build for Mac, which is not yet used by default.
  * Added support for --enable-pipes.
  * use lsb_release if available
  * use lsb_release if available
  * use lsb_release if available
  * get rid of spurious output
  * look for /usr/pkg/bin/gmake
  * fix typo in autogen.sh
  * add comment explaining that this is out of date
  * updated status report
  * PSL binary files will now be fetched from ZIB
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * change name of archive file created for a full release
  * update to reflect changes since initial Sourceforge release
  * rework PSL tree to keep ready-built binaries at ZIB not on Sourceforge
  * add ready-make Stanrard Lisp pdf file
  * remove autom4te.cache
  * add xport sources within PSL part of tree
  * remove explicit use of aclocal and update comments
  * back off from trying to use  AC_CONFIG_MACRO_DIR([m4])
  * property 'svn:keywords' set on 'Makefile'.
  * Intermediate solution on the way to building from outside; similar to libreduce.
  * windows text output must be in UTF
  * windows text output must be in UTF
  * remove attempt to install gnuplot binary pending sourceforge ruls review
  * more testing-mode code
  * updated autoconf-related files
  * try to make libtool stuff more robust wrt versions. Incomplete fix to FXShowMath.cpp
  * give -f -i flags to recreate any missing files
  * allow for generic dir in distribution
  * update manifests
  * redlog/qerrc was obsolete. This was an interface to Hermitian quantifier elimination in the CAS MAS (Modula-2 Algebra System). There is a better implementation of HQE in Redlog meanwhile.
  * Some improvements of printing: utf8-spacing for quantifiers and temporary hacks for spacing in the fox GUI.
  * Missing "break" in "case" at the unicode option.
  * utf8_priint did not work for non-atom bounds.
  * Removed process_pathes. Instead use BPSL, REDIMG, and REDUCE directly. Introduced option -v and -u. load_package redfront instead of in "redfront.red".
  * Enabled SIGINT for CSL-REDUCE.
  * put in -f flag for autoreconf to get libtool files rebuilt
  * Introduced RBUILD for using non-debugging REDUCE with debugging redfront.
  * fix syntax in TEST node code
  * enable-test not with-test
  * Set keyword property for Id.
  * Experimental support for utf-8 terminals. Initial check-in.
  * Experimental support for utf-8 terminals. Initial check-in.
  * X11 font names had changed
  * Bugfix: alpha_1 was typeset like alpha1 in the X GUI.
  * TEST option for debugging keyboard handling
  * add --with-test option to configure
  * add --with-test option to configure
  * Major changes in configure.ac and adaption of the code to this.
  * Isolated the readline stuff in redline.c.
  * Updated header.
  * Roll-back: Makefile.ac was not the right name for this.
  * Updated headers and did a propset on Id.
  * Use the names currently in fashion.
  * Not needed in that form after moving to generic/redfront.
  * Roll-back: errorneously checked in working version with --enable-debug.
  * Moved the C part of redfront to generic/redfront/src.
  * Moved the C part of redfront to generic/redfront/src.
  * Compute the build date in English.
  * Added documentation for the two relevant structs.
  * rl_fancy!-priq failed on ex(for i:=1:27 collect mkid(x,i),x=0). rl_fancy!-ppriop failed on rlqe ex(x,a1*x+b>0 and a2*x+b<0) in ofsf.
  * Added redlog/qepcad.
  * Put some information into the comment field. Use awk instead of gawk. I think when gawk exists, then awk=gawk. gawk is preferable because it supports AWKPATH.
  * Initial check-in.
  * Added libreduce.
  * Initial check-in.
  * Fixed rlabout().
  * Support for an experimental CSL Apple build.
  * With !*rlverbose print some statistic on final simplification in cl_qe. Simplify before fallback qe. Enter fallback qe only when there are quantifiers left after simplification.
  * The answer translation for shifted variables did not work anymore.
  * In cl_simpl remove quantifiers if quantified variables do not occur in the matrix formula.
  * Apply ofsf_surep for "<> 0" as a filter during projection. Declare !*rlpos fluid, which is not yet used at present.
  * put back xport.pat files for PSL binary directories
  * Update of int log file
  * Make i2rd work with floats
  * Copyright notice syntax corrected
  * Definition of deg corrected
  * Error corrected by Winfried Neun
  * provide appropriate deg function for this module
  * remove some unwanted files
  * better detection of intel macs, I hope
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * This is a script for bringing cgb into the distribution with the obsolete getred.pl tree. Here it is not needed anymore.
  * This files has been renamed to redlog.red long ago. This copy was present probably due to the odd deletion policies in CVS.
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Added header comment including copyright and license. Set svn:keywords property for "Id".
  * The svn:keywords property for "Id" had not been set for .tst files.
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id". Added fluids for Id and (c).
  * Added header comment including copyright and license. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id". There was a linebreak missing at the end of the file.
  * remove some unwanted files
  * remove some unwanted files
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id". Added procedure sfto_tdegf.
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id". Added missing "endmodule;" and "end;".
  * Removed CVS log messages, updated (c), and did some formatting. Set svn:keywords property for "Id".
  * Removed CVS log messages, updated (c), and did some formatting.
  * update manifests
  * physop.red and noncom2.red now under BSD license
  * add a bug-list file from the older development version
  * Seems to me that .ttf files must be tagged executable
  * Alter names of special Computer Modern Fonts to avoid clashes
  * correct some spelling typos
  * fix svn address to give sourceforge version
  * make initial screen position a bit better
  * Updates by ACH.
  * correct detection of Scientific Linux
  * add detection of Scientific Linux
  * Explain how to build manual in PDF and HTML form.
  * Scripts and configuration files for processing the manual.
  * Small correction to manual.
  * New text for Manual chapter about maintaining Reduce.
  * A few more minor updates/corrections to the Bibliography.
  * Some more updates, mostly links.
  * A few corrections and additions to the bibiliography.
  * Add more hyperlinks.
  * Changed displayed formula in proc.tex to use LaTeX constructs, so that automatic translation to HTML is easier.
  * Some more updates to the bibliography.
  * Reinstate ACN updates relevant to sourceforge file layout
  * remove two unwanted temporary files that had been checke din by accident
  * Updated REDUCE Bibliography. Added .bst file for running the bibliography through bib2html (Bibtools).
  * remove the older version of libedit
  * xport files not relevent here now code is under subversion
  * Property changes on text files: removed svn:executable property, set svn:eol-style to native.
  * make out-of-tree configuration work
  * Add some more hyperlinks to manual.
  * tri.red now under BSD license
  * Change appearance of links in manual.
  * Set svn:eol-style property to native and reset svn:executable property in toplevel directory.
  * add -r flag to zip when making windows release archive
  * Set svn property svn:eol-style, reset svn:executable
  * Add file referenced in manual.tex.
  * Make old manual.tex run with modified files.
  * Add some hyperlinks.
  * LaTeX driver file for PDF version of manual.
  * previous trace enhancement was not GC safe - now fixed
  * correct an ifdef NO_BYTECOUNT
  * preserve variable ordering with combinexpt
  * enhance trace output in bootstrap version of Reduce to help me debug
  * correct license arrangements
  * ask for bug reports to sourceforge not Hearn
  * Fix compiler bug that caused a crash if over 255 literals used in one function
  * correct == to = in a test in the shell code
  * update manifests
  * change some linked files to be copies
  * still getting make save sorted and termed as copies not links
  * make it a copy not a symbolic link
  * make it a copy not a link
  * make it a copy not a link
  * correct the SAVE target
  * do not copy .svn directory with docs, add a SAVE target
  * enable fancy output by default
  * fix typo in a comment
  * remove redfront-related binaries since I do not want GPL binaries here
  * documentation
  * Bringing into line with Devloper tree
  * Bringing into line with Devloper tree
  * Bringing in line with Developement Reduce
  * try to allow for newer, more fussy, autoconf etc
  * fix configure.in
  * update fox/configure.in in a way that may help freebsd
  * make license truly BSD
Revision 5459 : date 2020-10-27
Revision 5458 : date 2020-10-27
Revision 5457 : date 2020-10-26
Revision 5456 : date 2020-10-26
Revision 5455 : date 2020-10-26
Revision 5454 : date 2020-10-26
Revision 5453 : date 2020-10-25
Revision 5452 : date 2020-10-25
Revision 5451 : date 2020-10-24
Revision 5450 : date 2020-10-24
Revision 5449 : date 2020-10-23
Revision 5448 : date 2020-10-23
Revision 5447 : date 2020-10-23
Revision 5446 : date 2020-10-23
Revision 5445 : date 2020-10-22
Revision 5444 : date 2020-10-21
Revision 5443 : date 2020-10-20
Revision 5442 : date 2020-10-19
Revision 5441 : date 2020-10-19
Revision 5440 : date 2020-10-19
Revision 5439 : date 2020-10-19
Revision 5438 : date 2020-10-19
Revision 5437 : date 2020-10-17
Revision 5436 : date 2020-10-17
Revision 5435 : date 2020-10-16
Revision 5434 : date 2020-10-16
Revision 5433 : date 2020-10-15
Revision 5432 : date 2020-10-15
Revision 5431 : date 2020-10-14
Revision 5430 : date 2020-10-14
Revision 5429 : date 2020-10-13
Revision 5428 : date 2020-10-12
Revision 5427 : date 2020-10-11
Revision 5426 : date 2020-10-10
Revision 5425 : date 2020-10-10
Revision 5424 : date 2020-10-07
Revision 5423 : date 2020-10-07
Revision 5422 : date 2020-10-06
Revision 5421 : date 2020-10-06
Revision 5420 : date 2020-10-05
Revision 5419 : date 2020-10-05
Revision 5418 : date 2020-10-05
Revision 5417 : date 2020-10-05
Revision 5416 : date 2020-10-03
Revision 5415 : date 2020-10-03
Revision 5414 : date 2020-10-03
Revision 5413 : date 2020-10-03
Revision 5412 : date 2020-10-03
Revision 5411 : date 2020-09-27
Revision 5410 : date 2020-09-27
Revision 5409 : date 2020-09-27
Revision 5408 : date 2020-09-25
Revision 5407 : date 2020-09-23
Revision 5406 : date 2020-09-20
Revision 5405 : date 2020-09-20
Revision 5404 : date 2020-09-20
Revision 5403 : date 2020-09-20
Revision 5402 : date 2020-09-20
Revision 5401 : date 2020-09-18
Revision 5400 : date 2020-09-16
Revision 5399 : date 2020-09-15
Revision 5398 : date 2020-09-11
Revision 5397 : date 2020-09-09
Revision 5396 : date 2020-09-09
Revision 5395 : date 2020-09-07
Revision 5394 : date 2020-09-07
Revision 5393 : date 2020-09-06
Revision 5392 : date 2020-09-04
Revision 5391 : date 2020-09-04
Revision 5390 : date 2020-09-03
Revision 5389 : date 2020-08-25
Revision 5388 : date 2020-08-20
Revision 5387 : date 2020-08-20
Revision 5386 : date 2020-08-19
Revision 5385 : date 2020-08-16
Revision 5384 : date 2020-08-12
Revision 5383 : date 2020-08-08
Revision 5382 : date 2020-08-08
Revision 5381 : date 2020-07-19
Revision 5380 : date 2020-07-18
Revision 5379 : date 2020-07-06
Revision 5378 : date 2020-06-25
Revision 5377 : date 2020-06-24
Revision 5376 : date 2020-06-23
Revision 5375 : date 2020-06-23
Revision 5374 : date 2020-06-21
Revision 5373 : date 2020-06-21
Revision 5372 : date 2020-06-21
Revision 5371 : date 2020-06-21
Revision 5370 : date 2020-06-19
Revision 5369 : date 2020-06-17
Revision 5368 : date 2020-06-16
Revision 5367 : date 2020-06-16
Revision 5366 : date 2020-06-16
Revision 5365 : date 2020-06-13
Revision 5364 : date 2020-06-12
Revision 5363 : date 2020-06-11
Revision 5362 : date 2020-06-10
Revision 5361 : date 2020-06-09
Revision 5360 : date 2020-06-08
Revision 5359 : date 2020-06-08
Revision 5358 : date 2020-06-08
Revision 5357 : date 2020-06-07
Revision 5356 : date 2020-06-07
Revision 5355 : date 2020-06-04
Revision 5354 : date 2020-06-02
Revision 5353 : date 2020-06-01
Revision 5352 : date 2020-05-30
Revision 5351 : date 2020-05-30
Revision 5350 : date 2020-05-23
Revision 5349 : date 2020-05-15
Revision 5348 : date 2020-05-13
Revision 5347 : date 2020-05-06
Revision 5346 : date 2020-05-06
Revision 5345 : date 2020-05-03
Revision 5344 : date 2020-05-03
Revision 5343 : date 2020-04-30
Revision 5342 : date 2020-04-29
Revision 5341 : date 2020-04-29
Revision 5340 : date 2020-04-29
Revision 5339 : date 2020-04-28
Revision 5338 : date 2020-04-26
Revision 5337 : date 2020-04-26
Revision 5336 : date 2020-04-25
Revision 5335 : date 2020-04-25
Revision 5334 : date 2020-04-25
Revision 5333 : date 2020-04-25
Revision 5332 : date 2020-04-25
Revision 5331 : date 2020-04-25
Revision 5330 : date 2020-04-23
Revision 5329 : date 2020-04-22
Revision 5327 : date 2020-04-19
Revision 5326 : date 2020-04-19
Revision 5325 : date 2020-04-19
Revision 5324 : date 2020-04-18
Revision 5323 : date 2020-04-17
Revision 5322 : date 2020-04-16
Revision 5321 : date 2020-04-16
Revision 5320 : date 2020-04-16
Revision 5319 : date 2020-04-16
Revision 5318 : date 2020-04-16
Revision 5317 : date 2020-04-15
Revision 5316 : date 2020-04-14
Revision 5315 : date 2020-04-12
Revision 5314 : date 2020-04-12
Revision 5313 : date 2020-04-05
Revision 5312 : date 2020-04-04
Revision 5311 : date 2020-04-04
Revision 5310 : date 2020-04-02
Revision 5309 : date 2020-04-01
Revision 5308 : date 2020-03-30
Revision 5307 : date 2020-03-30
Revision 5306 : date 2020-03-29
Revision 5305 : date 2020-03-28
Revision 5304 : date 2020-03-28
Revision 5303 : date 2020-03-28
Revision 5302 : date 2020-03-28
Revision 5301 : date 2020-03-28
Revision 5300 : date 2020-03-28
Revision 5299 : date 2020-03-28
Revision 5298 : date 2020-03-28
Revision 5297 : date 2020-03-26
Revision 5296 : date 2020-03-26
Revision 5295 : date 2020-03-25
Revision 5294 : date 2020-03-25
Revision 5293 : date 2020-03-22
Revision 5292 : date 2020-03-22
Revision 5291 : date 2020-03-20
Revision 5290 : date 2020-03-19
Revision 5289 : date 2020-03-07
Revision 5288 : date 2020-03-04
Revision 5287 : date 2020-03-03
Revision 5286 : date 2020-02-29
Revision 5285 : date 2020-02-24
Revision 5284 : date 2020-02-23
Revision 5283 : date 2020-02-20
Revision 5282 : date 2020-02-20
Revision 5281 : date 2020-02-20
Revision 5280 : date 2020-02-20
Revision 5279 : date 2020-02-19
Revision 5278 : date 2020-02-19
Revision 5277 : date 2020-02-18
Revision 5276 : date 2020-02-17
Revision 5275 : date 2020-01-26
Revision 5274 : date 2020-01-25
Revision 5273 : date 2020-01-25
Revision 5272 : date 2020-01-24
Revision 5271 : date 2020-01-22
Revision 5270 : date 2020-01-20
Revision 5269 : date 2020-01-20
Revision 5268 : date 2020-01-20
Revision 5267 : date 2020-01-19
Revision 5266 : date 2020-01-19
Revision 5265 : date 2020-01-19
Revision 5264 : date 2020-01-18
Revision 5263 : date 2020-01-18
Revision 5262 : date 2020-01-18
Revision 5261 : date 2020-01-17
Revision 5260 : date 2020-01-16
Revision 5259 : date 2020-01-16
Revision 5258 : date 2020-01-15
Revision 5257 : date 2020-01-13
Revision 5256 : date 2020-01-11
Revision 5255 : date 2020-01-11
Revision 5254 : date 2020-01-11
Revision 5253 : date 2020-01-11
Revision 5252 : date 2020-01-10
Revision 5251 : date 2020-01-08
Revision 5250 : date 2020-01-07
Revision 5249 : date 2020-01-06
Revision 5248 : date 2020-01-06
Revision 5247 : date 2020-01-06
Revision 5246 : date 2020-01-04
Revision 5245 : date 2020-01-04
Revision 5244 : date 2020-01-03
Revision 5243 : date 2020-01-02
Revision 5242 : date 2020-01-02
Revision 5241 : date 2020-01-01
Revision 5240 : date 2020-01-01
Revision 5239 : date 2020-01-01
Revision 5238 : date 2019-12-31
Revision 5237 : date 2019-12-30
Revision 5236 : date 2019-12-30
Revision 5235 : date 2019-12-30
Revision 5234 : date 2019-12-30
Revision 5233 : date 2019-12-29
Revision 5232 : date 2019-12-29
Revision 5231 : date 2019-12-28
Revision 5230 : date 2019-12-28
Revision 5229 : date 2019-12-27
Revision 5228 : date 2019-12-27
Revision 5227 : date 2019-12-27
Revision 5226 : date 2019-12-24
Revision 5225 : date 2019-12-23
Revision 5224 : date 2019-12-22
Revision 5223 : date 2019-12-22
Revision 5222 : date 2019-12-21
Revision 5221 : date 2019-12-21
Revision 5220 : date 2019-12-18
Revision 5219 : date 2019-12-17
Revision 5218 : date 2019-12-15
Revision 5217 : date 2019-12-15
Revision 5216 : date 2019-12-12
Revision 5215 : date 2019-12-12
Revision 5214 : date 2019-12-11
Revision 5213 : date 2019-12-11
Revision 5212 : date 2019-12-10
Revision 5211 : date 2019-12-09
Revision 5210 : date 2019-12-08
Revision 5209 : date 2019-12-08
Revision 5208 : date 2019-12-05
Revision 5207 : date 2019-12-04
Revision 5206 : date 2019-12-04
Revision 5205 : date 2019-12-03
Revision 5204 : date 2019-12-03
Revision 5203 : date 2019-12-02
Revision 5202 : date 2019-12-01
Revision 5201 : date 2019-12-01
Revision 5200 : date 2019-12-01
Revision 5199 : date 2019-11-29
Revision 5198 : date 2019-11-29
Revision 5197 : date 2019-11-28
Revision 5196 : date 2019-11-27
Revision 5195 : date 2019-11-24
Revision 5194 : date 2019-11-22
Revision 5193 : date 2019-11-22
Revision 5192 : date 2019-11-22
Revision 5191 : date 2019-11-19
Revision 5190 : date 2019-11-18
Revision 5189 : date 2019-11-16
Revision 5188 : date 2019-11-12
Revision 5187 : date 2019-11-12
Revision 5186 : date 2019-11-12
Revision 5185 : date 2019-11-11
Revision 5184 : date 2019-11-03
Revision 5183 : date 2019-11-03
Revision 5182 : date 2019-11-02
Revision 5181 : date 2019-11-01
Revision 5180 : date 2019-11-01
Revision 5179 : date 2019-10-31
Revision 5178 : date 2019-10-30
Revision 5177 : date 2019-10-30
Revision 5176 : date 2019-10-25
Revision 5175 : date 2019-10-25
Revision 5174 : date 2019-10-25
Revision 5173 : date 2019-10-23
Revision 5172 : date 2019-10-19
Revision 5171 : date 2019-10-16
Revision 5170 : date 2019-10-14
Revision 5169 : date 2019-10-14
Revision 5168 : date 2019-10-11
Revision 5167 : date 2019-10-11
Revision 5166 : date 2019-10-10
Revision 5165 : date 2019-10-10
Revision 5164 : date 2019-10-09
Revision 5163 : date 2019-10-08
Revision 5162 : date 2019-10-07
Revision 5161 : date 2019-10-07
Revision 5160 : date 2019-10-06
Revision 5159 : date 2019-10-06
Revision 5158 : date 2019-10-06
Revision 5157 : date 2019-10-04
Revision 5156 : date 2019-10-04
Revision 5155 : date 2019-10-04
Revision 5154 : date 2019-10-02
Revision 5153 : date 2019-10-02
Revision 5152 : date 2019-10-01
Revision 5151 : date 2019-09-30
Revision 5150 : date 2019-09-28
Revision 5149 : date 2019-09-28
Revision 5148 : date 2019-09-27
Revision 5147 : date 2019-09-27
Revision 5146 : date 2019-09-27
Revision 5145 : date 2019-09-25
Revision 5144 : date 2019-09-24
Revision 5143 : date 2019-09-22
Revision 5142 : date 2019-09-22
Revision 5141 : date 2019-09-22
Revision 5140 : date 2019-09-21
Revision 5139 : date 2019-09-21
Revision 5138 : date 2019-09-20
Revision 5137 : date 2019-09-20
Revision 5136 : date 2019-09-19
Revision 5135 : date 2019-09-19
Revision 5134 : date 2019-09-19
Revision 5133 : date 2019-09-17
Revision 5132 : date 2019-09-16
Revision 5131 : date 2019-09-16
Revision 5130 : date 2019-09-15
Revision 5129 : date 2019-09-15
Revision 5128 : date 2019-09-14
Revision 5127 : date 2019-09-14
Revision 5126 : date 2019-09-13
Revision 5125 : date 2019-09-13
Revision 5124 : date 2019-09-13
Revision 5123 : date 2019-09-13
Revision 5122 : date 2019-09-12
Revision 5121 : date 2019-09-12
Revision 5120 : date 2019-09-11
Revision 5119 : date 2019-09-11
Revision 5118 : date 2019-09-10
Revision 5117 : date 2019-09-10
Revision 5116 : date 2019-09-10
Revision 5115 : date 2019-09-06
Revision 5114 : date 2019-09-06
Revision 5113 : date 2019-09-06
Revision 5112 : date 2019-09-05
Revision 5111 : date 2019-09-05
Revision 5110 : date 2019-09-05
Revision 5109 : date 2019-09-04
Revision 5108 : date 2019-09-02
Revision 5107 : date 2019-09-01
Revision 5106 : date 2019-09-01
Revision 5105 : date 2019-09-01
Revision 5104 : date 2019-08-30
Revision 5103 : date 2019-08-29
Revision 5102 : date 2019-08-29
Revision 5101 : date 2019-08-27
Revision 5100 : date 2019-08-25
Revision 5099 : date 2019-08-24
Revision 5098 : date 2019-08-22
Revision 5097 : date 2019-08-21
Revision 5096 : date 2019-08-21
Revision 5095 : date 2019-08-20
Revision 5094 : date 2019-08-20
Revision 5093 : date 2019-08-20
Revision 5092 : date 2019-08-18
Revision 5091 : date 2019-08-18
Revision 5090 : date 2019-08-18
Revision 5089 : date 2019-08-18
Revision 5088 : date 2019-08-18
Revision 5087 : date 2019-08-16
Revision 5086 : date 2019-08-16
Revision 5085 : date 2019-08-15
Revision 5084 : date 2019-08-15
Revision 5083 : date 2019-08-13
Revision 5082 : date 2019-08-12
Revision 5081 : date 2019-08-12
Revision 5080 : date 2019-08-12
Revision 5079 : date 2019-08-11
Revision 5078 : date 2019-08-11
Revision 5077 : date 2019-08-11
Revision 5076 : date 2019-08-11
Revision 5075 : date 2019-08-10
Revision 5074 : date 2019-08-10
Revision 5073 : date 2019-08-06
Revision 5072 : date 2019-08-06
Revision 5071 : date 2019-08-05
Revision 5070 : date 2019-08-05
Revision 5069 : date 2019-08-03
Revision 5068 : date 2019-08-03
Revision 5067 : date 2019-08-02
Revision 5066 : date 2019-07-31
Revision 5065 : date 2019-07-31
Revision 5064 : date 2019-07-31
Revision 5063 : date 2019-07-31
Revision 5062 : date 2019-07-31
Revision 5061 : date 2019-07-30
Revision 5060 : date 2019-07-30
Revision 5059 : date 2019-07-26
Revision 5058 : date 2019-07-21
Revision 5057 : date 2019-07-21
Revision 5056 : date 2019-07-20
Revision 5055 : date 2019-07-19
Revision 5054 : date 2019-07-10
Revision 5053 : date 2019-07-07
Revision 5052 : date 2019-07-06
Revision 5051 : date 2019-07-06
Revision 5050 : date 2019-07-05
Revision 5049 : date 2019-07-02
Revision 5048 : date 2019-07-01
Revision 5047 : date 2019-06-30
Revision 5046 : date 2019-06-27
Revision 5045 : date 2019-06-27
Revision 5044 : date 2019-06-26
Revision 5043 : date 2019-06-26
Revision 5042 : date 2019-06-26
Revision 5041 : date 2019-06-25
Revision 5040 : date 2019-06-23
Revision 5039 : date 2019-06-23
Revision 5038 : date 2019-06-23
Revision 5037 : date 2019-06-22
Revision 5036 : date 2019-06-20
Revision 5035 : date 2019-06-17
Revision 5034 : date 2019-06-14
Revision 5033 : date 2019-06-13
Revision 5032 : date 2019-06-13
Revision 5031 : date 2019-06-13
Revision 5030 : date 2019-06-13
Revision 5029 : date 2019-06-13
Revision 5028 : date 2019-06-09
Revision 5027 : date 2019-06-07
Revision 5026 : date 2019-06-06
Revision 5025 : date 2019-06-05
Revision 5024 : date 2019-06-05
Revision 5023 : date 2019-06-03
Revision 5022 : date 2019-06-02
Revision 5021 : date 2019-06-02
Revision 5020 : date 2019-06-01
Revision 5019 : date 2019-06-01
Revision 5018 : date 2019-06-01
Revision 5017 : date 2019-05-31
Revision 5016 : date 2019-05-31
Revision 5015 : date 2019-05-29
Revision 5014 : date 2019-05-29
Revision 5013 : date 2019-05-27
Revision 5012 : date 2019-05-26
Revision 5011 : date 2019-05-25
Revision 5010 : date 2019-05-25
Revision 5009 : date 2019-05-23
Revision 5008 : date 2019-05-23
Revision 5007 : date 2019-05-23
Revision 5006 : date 2019-05-21
Revision 5005 : date 2019-05-21
Revision 5004 : date 2019-05-20
Revision 5003 : date 2019-05-20
Revision 5002 : date 2019-05-20
Revision 5001 : date 2019-05-20
Revision 5000 : date 2019-05-20
Revision 4999 : date 2019-05-19
Revision 4998 : date 2019-05-18
Revision 4997 : date 2019-05-16
Revision 4996 : date 2019-05-15
Revision 4995 : date 2019-05-15
Revision 4994 : date 2019-05-12
Revision 4993 : date 2019-05-12
Revision 4992 : date 2019-05-11
Revision 4991 : date 2019-05-11
Revision 4990 : date 2019-05-11
Revision 4989 : date 2019-05-10
Revision 4988 : date 2019-05-10
Revision 4987 : date 2019-05-09
Revision 4986 : date 2019-05-08
Revision 4985 : date 2019-05-07
Revision 4984 : date 2019-05-07
Revision 4983 : date 2019-05-07
Revision 4982 : date 2019-05-07
Revision 4981 : date 2019-05-06
Revision 4980 : date 2019-05-06
Revision 4979 : date 2019-05-04
Revision 4978 : date 2019-05-03
Revision 4977 : date 2019-05-02
Revision 4976 : date 2019-05-02
Revision 4975 : date 2019-05-01
Revision 4974 : date 2019-04-28
Revision 4973 : date 2019-04-27
Revision 4972 : date 2019-04-26
Revision 4971 : date 2019-04-26
Revision 4970 : date 2019-04-25
Revision 4969 : date 2019-04-25
Revision 4968 : date 2019-04-25
Revision 4967 : date 2019-04-24
Revision 4966 : date 2019-04-24
Revision 4965 : date 2019-04-19
Revision 4964 : date 2019-04-19
Revision 4963 : date 2019-04-19
Revision 4962 : date 2019-04-19
Revision 4961 : date 2019-04-03
Revision 4960 : date 2019-04-03
Revision 4959 : date 2019-04-02
Revision 4958 : date 2019-04-02
Revision 4957 : date 2019-04-02
Revision 4956 : date 2019-03-31
Revision 4955 : date 2019-03-31
Revision 4954 : date 2019-03-30
Revision 4953 : date 2019-03-30
Revision 4952 : date 2019-03-30
Revision 4951 : date 2019-03-30
Revision 4950 : date 2019-03-28
Revision 4949 : date 2019-03-17
Revision 4948 : date 2019-03-17
Revision 4947 : date 2019-03-17
Revision 4946 : date 2019-03-16
Revision 4945 : date 2019-03-16
Revision 4944 : date 2019-03-15
Revision 4943 : date 2019-03-15
Revision 4942 : date 2019-03-15
Revision 4941 : date 2019-03-14
Revision 4940 : date 2019-03-14
Revision 4939 : date 2019-03-12
Revision 4938 : date 2019-03-10
Revision 4937 : date 2019-03-10
Revision 4936 : date 2019-03-10
Revision 4935 : date 2019-03-10
Revision 4934 : date 2019-03-10
Revision 4933 : date 2019-03-09
Revision 4932 : date 2019-03-09
Revision 4931 : date 2019-03-09
Revision 4930 : date 2019-03-08
Revision 4929 : date 2019-03-07
Revision 4928 : date 2019-03-06
Revision 4927 : date 2019-03-06
Revision 4926 : date 2019-03-05
Revision 4925 : date 2019-03-05
Revision 4924 : date 2019-03-05
Revision 4923 : date 2019-03-04
Revision 4922 : date 2019-03-03
Revision 4921 : date 2019-03-02
Revision 4920 : date 2019-03-02
Revision 4919 : date 2019-03-01
Revision 4917 : date 2019-02-27
Revision 4916 : date 2019-02-27
Revision 4915 : date 2019-02-26
Revision 4914 : date 2019-02-25
Revision 4913 : date 2019-02-25
Revision 4912 : date 2019-02-25
Revision 4911 : date 2019-02-23
Revision 4910 : date 2019-02-23
Revision 4909 : date 2019-02-19
Revision 4908 : date 2019-02-19
Revision 4907 : date 2019-02-18
Revision 4906 : date 2019-02-18
Revision 4905 : date 2019-02-17
Revision 4904 : date 2019-02-17
Revision 4903 : date 2019-02-17
Revision 4902 : date 2019-02-17
Revision 4901 : date 2019-02-15
Revision 4900 : date 2019-02-15
Revision 4899 : date 2019-02-14
Revision 4898 : date 2019-02-13
Revision 4897 : date 2019-02-10
Revision 4896 : date 2019-02-09
Revision 4895 : date 2019-02-08
Revision 4894 : date 2019-02-03
Revision 4893 : date 2019-02-03
Revision 4892 : date 2019-02-01
Revision 4891 : date 2019-01-31
Revision 4890 : date 2019-01-31
Revision 4889 : date 2019-01-31
Revision 4888 : date 2019-01-31
Revision 4887 : date 2019-01-29
Revision 4886 : date 2019-01-29
Revision 4885 : date 2019-01-29
Revision 4884 : date 2019-01-27
Revision 4883 : date 2019-01-27
Revision 4882 : date 2019-01-27
Revision 4881 : date 2019-01-27
Revision 4880 : date 2019-01-27
Revision 4879 : date 2019-01-27
Revision 4878 : date 2019-01-26
Revision 4877 : date 2019-01-26
Revision 4876 : date 2019-01-26
Revision 4875 : date 2019-01-26
Revision 4874 : date 2019-01-26
Revision 4873 : date 2019-01-26
Revision 4872 : date 2019-01-24
Revision 4871 : date 2019-01-24
Revision 4870 : date 2019-01-21
Revision 4869 : date 2019-01-20
Revision 4868 : date 2019-01-20
Revision 4867 : date 2019-01-20
Revision 4866 : date 2019-01-20
Revision 4865 : date 2019-01-17
Revision 4864 : date 2019-01-15
Revision 4863 : date 2019-01-14
Revision 4862 : date 2019-01-13
Revision 4861 : date 2019-01-13
Revision 4860 : date 2019-01-13
Revision 4859 : date 2019-01-13
Revision 4858 : date 2019-01-12
Revision 4857 : date 2019-01-12
Revision 4856 : date 2019-01-11
Revision 4855 : date 2019-01-11
Revision 4854 : date 2019-01-10
Revision 4853 : date 2019-01-10
Revision 4852 : date 2019-01-09
Revision 4851 : date 2019-01-07
Revision 4850 : date 2019-01-07
Revision 4849 : date 2019-01-07
Revision 4848 : date 2019-01-05
Revision 4847 : date 2019-01-04
Revision 4846 : date 2019-01-04
Revision 4845 : date 2019-01-03
Revision 4844 : date 2019-01-02
Revision 4843 : date 2019-01-01
Revision 4842 : date 2018-12-31
Revision 4841 : date 2018-12-31
Revision 4840 : date 2018-12-30
Revision 4839 : date 2018-12-28
Revision 4838 : date 2018-12-24
Revision 4837 : date 2018-12-24
Revision 4836 : date 2018-12-24
Revision 4835 : date 2018-12-24
Revision 4834 : date 2018-12-17
Revision 4833 : date 2018-12-16
Revision 4832 : date 2018-12-15
Revision 4831 : date 2018-12-15
Revision 4830 : date 2018-11-25
Revision 4829 : date 2018-11-22
Revision 4828 : date 2018-11-21
Revision 4827 : date 2018-11-20
Revision 4826 : date 2018-11-20
Revision 4825 : date 2018-11-17
Revision 4824 : date 2018-11-14
Revision 4823 : date 2018-11-11
Revision 4822 : date 2018-11-08
Revision 4821 : date 2018-11-04
Revision 4820 : date 2018-11-03
Revision 4819 : date 2018-11-03
Revision 4818 : date 2018-11-01
Revision 4817 : date 2018-10-31
Revision 4816 : date 2018-10-28
Revision 4815 : date 2018-10-28
Revision 4814 : date 2018-10-27
Revision 4813 : date 2018-10-27
Revision 4812 : date 2018-10-19
Revision 4811 : date 2018-10-19
Revision 4810 : date 2018-10-19
Revision 4809 : date 2018-10-19
Revision 4808 : date 2018-10-19
Revision 4807 : date 2018-10-19
Revision 4806 : date 2018-10-19
Revision 4805 : date 2018-10-13
Revision 4804 : date 2018-10-13
Revision 4803 : date 2018-10-12
Revision 4802 : date 2018-10-12
Revision 4801 : date 2018-10-12
Revision 4800 : date 2018-10-11
Revision 4799 : date 2018-10-11
Revision 4798 : date 2018-10-11
Revision 4797 : date 2018-10-09
Revision 4796 : date 2018-10-06
Revision 4795 : date 2018-10-06
Revision 4794 : date 2018-10-02
Revision 4793 : date 2018-10-01
Revision 4792 : date 2018-10-01
Revision 4791 : date 2018-09-30
Revision 4790 : date 2018-09-29
Revision 4789 : date 2018-09-29
Revision 4788 : date 2018-09-29
Revision 4787 : date 2018-09-28
Revision 4786 : date 2018-09-28
Revision 4785 : date 2018-09-28
Revision 4784 : date 2018-09-27
Revision 4783 : date 2018-09-25
Revision 4782 : date 2018-09-25
Revision 4781 : date 2018-09-25
Revision 4780 : date 2018-09-25
Revision 4779 : date 2018-09-25
Revision 4778 : date 2018-09-24
Revision 4777 : date 2018-09-24
Revision 4776 : date 2018-09-23
Revision 4775 : date 2018-09-22
Revision 4774 : date 2018-09-21
Revision 4773 : date 2018-09-20
Revision 4772 : date 2018-09-20
Revision 4771 : date 2018-09-20
Revision 4770 : date 2018-09-20
Revision 4769 : date 2018-09-19
Revision 4768 : date 2018-09-19
Revision 4767 : date 2018-09-19
Revision 4766 : date 2018-09-19
Revision 4765 : date 2018-09-18
Revision 4764 : date 2018-09-18
Revision 4763 : date 2018-09-17
Revision 4762 : date 2018-09-16
Revision 4761 : date 2018-09-14
Revision 4760 : date 2018-09-14
Revision 4759 : date 2018-09-13
Revision 4758 : date 2018-09-13
Revision 4757 : date 2018-09-10
Revision 4756 : date 2018-09-10
Revision 4755 : date 2018-09-10
Revision 4754 : date 2018-09-05
Revision 4753 : date 2018-09-05
Revision 4752 : date 2018-09-05
Revision 4751 : date 2018-09-05
Revision 4750 : date 2018-09-02
Revision 4749 : date 2018-08-28
Revision 4748 : date 2018-08-28
Revision 4747 : date 2018-08-28
Revision 4746 : date 2018-08-27
Revision 4745 : date 2018-08-26
Revision 4744 : date 2018-08-26
Revision 4743 : date 2018-08-26
Revision 4742 : date 2018-08-26
Revision 4741 : date 2018-08-25
Revision 4740 : date 2018-08-23
Revision 4739 : date 2018-08-22
Revision 4738 : date 2018-08-21
Revision 4737 : date 2018-08-20
Revision 4736 : date 2018-08-18
Revision 4735 : date 2018-08-17
Revision 4734 : date 2018-08-17
Revision 4733 : date 2018-08-16
Revision 4732 : date 2018-08-16
Revision 4731 : date 2018-08-16
Revision 4730 : date 2018-08-15
Revision 4729 : date 2018-08-14
Revision 4728 : date 2018-08-14
Revision 4727 : date 2018-08-14
Revision 4726 : date 2018-08-14
Revision 4725 : date 2018-08-14
Revision 4724 : date 2018-08-13
Revision 4723 : date 2018-08-12
Revision 4722 : date 2018-08-11
Revision 4721 : date 2018-08-11
Revision 4720 : date 2018-08-10
Revision 4719 : date 2018-08-09
Revision 4718 : date 2018-08-08
Revision 4717 : date 2018-08-08
Revision 4716 : date 2018-08-08
Revision 4715 : date 2018-08-08
Revision 4714 : date 2018-08-07
Revision 4713 : date 2018-08-07
Revision 4712 : date 2018-08-05
Revision 4711 : date 2018-08-05
Revision 4710 : date 2018-08-04
Revision 4709 : date 2018-08-04
Revision 4708 : date 2018-08-04
Revision 4707 : date 2018-08-04
Revision 4706 : date 2018-08-04
Revision 4705 : date 2018-08-03
Revision 4704 : date 2018-07-31
Revision 4703 : date 2018-07-27
Revision 4702 : date 2018-07-27
Revision 4701 : date 2018-07-27
Revision 4700 : date 2018-07-25
Revision 4699 : date 2018-07-24
Revision 4698 : date 2018-07-24
Revision 4697 : date 2018-07-22
Revision 4696 : date 2018-07-22
Revision 4695 : date 2018-07-22
Revision 4694 : date 2018-07-11
Revision 4693 : date 2018-07-08
Revision 4692 : date 2018-07-08
Revision 4691 : date 2018-07-08
Revision 4690 : date 2018-07-08
Revision 4689 : date 2018-07-08
Revision 4688 : date 2018-07-07
Revision 4687 : date 2018-07-04
Revision 4686 : date 2018-07-03
Revision 4685 : date 2018-07-03
Revision 4684 : date 2018-07-02
Revision 4683 : date 2018-07-01
Revision 4682 : date 2018-06-30
Revision 4681 : date 2018-06-30
Revision 4680 : date 2018-06-30
Revision 4679 : date 2018-06-30
Revision 4678 : date 2018-06-30
Revision 4677 : date 2018-06-28
Revision 4676 : date 2018-06-28
Revision 4675 : date 2018-06-27
Revision 4674 : date 2018-06-26
Revision 4673 : date 2018-06-24
Revision 4672 : date 2018-06-23
Revision 4671 : date 2018-06-23
Revision 4670 : date 2018-06-23
Revision 4669 : date 2018-06-22
Revision 4668 : date 2018-06-22
Revision 4667 : date 2018-06-22
Revision 4666 : date 2018-06-22
Revision 4665 : date 2018-06-22
Revision 4664 : date 2018-06-22
Revision 4663 : date 2018-06-20
Revision 4662 : date 2018-06-20
Revision 4661 : date 2018-06-20
Revision 4660 : date 2018-06-19
Revision 4659 : date 2018-06-19
Revision 4658 : date 2018-06-19
Revision 4657 : date 2018-06-18
Revision 4656 : date 2018-06-17
Revision 4655 : date 2018-06-17
Revision 4654 : date 2018-06-17
Revision 4653 : date 2018-06-17
Revision 4652 : date 2018-06-16
Revision 4651 : date 2018-06-15
Revision 4650 : date 2018-06-14
Revision 4649 : date 2018-06-13
Revision 4648 : date 2018-06-10
Revision 4647 : date 2018-06-09
Revision 4646 : date 2018-06-09
Revision 4645 : date 2018-06-08
Revision 4644 : date 2018-06-08
Revision 4643 : date 2018-06-07
Revision 4642 : date 2018-06-06
Revision 4641 : date 2018-06-06
Revision 4640 : date 2018-06-06
Revision 4639 : date 2018-06-06
Revision 4638 : date 2018-06-05
Revision 4637 : date 2018-06-05
Revision 4636 : date 2018-06-05
Revision 4635 : date 2018-06-04
Revision 4634 : date 2018-05-31
Revision 4633 : date 2018-05-31
Revision 4632 : date 2018-05-31
Revision 4631 : date 2018-05-28
Revision 4630 : date 2018-05-28
Revision 4629 : date 2018-05-27
Revision 4628 : date 2018-05-27
Revision 4627 : date 2018-05-27
Revision 4626 : date 2018-05-26
Revision 4625 : date 2018-05-26
Revision 4624 : date 2018-05-25
Revision 4623 : date 2018-05-25
Revision 4622 : date 2018-05-22
Revision 4621 : date 2018-05-22
Revision 4620 : date 2018-05-21
Revision 4619 : date 2018-05-21
Revision 4618 : date 2018-05-21
Revision 4617 : date 2018-05-20
Revision 4616 : date 2018-05-20
Revision 4615 : date 2018-05-19
Revision 4614 : date 2018-05-18
Revision 4613 : date 2018-05-17
Revision 4612 : date 2018-05-17
Revision 4611 : date 2018-05-16
Revision 4610 : date 2018-05-16
Revision 4609 : date 2018-05-16
Revision 4608 : date 2018-05-15
Revision 4607 : date 2018-05-15
Revision 4606 : date 2018-05-14
Revision 4605 : date 2018-05-14
Revision 4604 : date 2018-05-14
Revision 4603 : date 2018-05-14
Revision 4602 : date 2018-05-12
Revision 4601 : date 2018-05-10
Revision 4600 : date 2018-05-09
Revision 4599 : date 2018-05-07
Revision 4598 : date 2018-05-07
Revision 4597 : date 2018-05-07
Revision 4596 : date 2018-05-06
Revision 4595 : date 2018-05-06
Revision 4594 : date 2018-05-06
Revision 4593 : date 2018-05-05
Revision 4592 : date 2018-05-05
Revision 4591 : date 2018-05-05
Revision 4590 : date 2018-05-04
Revision 4589 : date 2018-04-30
Revision 4588 : date 2018-04-28
Revision 4587 : date 2018-04-28
Revision 4586 : date 2018-04-14
Revision 4585 : date 2018-04-13
Revision 4584 : date 2018-04-13
Revision 4583 : date 2018-04-12
Revision 4582 : date 2018-04-11
Revision 4581 : date 2018-04-11
Revision 4580 : date 2018-04-11
Revision 4579 : date 2018-04-09
Revision 4578 : date 2018-04-08
Revision 4577 : date 2018-04-08
Revision 4576 : date 2018-04-08
Revision 4575 : date 2018-04-07
Revision 4574 : date 2018-04-07
Revision 4573 : date 2018-04-07
Revision 4572 : date 2018-04-06
Revision 4571 : date 2018-04-06
Revision 4570 : date 2018-04-06
Revision 4569 : date 2018-04-06
Revision 4568 : date 2018-04-05
Revision 4567 : date 2018-04-05
Revision 4566 : date 2018-04-03
Revision 4565 : date 2018-04-03
Revision 4564 : date 2018-04-03
Revision 4563 : date 2018-04-03
Revision 4562 : date 2018-04-03
Revision 4561 : date 2018-04-03
Revision 4560 : date 2018-04-03
Revision 4559 : date 2018-04-03
Revision 4558 : date 2018-04-03
Revision 4557 : date 2018-04-02
Revision 4556 : date 2018-04-02
Revision 4555 : date 2018-04-02
Revision 4554 : date 2018-04-02
Revision 4553 : date 2018-04-02
Revision 4552 : date 2018-04-01
Revision 4551 : date 2018-04-01
Revision 4550 : date 2018-03-31
Revision 4549 : date 2018-03-29
Revision 4548 : date 2018-03-28
Revision 4547 : date 2018-03-26
Revision 4546 : date 2018-03-26
Revision 4545 : date 2018-03-26
Revision 4544 : date 2018-03-26
Revision 4543 : date 2018-03-26
Revision 4542 : date 2018-03-25
Revision 4541 : date 2018-03-25
Revision 4540 : date 2018-03-24
Revision 4539 : date 2018-03-24
Revision 4538 : date 2018-03-22
Revision 4537 : date 2018-03-22
Revision 4536 : date 2018-03-22
Revision 4535 : date 2018-03-21
Revision 4534 : date 2018-03-20
Revision 4533 : date 2018-03-20
Revision 4532 : date 2018-03-19
Revision 4531 : date 2018-03-18
Revision 4530 : date 2018-03-18
Revision 4529 : date 2018-03-17
Revision 4528 : date 2018-03-17
Revision 4527 : date 2018-03-17
Revision 4526 : date 2018-03-16
Revision 4525 : date 2018-03-16
Revision 4524 : date 2018-03-16
Revision 4523 : date 2018-03-14
Revision 4522 : date 2018-03-10
Revision 4521 : date 2018-03-08
Revision 4520 : date 2018-03-04
Revision 4519 : date 2018-03-04
Revision 4518 : date 2018-03-04
Revision 4517 : date 2018-03-01
Revision 4516 : date 2018-03-01
Revision 4515 : date 2018-02-28
Revision 4514 : date 2018-02-28
Revision 4513 : date 2018-02-28
Revision 4512 : date 2018-02-28
Revision 4511 : date 2018-02-27
Revision 4510 : date 2018-02-27
Revision 4509 : date 2018-02-27
Revision 4508 : date 2018-02-26
Revision 4507 : date 2018-02-26
Revision 4506 : date 2018-02-26
Revision 4505 : date 2018-02-26
Revision 4504 : date 2018-02-25
Revision 4503 : date 2018-02-25
Revision 4502 : date 2018-02-25
Revision 4501 : date 2018-02-24
Revision 4500 : date 2018-02-24
Revision 4499 : date 2018-02-24
Revision 4498 : date 2018-02-24
Revision 4497 : date 2018-02-24
Revision 4496 : date 2018-02-24
Revision 4495 : date 2018-02-24
Revision 4494 : date 2018-02-23
Revision 4493 : date 2018-02-23
Revision 4492 : date 2018-02-23
Revision 4491 : date 2018-02-23
Revision 4490 : date 2018-02-23
Revision 4489 : date 2018-02-22
Revision 4488 : date 2018-02-22
Revision 4487 : date 2018-02-21
Revision 4486 : date 2018-02-21
Revision 4485 : date 2018-02-21
Revision 4484 : date 2018-02-19
Revision 4483 : date 2018-02-19
Revision 4482 : date 2018-02-19
Revision 4481 : date 2018-02-19
Revision 4480 : date 2018-02-18
Revision 4479 : date 2018-02-18
Revision 4478 : date 2018-02-18
Revision 4477 : date 2018-02-18
Revision 4476 : date 2018-02-18
Revision 4475 : date 2018-02-18
Revision 4474 : date 2018-02-18
Revision 4473 : date 2018-02-18
Revision 4472 : date 2018-02-17
Revision 4471 : date 2018-02-17
Revision 4470 : date 2018-02-17
Revision 4469 : date 2018-02-17
Revision 4468 : date 2018-02-17
Revision 4467 : date 2018-02-17
Revision 4466 : date 2018-02-17
Revision 4465 : date 2018-02-17
Revision 4464 : date 2018-02-17
Revision 4463 : date 2018-02-16
Revision 4462 : date 2018-02-16
Revision 4461 : date 2018-02-16
Revision 4460 : date 2018-02-16
Revision 4459 : date 2018-02-16
Revision 4458 : date 2018-02-16
Revision 4457 : date 2018-02-16
Revision 4456 : date 2018-02-16
Revision 4455 : date 2018-02-16
Revision 4454 : date 2018-02-16
